{
    "sourceFile": "src/App.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 13,
            "patches": [
                {
                    "date": 1743295957343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743295991140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         <Routes>\n           \n           {/* Prevents unwanted redirect before user state is restored */}\n           <Route path=\"/\" element={user ? <Navigate to=\"/dashboard\" replace /> : <Login />} />\n-          <Route path=\"/\" element={<DashboardLayout />}></Route>\n+          <Route path=`/patient/form/:id` element={<DashboardLayout />}/>\n           {/* DashboardLayout should wrap all child routes */}\n           {user && (\n             <Route path=\"/\" element={<DashboardLayout />}>\n               {adminRoutes.map((route) => {\n"
                },
                {
                    "date": 1743295997043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         <Routes>\n           \n           {/* Prevents unwanted redirect before user state is restored */}\n           <Route path=\"/\" element={user ? <Navigate to=\"/dashboard\" replace /> : <Login />} />\n-          <Route path=`/patient/form/:id` element={<DashboardLayout />}/>\n+          <Route path='/patient/form/:id' element={<DashboardLayout />}/>\n           {/* DashboardLayout should wrap all child routes */}\n           {user && (\n             <Route path=\"/\" element={<DashboardLayout />}>\n               {adminRoutes.map((route) => {\n"
                },
                {
                    "date": 1743296009109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n-import { Suspense, useEffect, useState } from \"react\";\n+import { lazy, Suspense, useEffect, useState } from \"react\";\n import { BrowserRouter as Router, Route, Routes, Navigate } from \"react-router-dom\";\n \n import DashboardLayout from \"./layouts/Dashboard\";\n import adminRoutes from \"./layouts/Dashboard/routes/adminroutes\";\n import { ToasterComponent } from \"./components/Toaster\";\n import Login from \"./layouts/Dashboard/Pages/Login\";\n import { AuthContext } from \"./Context/AuthContext\";\n import { Box, CircularProgress } from \"@mui/material\";\n+const CompletedForms = lazy(() => import(\"../Pages/CompletedForms\"))\n \n function App() {\n   const [user, setUser] = useState(null);\n   const [loading, setLoading] = useState(true); // New loading state\n"
                },
                {
                    "date": 1743296023879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,14 @@\n import { ToasterComponent } from \"./components/Toaster\";\n import Login from \"./layouts/Dashboard/Pages/Login\";\n import { AuthContext } from \"./Context/AuthContext\";\n import { Box, CircularProgress } from \"@mui/material\";\n-const CompletedForms = lazy(() => import(\"../Pages/CompletedForms\"))\n \n+\n function App() {\n   const [user, setUser] = useState(null);\n   const [loading, setLoading] = useState(true); // New loading state\n-\n+  const CompletedForms = lazy(() => import(\"../Pages/CompletedForms\"))\n   // Load user from localStorage when the app starts\n   useEffect(() => {\n     const storedUser = localStorage.getItem(\"user\");\n     if (storedUser) {\n"
                },
                {
                    "date": 1743296041682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         <Routes>\n           \n           {/* Prevents unwanted redirect before user state is restored */}\n           <Route path=\"/\" element={user ? <Navigate to=\"/dashboard\" replace /> : <Login />} />\n-          <Route path='/patient/form/:id' element={<DashboardLayout />}/>\n+          <Route path='/patient/form/:id' element={<CompletedForms />}/>\n           {/* DashboardLayout should wrap all child routes */}\n           {user && (\n             <Route path=\"/\" element={<DashboardLayout />}>\n               {adminRoutes.map((route) => {\n"
                },
                {
                    "date": 1743296059138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,14 @@\n import { ToasterComponent } from \"./components/Toaster\";\n import Login from \"./layouts/Dashboard/Pages/Login\";\n import { AuthContext } from \"./Context/AuthContext\";\n import { Box, CircularProgress } from \"@mui/material\";\n+const CompletedForms = lazy(() => import(\"../Pages/CompletedForms\"))\n \n-\n function App() {\n   const [user, setUser] = useState(null);\n   const [loading, setLoading] = useState(true); // New loading state\n-  const CompletedForms = lazy(() => import(\"../Pages/CompletedForms\"))\n+\n   // Load user from localStorage when the app starts\n   useEffect(() => {\n     const storedUser = localStorage.getItem(\"user\");\n     if (storedUser) {\n"
                },
                {
                    "date": 1743296184433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { ToasterComponent } from \"./components/Toaster\";\n import Login from \"./layouts/Dashboard/Pages/Login\";\n import { AuthContext } from \"./Context/AuthContext\";\n import { Box, CircularProgress } from \"@mui/material\";\n-const CompletedForms = lazy(() => import(\"../Pages/CompletedForms\"))\n+const CompletedForms = lazy(() => import(\"../src/layouts/Dashboard/Pages/UserForm\"))\n \n function App() {\n   const [user, setUser] = useState(null);\n   const [loading, setLoading] = useState(true); // New loading state\n"
                },
                {
                    "date": 1743296192563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { ToasterComponent } from \"./components/Toaster\";\n import Login from \"./layouts/Dashboard/Pages/Login\";\n import { AuthContext } from \"./Context/AuthContext\";\n import { Box, CircularProgress } from \"@mui/material\";\n-const CompletedForms = lazy(() => import(\"../src/layouts/Dashboard/Pages/UserForm\"))\n+const UserForm = lazy(() => import(\"../src/layouts/Dashboard/Pages/UserForm\"))\n \n function App() {\n   const [user, setUser] = useState(null);\n   const [loading, setLoading] = useState(true); // New loading state\n@@ -45,9 +45,9 @@\n         <Routes>\n           \n           {/* Prevents unwanted redirect before user state is restored */}\n           <Route path=\"/\" element={user ? <Navigate to=\"/dashboard\" replace /> : <Login />} />\n-          <Route path='/patient/form/:id' element={<CompletedForms />}/>\n+          <Route path='/patient/form/:id' element={<UserForm />}/>\n           {/* DashboardLayout should wrap all child routes */}\n           {user && (\n             <Route path=\"/\" element={<DashboardLayout />}>\n               {adminRoutes.map((route) => {\n"
                },
                {
                    "date": 1743296200211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         <Routes>\n           \n           {/* Prevents unwanted redirect before user state is restored */}\n           <Route path=\"/\" element={user ? <Navigate to=\"/dashboard\" replace /> : <Login />} />\n-          <Route path='/patient/form/:id' element={<UserForm />}/>\n+          <Route path='/patient/form/:id' element={UserForm}/>\n           {/* DashboardLayout should wrap all child routes */}\n           {user && (\n             <Route path=\"/\" element={<DashboardLayout />}>\n               {adminRoutes.map((route) => {\n"
                },
                {
                    "date": 1743296312010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         <Routes>\n           \n           {/* Prevents unwanted redirect before user state is restored */}\n           <Route path=\"/\" element={user ? <Navigate to=\"/dashboard\" replace /> : <Login />} />\n-          <Route path='/patient/form/:id' element={UserForm}/>\n+          <Route path='/patient/form/:id' element={<UserForm/>}/>\n           {/* DashboardLayout should wrap all child routes */}\n           {user && (\n             <Route path=\"/\" element={<DashboardLayout />}>\n               {adminRoutes.map((route) => {\n"
                },
                {
                    "date": 1744197300189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+import { lazy, Suspense, useEffect, useState } from \"react\";\n+import { BrowserRouter as Router, Route, Routes, Navigate } from \"react-router-dom\";\n+\n+import DashboardLayout from \"./layouts/Dashboard\";\n+import adminRoutes from \"./layouts/Dashboard/routes/adminroutes\";\n+import { ToasterComponent } from \"./components/Toaster\";\n+import Login from \"./layouts/Dashboard/Pages/Login\";\n+import { AuthContext } from \"./Context/AuthContext\";\n+import { Box, CircularProgress } from \"@mui/material\";\n+const UserForm = lazy(() => import(\"../src/layouts/Dashboard/Pages/UserForm\"))\n+\n+function App() {\n+  const [user, setUser] = useState(null);\n+  const [loading, setLoading] = useState(true); // New loading state\n+\n+  // Load user from localStorage when the app starts\n+  useEffect(() => {\n+    const storedUser = localStorage.getItem(\"user\");\n+    if (storedUser) {\n+      setUser(JSON.parse(storedUser));\n+    }\n+    setLoading(false); // Set loading to false after checking localStorage\n+  }, []);\n+\n+  // Login function\n+  const login = (userData) => {\n+    localStorage.setItem(\"user\", JSON.stringify(userData));\n+    setUser(userData);\n+  };\n+\n+  // Logout function\n+  const logout = () => {\n+    localStorage.removeItem(\"user\");\n+    setUser(null);\n+  };\n+\n+  if (loading) {\n+    return <div>Loading...</div>; // Prevents redirects until state is initialized\n+  }\n+\n+  return (\n+    <Router>\n+      <AuthContext.Provider value={{ user, setUser, login, logout }}>\n+        <ToasterComponent />\n+        <Routes>\n+          \n+          {/* Prevents unwanted redirect before user state is restored */}\n+          <Route path=\"/\" element={user ? <Navigate to=\"/dashboard\" replace /> : <Login />} />\n+          <Route path='/patient/form/:id' element={<UserForm/>}/>\n+          <Route path='/patient/doc/:id' element={<UserForm/>}/>\n+          {/* DashboardLayout should wrap all child routes */}\n+          {user && (\n+            <Route path=\"/\" element={<DashboardLayout />}>\n+              {adminRoutes.map((route) => {\n+                const PageComponent = route.component;\n+                return (\n+                  <Route\n+                    key={route.path}\n+                    path={route.path}\n+                    element={\n+                      <Suspense   fallback={\n+                        <Box\n+                          sx={{\n+                            display: \"flex\",\n+                            justifyContent: \"center\",\n+                            alignItems: \"center\",\n+                            height: \"100vh\", // Adjust as needed\n+                          }}\n+                        >\n+                          <CircularProgress sx={{color:'#0052a8'}} size={80} />\n+                        </Box>\n+                      }>\n+                        <PageComponent />\n+                      </Suspense>\n+                    }\n+                  />\n+                );\n+              })}\n+            </Route>\n+          )}\n+\n+          {/* Redirect unknown routes */}\n+          <Route path=\"*\" element={<Navigate to={user ? \"/dashboard\" : \"/\"} replace />} />\n+        </Routes>\n+      </AuthContext.Provider>\n+    </Router>\n+  );\n+}\n+\n+export default App;\n"
                },
                {
                    "date": 1744197321288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { ToasterComponent } from \"./components/Toaster\";\n import Login from \"./layouts/Dashboard/Pages/Login\";\n import { AuthContext } from \"./Context/AuthContext\";\n import { Box, CircularProgress } from \"@mui/material\";\n-import UserDoc from \"./layouts/Dashboard/Pages/UserDoc\";\n+const UserDoc = lazy(() => import(\"../src/layouts/Dashboard/Pages/UserDoc\"))\n const UserForm = lazy(() => import(\"../src/layouts/Dashboard/Pages/UserForm\"))\n \n function App() {\n   const [user, setUser] = useState(null);\n"
                },
                {
                    "date": 1744198397371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n     setUser(null);\n   };\n \n   if (loading) {\n-    return <Box sx={{margin:'0 auto'}}><CircularProgress sx={{color:'#0052a8'}} size={80} /></Box>; // Prevents redirects until state is initialized\n+    return <Box sx={{display:'flex'}}><CircularProgress sx={{color:'#0052a8'}} size={80} /></Box>; // Prevents redirects until state is initialized\n   }\n \n   return (\n     <Router>\n"
                }
            ],
            "date": 1743295957343,
            "name": "Commit-0",
            "content": "import { Suspense, useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Routes, Navigate } from \"react-router-dom\";\n\nimport DashboardLayout from \"./layouts/Dashboard\";\nimport adminRoutes from \"./layouts/Dashboard/routes/adminroutes\";\nimport { ToasterComponent } from \"./components/Toaster\";\nimport Login from \"./layouts/Dashboard/Pages/Login\";\nimport { AuthContext } from \"./Context/AuthContext\";\nimport { Box, CircularProgress } from \"@mui/material\";\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true); // New loading state\n\n  // Load user from localStorage when the app starts\n  useEffect(() => {\n    const storedUser = localStorage.getItem(\"user\");\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n    setLoading(false); // Set loading to false after checking localStorage\n  }, []);\n\n  // Login function\n  const login = (userData) => {\n    localStorage.setItem(\"user\", JSON.stringify(userData));\n    setUser(userData);\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem(\"user\");\n    setUser(null);\n  };\n\n  if (loading) {\n    return <div>Loading...</div>; // Prevents redirects until state is initialized\n  }\n\n  return (\n    <Router>\n      <AuthContext.Provider value={{ user, setUser, login, logout }}>\n        <ToasterComponent />\n        <Routes>\n          \n          {/* Prevents unwanted redirect before user state is restored */}\n          <Route path=\"/\" element={user ? <Navigate to=\"/dashboard\" replace /> : <Login />} />\n          <Route path=\"/\" element={<DashboardLayout />}></Route>\n          {/* DashboardLayout should wrap all child routes */}\n          {user && (\n            <Route path=\"/\" element={<DashboardLayout />}>\n              {adminRoutes.map((route) => {\n                const PageComponent = route.component;\n                return (\n                  <Route\n                    key={route.path}\n                    path={route.path}\n                    element={\n                      <Suspense   fallback={\n                        <Box\n                          sx={{\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            height: \"100vh\", // Adjust as needed\n                          }}\n                        >\n                          <CircularProgress sx={{color:'#0052a8'}} size={80} />\n                        </Box>\n                      }>\n                        <PageComponent />\n                      </Suspense>\n                    }\n                  />\n                );\n              })}\n            </Route>\n          )}\n\n          {/* Redirect unknown routes */}\n          <Route path=\"*\" element={<Navigate to={user ? \"/dashboard\" : \"/\"} replace />} />\n        </Routes>\n      </AuthContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n"
        }
    ]
}