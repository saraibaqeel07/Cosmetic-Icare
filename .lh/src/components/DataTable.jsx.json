{
    "sourceFile": "src/components/DataTable.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 51,
            "patches": [
                {
                    "date": 1743759186148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743759312635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,100 +1,218 @@\n \"use client\"\r\n-import { MaterialReactTable, useMaterialReactTable } from \"material-react-table\"\r\n-import { Box, IconButton, Tooltip } from \"@mui/material\"\r\n-import { mkConfig, generateCsv, download } from \"@tanstack/csv-utils\"\r\n-import { Button, TableCell } from \"@mui/material\"\r\n \r\n-const DataTable = ({ columns, data, enableGrouping }) => {\r\n-  const csvOptions = mkConfig({\r\n-    columnHeaders: columns.map((c) => c.header),\r\n-    data: data,\r\n+import React, { useState, useEffect } from \"react\"\r\n+import {\r\n+  useReactTable,\r\n+  getCoreRowModel,\r\n+  getFilteredRowModel,\r\n+  getPaginationRowModel,\r\n+  getSortedRowModel,\r\n+  flexRender,\r\n+} from \"@tanstack/react-table\"\r\n+\r\n+import {\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableContainer,\r\n+  TableHead,\r\n+  TableRow,\r\n+  Paper,\r\n+  TextField,\r\n+  TablePagination,\r\n+  TableSortLabel,\r\n+  Checkbox,\r\n+  Box,\r\n+} from \"@mui/material\"\r\n+\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange }) => {\r\n+ \r\n+\r\n+  const [globalFilter, setGlobalFilter] = useState(\"\")\r\n+  const [sorting, setSorting] = useState([])\r\n+  const [pagination, setPagination] = useState({\r\n+    pageIndex: 0,\r\n+    pageSize: 10,\r\n   })\r\n+  const [rowSelection, setRowSelection] = useState({})\r\n \r\n-  const handleExportData = () => {\r\n-    generateCsv(csvOptions).then((csv) => download(csv, { filename: \"data-table.csv\" }))\r\n-  }\r\n+  // Notify parent component when selection changes\r\n+  useEffect(() => {\r\n+    if (enableCheckbox && onSelectionChange) {\r\n+      const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n+      onSelectionChange(selectedRows)\r\n+    }\r\n+  }, [rowSelection, data, enableCheckbox])\r\n \r\n-  const table = useMaterialReactTable({\r\n-    columns,\r\n+  // Create checkbox column\r\n+  const checkboxColumn = React.useMemo(\r\n+    () => ({\r\n+      id: \"select\",\r\n+      header: ({ table }) => (\r\n+        <Checkbox\r\n+          checked={table.getIsAllRowsSelected()}\r\n+          indeterminate={table.getIsSomeRowsSelected()}\r\n+          onChange={table.getToggleAllRowsSelectedHandler()}\r\n+        />\r\n+      ),\r\n+      cell: ({ row }) => (\r\n+        <Checkbox\r\n+          checked={row.getIsSelected()}\r\n+          onChange={row.getToggleSelectedHandler()}\r\n+          onClick={(e) => e.stopPropagation()}\r\n+        />\r\n+      ),\r\n+      size: 40,\r\n+    }),\r\n+    [],\r\n+  )\r\n+\r\n+  // Add checkbox column if enabled\r\n+  const tableColumns = React.useMemo(() => {\r\n+    return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n+  }, [columns, enableCheckbox, checkboxColumn])\r\n+\r\n+  const table = useReactTable({\r\n     data,\r\n-    enableRowSelection: true,\r\n-    columnFilterDisplayMode: \"popover\",\r\n-    paginationDisplayMode: \"pages\",\r\n-    enableGrouping: enableGrouping,\r\n-    muiTableProps: {\r\n-      sx: {\r\n-        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n-      },\r\n+    columns: tableColumns,\r\n+    state: {\r\n+      globalFilter,\r\n+      sorting,\r\n+      pagination,\r\n+      rowSelection,\r\n     },\r\n-    muiTableHeadCellProps: {\r\n-      sx: {\r\n-        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n-      },\r\n-    },\r\n-    muiTableBodyCellProps: {\r\n-      sx: {\r\n-        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n-      },\r\n-    },\r\n-    renderTopToolbar: ({ table }) => (\r\n-      <Box\r\n-        sx={{\r\n-          display: \"flex\",\r\n-          gap: \"16px\",\r\n-          justifyContent: \"flex-end\",\r\n-          padding: \"8px\",\r\n-        }}\r\n-      >\r\n-        <Button color=\"primary\" onClick={handleExportData} variant=\"contained\">\r\n-          Export Data\r\n-        </Button>\r\n-      </Box>\r\n-    ),\r\n-    renderRowActions: ({ row, table }) => (\r\n-      <Box sx={{ display: \"flex\", gap: \"1rem\" }}>\r\n-        <Tooltip title=\"Edit\">\r\n-          <IconButton onClick={() => alert(\"Edit this row\")}>{/* <EditIcon /> */}</IconButton>\r\n-        </Tooltip>\r\n-        <Tooltip title=\"Delete\">\r\n-          <IconButton color=\"error\" onClick={() => alert(\"Delete this row\")}>\r\n-            {/* <DeleteIcon /> */}\r\n-          </IconButton>\r\n-        </Tooltip>\r\n-      </Box>\r\n-    ),\r\n-    renderTableHead: ({ table }) => {\r\n-      return (\r\n-        <thead>\r\n-          {table.getHeaderGroups().map((headerGroup) => (\r\n-            <tr key={headerGroup.id}>\r\n-              {headerGroup.headers.map((header) => (\r\n-                <TableCell\r\n-                  key={header.id}\r\n-                  align=\"left\"\r\n-                  sortDirection={header.column.getIsSorted()}\r\n-                  sx={{\r\n-                    minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                    whiteSpace: \"nowrap\",\r\n-                    ...(headerGroup.headers[0].id === header.id && {\r\n-                      borderTopLeftRadius: \"8px\",\r\n-                    }),\r\n-                    ...(headerGroup.headers[headerGroup.headers.length - 1].id === header.id && {\r\n-                      borderTopRightRadius: \"8px\",\r\n-                    }),\r\n-                  }}\r\n-                >\r\n-                  {header.isPlaceholder ? null : header.column.columnDef.header}\r\n-                </TableCell>\r\n-              ))}\r\n-            </tr>\r\n-          ))}\r\n-        </thead>\r\n-      )\r\n-    },\r\n+    enableRowSelection: enableCheckbox,\r\n+    onRowSelectionChange: setRowSelection,\r\n+    onGlobalFilterChange: setGlobalFilter,\r\n+    onSortingChange: setSorting,\r\n+    onPaginationChange: setPagination,\r\n+    getCoreRowModel: getCoreRowModel(),\r\n+    getFilteredRowModel: getFilteredRowModel(),\r\n+    getPaginationRowModel: getPaginationRowModel(),\r\n+    getSortedRowModel: getSortedRowModel(),\r\n   })\r\n \r\n-  return <MaterialReactTable table={table} />\r\n+  return (\r\n+    <div >\r\n+      <Paper sx={{ boxShadow: \"none\",backgroundColor:'transparent'}}>\r\n+        <TextField\r\n+          value={globalFilter ?? \"\"}\r\n+          size=\"small\"\r\n+          onChange={(e) => setGlobalFilter(e.target.value)}\r\n+          placeholder=\"Search all columns...\"\r\n+          variant=\"outlined\"\r\n+          sx={{\r\n+            borderRadius: \"12px\",\r\n+            mb:4,\r\n+            \".MuiOutlinedInput-root\": {\r\n+              border: \"2px solid #e0e0e0\",\r\n+              borderRadius: \"12px\",\r\n+              outline: \"none\",\r\n+              transition: \"all 0.2s ease-in-out\",\r\n+              \"& fieldset\": { border: \"none\" },\r\n+              \"&:hover\": {\r\n+                border: \"2px solid #0076bf\",\r\n+              },\r\n+              \"&.Mui-focused\": {\r\n+                border: \"2px solid #0076bf\",\r\n+                \"& fieldset\": { border: \"none\" },\r\n+                svg: {\r\n+                  path: {\r\n+                    fill: \"#0076bf\",\r\n+                  },\r\n+                },\r\n+              },\r\n+            },\r\n+           \r\n+          }}\r\n+        />\r\n+        <TableContainer sx={{ maxHeight: 440, height: \"auto\", overflowX: \"auto\" }}>\r\n+          <Table stickyHeader aria-label=\"sticky table\">\r\n+          <TableHead>\r\n+  {table.getHeaderGroups().map((headerGroup) => (\r\n+    <TableRow key={headerGroup.id}>\r\n+      {headerGroup.headers.map((header, index) => (\r\n+        <TableCell\r\n+          key={header.id}\r\n+          align=\"left\"\r\n+          sortDirection={header.column.getIsSorted()}\r\n+          sx={{\r\n+            minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+            whiteSpace: \"nowrap\",\r\n+            borderTopLeftRadius: index === 0 ? \"8px\" : 0, // First cell\r\n+            borderTopRightRadius: index === headerGroup.headers.length - 1 ? \"8px\" : 0, // Last cell\r\n+            overflow: \"hidden\", // Ensures border-radius applies correctly\r\n+          }}\r\n+        >\r\n+          {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n+            flexRender(header.column.columnDef.header, header.getContext())\r\n+          ) : (\r\n+            <TableSortLabel\r\n+              active={header.column.getIsSorted() !== false}\r\n+              direction={header.column.getIsSorted() || undefined}\r\n+              onClick={header.column.getToggleSortingHandler()}\r\n+            >\r\n+              {flexRender(header.column.columnDef.header, header.getContext())}\r\n+            </TableSortLabel>\r\n+          )}\r\n+        </TableCell>\r\n+      ))}\r\n+    </TableRow>\r\n+  ))}\r\n+</TableHead>\r\n+\r\n+            <TableBody>\r\n+  {table.getRowModel().rows.length > 0 ? (\r\n+    table.getRowModel().rows.map((row) => (\r\n+      <TableRow\r\n+        key={row.id}\r\n+        hover={enableCheckbox}\r\n+        onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n+        selected={row.getIsSelected()}\r\n+      >\r\n+        {row.getVisibleCells().map((cell) => (\r\n+          <TableCell\r\n+            key={cell.id}\r\n+            sx={{\r\n+              minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+              whiteSpace: \"normal\",\r\n+              wordBreak: \"break-word\",\r\n+            }}\r\n+          >\r\n+            {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+          </TableCell>\r\n+        ))}\r\n+      </TableRow>\r\n+    ))\r\n+  ) : (\r\n+    <TableRow>\r\n+      <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\",fontSize:'23px' }}>\r\n+        No Data Found\r\n+      </TableCell>\r\n+    </TableRow>\r\n+  )}\r\n+</TableBody>\r\n+\r\n+          </Table>\r\n+        </TableContainer>\r\n+        {table.getRowModel().rows.length > 0 && <TablePagination\r\n+          rowsPerPageOptions={[10, 25, 50]}\r\n+          component=\"div\"\r\n+          count={table.getFilteredRowModel().rows.length}\r\n+          rowsPerPage={table.getState().pagination.pageSize}\r\n+          page={table.getState().pagination.pageIndex}\r\n+          onPageChange={(_, newPage) => {\r\n+            table.setPageIndex(newPage)\r\n+          }}\r\n+          onRowsPerPageChange={(e) => {\r\n+            const size = e.target.value ? Number(e.target.value) : 10\r\n+            table.setPageSize(size)\r\n+          }}\r\n+        />}\r\n+      </Paper>\r\n+    </div>\r\n+  )\r\n }\r\n \r\n export default DataTable\r\n \r\n"
                },
                {
                    "date": 1744116670187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,9 @@\n  \r\n \r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n+  const [loader, setLoader] = useState(false)\r\n   const [pagination, setPagination] = useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n   })\r\n"
                },
                {
                    "date": 1744116690949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,12 @@\n       const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n       onSelectionChange(selectedRows)\r\n     }\r\n   }, [rowSelection, data, enableCheckbox])\r\n+  useEffect(() => {\r\n+    \r\n+  }, [])\r\n+  \r\n \r\n   // Create checkbox column\r\n   const checkboxColumn = React.useMemo(\r\n     () => ({\r\n"
                },
                {
                    "date": 1744116755441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,10 +43,13 @@\n       const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n       onSelectionChange(selectedRows)\r\n     }\r\n   }, [rowSelection, data, enableCheckbox])\r\n+  \r\n   useEffect(() => {\r\n-    \r\n+    if(data?.length ? > 0){\r\n+      setLoader(true)\r\n+    }\r\n   }, [])\r\n   \r\n \r\n   // Create checkbox column\r\n"
                },
                {
                    "date": 1744116765984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,11 @@\n   useEffect(() => {\r\n     if(data?.length ? > 0){\r\n       setLoader(true)\r\n     }\r\n+    else{\r\n+      setLoader(false)\r\n+    }\r\n   }, [])\r\n   \r\n \r\n   // Create checkbox column\r\n"
                },
                {
                    "date": 1744116834894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n     }\r\n   }, [rowSelection, data, enableCheckbox])\r\n   \r\n   useEffect(() => {\r\n-    if(data?.length ? > 0){\r\n+    if(data?.length  > 0){\r\n       setLoader(true)\r\n     }\r\n     else{\r\n       setLoader(false)\r\n"
                },
                {
                    "date": 1744116861956,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,8 +46,9 @@\n   }, [rowSelection, data, enableCheckbox])\r\n   \r\n   useEffect(() => {\r\n     if(data?.length  > 0){\r\n+      \r\n       setLoader(true)\r\n     }\r\n     else{\r\n       setLoader(false)\r\n"
                },
                {
                    "date": 1744116877968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,15 +46,15 @@\n   }, [rowSelection, data, enableCheckbox])\r\n   \r\n   useEffect(() => {\r\n     if(data?.length  > 0){\r\n-      \r\n+      alert('asdasd')\r\n       setLoader(true)\r\n     }\r\n     else{\r\n       setLoader(false)\r\n     }\r\n-  }, [])\r\n+  }, [data])\r\n   \r\n \r\n   // Create checkbox column\r\n   const checkboxColumn = React.useMemo(\r\n"
                },
                {
                    "date": 1744116891704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n   }, [rowSelection, data, enableCheckbox])\r\n   \r\n   useEffect(() => {\r\n     if(data?.length  > 0){\r\n-      alert('asdasd')\r\n+      \r\n       setLoader(true)\r\n     }\r\n     else{\r\n       setLoader(false)\r\n"
                },
                {
                    "date": 1744116897782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n   \r\n   useEffect(() => {\r\n     if(data?.length  > 0){\r\n       \r\n-      setLoader(true)\r\n+      setLoader(false)\r\n     }\r\n     else{\r\n       setLoader(false)\r\n     }\r\n"
                },
                {
                    "date": 1744116946489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,17 +44,9 @@\n       onSelectionChange(selectedRows)\r\n     }\r\n   }, [rowSelection, data, enableCheckbox])\r\n   \r\n-  useEffect(() => {\r\n-    if(data?.length  > 0){\r\n-      \r\n-      setLoader(false)\r\n-    }\r\n-    else{\r\n-      setLoader(false)\r\n-    }\r\n-  }, [data])\r\n+\r\n   \r\n \r\n   // Create checkbox column\r\n   const checkboxColumn = React.useMemo(\r\n"
                },
                {
                    "date": 1744117037664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   Checkbox,\r\n   Box,\r\n } from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange }) => {\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange,loader }) => {\r\n  \r\n \r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n"
                },
                {
                    "date": 1744117043855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   Checkbox,\r\n   Box,\r\n } from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange,loader }) => {\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange }) => {\r\n  \r\n \r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n"
                },
                {
                    "date": 1744117052258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   Checkbox,\r\n   Box,\r\n } from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange }) => {\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange,loader }) => {\r\n  \r\n \r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n"
                },
                {
                    "date": 1744117076585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   Checkbox,\r\n   Box,\r\n } from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange,loader }) => {\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange,loader=false }) => {\r\n  \r\n \r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n"
                },
                {
                    "date": 1744117094972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n   Checkbox,\r\n   Box,\r\n } from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange,loader=false }) => {\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading = false }) => {\r\n  \r\n \r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n"
                },
                {
                    "date": 1744117192389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,11 +189,16 @@\n       </TableRow>\r\n     ))\r\n   ) : (\r\n     <TableRow>\r\n-      <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\",fontSize:'23px' }}>\r\n+      {!loader ?  <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\",fontSize:'23px' }}>\r\n         No Data Found\r\n-      </TableCell>\r\n+      </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\",fontSize:'23px' }}>\r\n+      <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n+  <CircularProgress size={30} />\r\n+</Box>\r\n+      </TableCell>}\r\n+    \r\n     </TableRow>\r\n   )}\r\n </TableBody>\r\n \r\n"
                },
                {
                    "date": 1744117331356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,13 +22,14 @@\n   TablePagination,\r\n   TableSortLabel,\r\n   Checkbox,\r\n   Box,\r\n+  CircularProgress,\r\n } from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading = false }) => {\r\n- \r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading  }) => {\r\n \r\n+\r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n   const [loader, setLoader] = useState(false)\r\n   const [pagination, setPagination] = useState({\r\n@@ -43,12 +44,12 @@\n       const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n       onSelectionChange(selectedRows)\r\n     }\r\n   }, [rowSelection, data, enableCheckbox])\r\n-  \r\n \r\n-  \r\n \r\n+\r\n+\r\n   // Create checkbox column\r\n   const checkboxColumn = React.useMemo(\r\n     () => ({\r\n       id: \"select\",\r\n@@ -97,18 +98,18 @@\n   })\r\n \r\n   return (\r\n     <div >\r\n-      <Paper sx={{ boxShadow: \"none\",backgroundColor:'transparent'}}>\r\n+      <Paper sx={{ boxShadow: \"none\", backgroundColor: 'transparent' }}>\r\n         <TextField\r\n           value={globalFilter ?? \"\"}\r\n           size=\"small\"\r\n           onChange={(e) => setGlobalFilter(e.target.value)}\r\n           placeholder=\"Search all columns...\"\r\n           variant=\"outlined\"\r\n           sx={{\r\n             borderRadius: \"12px\",\r\n-            mb:4,\r\n+            mb: 4,\r\n             \".MuiOutlinedInput-root\": {\r\n               border: \"2px solid #e0e0e0\",\r\n               borderRadius: \"12px\",\r\n               outline: \"none\",\r\n@@ -126,83 +127,83 @@\n                   },\r\n                 },\r\n               },\r\n             },\r\n-           \r\n+\r\n           }}\r\n         />\r\n         <TableContainer sx={{ maxHeight: 440, height: \"auto\", overflowX: \"auto\" }}>\r\n           <Table stickyHeader aria-label=\"sticky table\">\r\n-          <TableHead>\r\n-  {table.getHeaderGroups().map((headerGroup) => (\r\n-    <TableRow key={headerGroup.id}>\r\n-      {headerGroup.headers.map((header, index) => (\r\n-        <TableCell\r\n-          key={header.id}\r\n-          align=\"left\"\r\n-          sortDirection={header.column.getIsSorted()}\r\n-          sx={{\r\n-            minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-            whiteSpace: \"nowrap\",\r\n-            borderTopLeftRadius: index === 0 ? \"8px\" : 0, // First cell\r\n-            borderTopRightRadius: index === headerGroup.headers.length - 1 ? \"8px\" : 0, // Last cell\r\n-            overflow: \"hidden\", // Ensures border-radius applies correctly\r\n-          }}\r\n-        >\r\n-          {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n-            flexRender(header.column.columnDef.header, header.getContext())\r\n-          ) : (\r\n-            <TableSortLabel\r\n-              active={header.column.getIsSorted() !== false}\r\n-              direction={header.column.getIsSorted() || undefined}\r\n-              onClick={header.column.getToggleSortingHandler()}\r\n-            >\r\n-              {flexRender(header.column.columnDef.header, header.getContext())}\r\n-            </TableSortLabel>\r\n-          )}\r\n-        </TableCell>\r\n-      ))}\r\n-    </TableRow>\r\n-  ))}\r\n-</TableHead>\r\n+            <TableHead>\r\n+              {table.getHeaderGroups().map((headerGroup) => (\r\n+                <TableRow key={headerGroup.id}>\r\n+                  {headerGroup.headers.map((header, index) => (\r\n+                    <TableCell\r\n+                      key={header.id}\r\n+                      align=\"left\"\r\n+                      sortDirection={header.column.getIsSorted()}\r\n+                      sx={{\r\n+                        minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                        whiteSpace: \"nowrap\",\r\n+                        borderTopLeftRadius: index === 0 ? \"8px\" : 0, // First cell\r\n+                        borderTopRightRadius: index === headerGroup.headers.length - 1 ? \"8px\" : 0, // Last cell\r\n+                        overflow: \"hidden\", // Ensures border-radius applies correctly\r\n+                      }}\r\n+                    >\r\n+                      {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n+                        flexRender(header.column.columnDef.header, header.getContext())\r\n+                      ) : (\r\n+                        <TableSortLabel\r\n+                          active={header.column.getIsSorted() !== false}\r\n+                          direction={header.column.getIsSorted() || undefined}\r\n+                          onClick={header.column.getToggleSortingHandler()}\r\n+                        >\r\n+                          {flexRender(header.column.columnDef.header, header.getContext())}\r\n+                        </TableSortLabel>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  ))}\r\n+                </TableRow>\r\n+              ))}\r\n+            </TableHead>\r\n \r\n             <TableBody>\r\n-  {table.getRowModel().rows.length > 0 ? (\r\n-    table.getRowModel().rows.map((row) => (\r\n-      <TableRow\r\n-        key={row.id}\r\n-        hover={enableCheckbox}\r\n-        onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n-        selected={row.getIsSelected()}\r\n-      >\r\n-        {row.getVisibleCells().map((cell) => (\r\n-          <TableCell\r\n-            key={cell.id}\r\n-            sx={{\r\n-              minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-              whiteSpace: \"normal\",\r\n-              wordBreak: \"break-word\",\r\n-            }}\r\n-          >\r\n-            {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n-          </TableCell>\r\n-        ))}\r\n-      </TableRow>\r\n-    ))\r\n-  ) : (\r\n-    <TableRow>\r\n-      {!loader ?  <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\",fontSize:'23px' }}>\r\n-        No Data Found\r\n-      </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\",fontSize:'23px' }}>\r\n-      <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n-  <CircularProgress size={30} />\r\n-</Box>\r\n-      </TableCell>}\r\n-    \r\n-    </TableRow>\r\n-  )}\r\n-</TableBody>\r\n+              {table.getRowModel().rows.length > 0 ? (\r\n+                table.getRowModel().rows.map((row) => (\r\n+                  <TableRow\r\n+                    key={row.id}\r\n+                    hover={enableCheckbox}\r\n+                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n+                    selected={row.getIsSelected()}\r\n+                  >\r\n+                    {row.getVisibleCells().map((cell) => (\r\n+                      <TableCell\r\n+                        key={cell.id}\r\n+                        sx={{\r\n+                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                          whiteSpace: \"normal\",\r\n+                          wordBreak: \"break-word\",\r\n+                        }}\r\n+                      >\r\n+                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                      </TableCell>\r\n+                    ))}\r\n+                  </TableRow>\r\n+                ))\r\n+              ) : (\r\n+                <TableRow>\r\n+                  {!loader ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n+                    No Data Found\r\n+                  </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n+                    <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n+                      <CircularProgress size={30} />\r\n+                    </Box>\r\n+                  </TableCell>}\r\n \r\n+                </TableRow>\r\n+              )}\r\n+            </TableBody>\r\n+\r\n           </Table>\r\n         </TableContainer>\r\n         {table.getRowModel().rows.length > 0 && <TablePagination\r\n           rowsPerPageOptions={[10, 25, 50]}\r\n"
                },
                {
                    "date": 1744117353807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,9 @@\n                   </TableRow>\r\n                 ))\r\n               ) : (\r\n                 <TableRow>\r\n-                  {!loader ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n+                  {!loading ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n                     No Data Found\r\n                   </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n                     <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n                       <CircularProgress size={30} />\r\n"
                },
                {
                    "date": 1744117362293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n                   {!loading ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n                     No Data Found\r\n                   </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n                     <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n-                      <CircularProgress size={30} />\r\n+                      <CircularProgress size={50} />\r\n                     </Box>\r\n                   </TableCell>}\r\n \r\n                 </TableRow>\r\n"
                },
                {
                    "date": 1744117498534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n                   {!loading ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n                     No Data Found\r\n                   </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n                     <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n-                      <CircularProgress size={50} />\r\n+                      <CircularProgress sx={{color:'#0052a8'}} size={50} />\r\n                     </Box>\r\n                   </TableCell>}\r\n \r\n                 </TableRow>\r\n"
                },
                {
                    "date": 1744117574308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,9 +194,9 @@\n                   {!loading ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n                     No Data Found\r\n                   </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n                     <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n-                      <CircularProgress sx={{color:'#0052a8'}} size={50} />\r\n+                      <CircularProgress sx={{color:'#0b0962'}} size={50} />\r\n                     </Box>\r\n                   </TableCell>}\r\n \r\n                 </TableRow>\r\n"
                },
                {
                    "date": 1744131471379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,228 +1,119 @@\n-\"use client\"\r\n+import React, { useMemo, useState } from \"react\";\r\n+import { useReactTable, getCoreRowModel, flexRender } from \"@tanstack/react-table\";\r\n+import { Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from \"@mui/material\";\r\n \r\n-import React, { useState, useEffect } from \"react\"\r\n-import {\r\n-  useReactTable,\r\n-  getCoreRowModel,\r\n-  getFilteredRowModel,\r\n-  getPaginationRowModel,\r\n-  getSortedRowModel,\r\n-  flexRender,\r\n-} from \"@tanstack/react-table\"\r\n+const data = [\r\n+  { name: \"Alice\", age: 25 },\r\n+  { name: \"Andrew\", age: 30 },\r\n+  { name: \"Brian\", age: 22 },\r\n+  { name: \"Bella\", age: 28 },\r\n+  { name: \"Charlie\", age: 35 },\r\n+  { name: \"David\", age: 27 },\r\n+  { name: \"Eve\", age: 29 },\r\n+  { name: \"Zara\", age: 21 },\r\n+];\r\n \r\n-import {\r\n-  Table,\r\n-  TableBody,\r\n-  TableCell,\r\n-  TableContainer,\r\n-  TableHead,\r\n-  TableRow,\r\n-  Paper,\r\n-  TextField,\r\n-  TablePagination,\r\n-  TableSortLabel,\r\n-  Checkbox,\r\n-  Box,\r\n-  CircularProgress,\r\n-} from \"@mui/material\"\r\n+const columns = [\r\n+  {\r\n+    header: \"Name\",\r\n+    accessorKey: \"name\",\r\n+  },\r\n+  {\r\n+    header: \"Age\",\r\n+    accessorKey: \"age\",\r\n+  },\r\n+];\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading  }) => {\r\n+export default function CustomTable() {\r\n+  const [selectedAlphabet, setSelectedAlphabet] = useState(\"\");\r\n \r\n+  const filteredData = useMemo(() => {\r\n+    if (!selectedAlphabet) return data;\r\n+    return data.filter((item) =>\r\n+      item.name?.toLowerCase().startsWith(selectedAlphabet.toLowerCase())\r\n+    );\r\n+  }, [selectedAlphabet]);\r\n \r\n-  const [globalFilter, setGlobalFilter] = useState(\"\")\r\n-  const [sorting, setSorting] = useState([])\r\n-  const [loader, setLoader] = useState(false)\r\n-  const [pagination, setPagination] = useState({\r\n-    pageIndex: 0,\r\n-    pageSize: 10,\r\n-  })\r\n-  const [rowSelection, setRowSelection] = useState({})\r\n-\r\n-  // Notify parent component when selection changes\r\n-  useEffect(() => {\r\n-    if (enableCheckbox && onSelectionChange) {\r\n-      const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n-      onSelectionChange(selectedRows)\r\n-    }\r\n-  }, [rowSelection, data, enableCheckbox])\r\n-\r\n-\r\n-\r\n-\r\n-  // Create checkbox column\r\n-  const checkboxColumn = React.useMemo(\r\n-    () => ({\r\n-      id: \"select\",\r\n-      header: ({ table }) => (\r\n-        <Checkbox\r\n-          checked={table.getIsAllRowsSelected()}\r\n-          indeterminate={table.getIsSomeRowsSelected()}\r\n-          onChange={table.getToggleAllRowsSelectedHandler()}\r\n-        />\r\n-      ),\r\n-      cell: ({ row }) => (\r\n-        <Checkbox\r\n-          checked={row.getIsSelected()}\r\n-          onChange={row.getToggleSelectedHandler()}\r\n-          onClick={(e) => e.stopPropagation()}\r\n-        />\r\n-      ),\r\n-      size: 40,\r\n-    }),\r\n-    [],\r\n-  )\r\n-\r\n-  // Add checkbox column if enabled\r\n-  const tableColumns = React.useMemo(() => {\r\n-    return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n-  }, [columns, enableCheckbox, checkboxColumn])\r\n-\r\n   const table = useReactTable({\r\n-    data,\r\n-    columns: tableColumns,\r\n-    state: {\r\n-      globalFilter,\r\n-      sorting,\r\n-      pagination,\r\n-      rowSelection,\r\n-    },\r\n-    enableRowSelection: enableCheckbox,\r\n-    onRowSelectionChange: setRowSelection,\r\n-    onGlobalFilterChange: setGlobalFilter,\r\n-    onSortingChange: setSorting,\r\n-    onPaginationChange: setPagination,\r\n+    data: filteredData,\r\n+    columns,\r\n     getCoreRowModel: getCoreRowModel(),\r\n-    getFilteredRowModel: getFilteredRowModel(),\r\n-    getPaginationRowModel: getPaginationRowModel(),\r\n-    getSortedRowModel: getSortedRowModel(),\r\n-  })\r\n+  });\r\n \r\n   return (\r\n-    <div >\r\n-      <Paper sx={{ boxShadow: \"none\", backgroundColor: 'transparent' }}>\r\n-        <TextField\r\n-          value={globalFilter ?? \"\"}\r\n-          size=\"small\"\r\n-          onChange={(e) => setGlobalFilter(e.target.value)}\r\n-          placeholder=\"Search all columns...\"\r\n-          variant=\"outlined\"\r\n-          sx={{\r\n-            borderRadius: \"12px\",\r\n-            mb: 4,\r\n-            \".MuiOutlinedInput-root\": {\r\n-              border: \"2px solid #e0e0e0\",\r\n-              borderRadius: \"12px\",\r\n-              outline: \"none\",\r\n-              transition: \"all 0.2s ease-in-out\",\r\n-              \"& fieldset\": { border: \"none\" },\r\n+    <Box sx={{ p: 3 }}>\r\n+      {/* Alphabet Filter */}\r\n+      <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mb={2}>\r\n+        {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n+          <Box\r\n+            key={letter}\r\n+            onClick={() => setSelectedAlphabet(letter)}\r\n+            sx={{\r\n+              cursor: \"pointer\",\r\n+              fontWeight: selectedAlphabet === letter ? \"bold\" : \"normal\",\r\n+              color: selectedAlphabet === letter ? \"#0076bf\" : \"#000\",\r\n+              border: \"1px solid #ccc\",\r\n+              borderRadius: \"5px\",\r\n+              px: 1,\r\n+              py: 0.5,\r\n+              userSelect: \"none\",\r\n+              transition: \"0.2s\",\r\n               \"&:hover\": {\r\n-                border: \"2px solid #0076bf\",\r\n+                backgroundColor: \"#f0f0f0\",\r\n               },\r\n-              \"&.Mui-focused\": {\r\n-                border: \"2px solid #0076bf\",\r\n-                \"& fieldset\": { border: \"none\" },\r\n-                svg: {\r\n-                  path: {\r\n-                    fill: \"#0076bf\",\r\n-                  },\r\n-                },\r\n-              },\r\n+            }}\r\n+          >\r\n+            {letter}\r\n+          </Box>\r\n+        ))}\r\n+        <Box\r\n+          onClick={() => setSelectedAlphabet(\"\")}\r\n+          sx={{\r\n+            cursor: \"pointer\",\r\n+            fontWeight: !selectedAlphabet ? \"bold\" : \"normal\",\r\n+            color: !selectedAlphabet ? \"#0076bf\" : \"#000\",\r\n+            border: \"1px solid #ccc\",\r\n+            borderRadius: \"5px\",\r\n+            px: 1,\r\n+            py: 0.5,\r\n+            userSelect: \"none\",\r\n+            transition: \"0.2s\",\r\n+            \"&:hover\": {\r\n+              backgroundColor: \"#f0f0f0\",\r\n             },\r\n-\r\n           }}\r\n-        />\r\n-        <TableContainer sx={{ maxHeight: 440, height: \"auto\", overflowX: \"auto\" }}>\r\n-          <Table stickyHeader aria-label=\"sticky table\">\r\n-            <TableHead>\r\n-              {table.getHeaderGroups().map((headerGroup) => (\r\n-                <TableRow key={headerGroup.id}>\r\n-                  {headerGroup.headers.map((header, index) => (\r\n-                    <TableCell\r\n-                      key={header.id}\r\n-                      align=\"left\"\r\n-                      sortDirection={header.column.getIsSorted()}\r\n-                      sx={{\r\n-                        minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                        whiteSpace: \"nowrap\",\r\n-                        borderTopLeftRadius: index === 0 ? \"8px\" : 0, // First cell\r\n-                        borderTopRightRadius: index === headerGroup.headers.length - 1 ? \"8px\" : 0, // Last cell\r\n-                        overflow: \"hidden\", // Ensures border-radius applies correctly\r\n-                      }}\r\n-                    >\r\n-                      {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n-                        flexRender(header.column.columnDef.header, header.getContext())\r\n-                      ) : (\r\n-                        <TableSortLabel\r\n-                          active={header.column.getIsSorted() !== false}\r\n-                          direction={header.column.getIsSorted() || undefined}\r\n-                          onClick={header.column.getToggleSortingHandler()}\r\n-                        >\r\n-                          {flexRender(header.column.columnDef.header, header.getContext())}\r\n-                        </TableSortLabel>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  ))}\r\n-                </TableRow>\r\n-              ))}\r\n-            </TableHead>\r\n+        >\r\n+          View All\r\n+        </Box>\r\n+      </Box>\r\n \r\n-            <TableBody>\r\n-              {table.getRowModel().rows.length > 0 ? (\r\n-                table.getRowModel().rows.map((row) => (\r\n-                  <TableRow\r\n-                    key={row.id}\r\n-                    hover={enableCheckbox}\r\n-                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n-                    selected={row.getIsSelected()}\r\n-                  >\r\n-                    {row.getVisibleCells().map((cell) => (\r\n-                      <TableCell\r\n-                        key={cell.id}\r\n-                        sx={{\r\n-                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                          whiteSpace: \"normal\",\r\n-                          wordBreak: \"break-word\",\r\n-                        }}\r\n-                      >\r\n-                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n-                      </TableCell>\r\n-                    ))}\r\n-                  </TableRow>\r\n-                ))\r\n-              ) : (\r\n-                <TableRow>\r\n-                  {!loading ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n-                    No Data Found\r\n-                  </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n-                    <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n-                      <CircularProgress sx={{color:'#0b0962'}} size={50} />\r\n-                    </Box>\r\n-                  </TableCell>}\r\n-\r\n-                </TableRow>\r\n-              )}\r\n-            </TableBody>\r\n-\r\n-          </Table>\r\n-        </TableContainer>\r\n-        {table.getRowModel().rows.length > 0 && <TablePagination\r\n-          rowsPerPageOptions={[10, 25, 50]}\r\n-          component=\"div\"\r\n-          count={table.getFilteredRowModel().rows.length}\r\n-          rowsPerPage={table.getState().pagination.pageSize}\r\n-          page={table.getState().pagination.pageIndex}\r\n-          onPageChange={(_, newPage) => {\r\n-            table.setPageIndex(newPage)\r\n-          }}\r\n-          onRowsPerPageChange={(e) => {\r\n-            const size = e.target.value ? Number(e.target.value) : 10\r\n-            table.setPageSize(size)\r\n-          }}\r\n-        />}\r\n-      </Paper>\r\n-    </div>\r\n-  )\r\n+      {/* Table */}\r\n+      <TableContainer component={Paper}>\r\n+        <Table>\r\n+          <TableHead>\r\n+            {table.getHeaderGroups().map((headerGroup) => (\r\n+              <TableRow key={headerGroup.id}>\r\n+                {headerGroup.headers.map((header) => (\r\n+                  <TableCell key={header.id}>\r\n+                    {flexRender(header.column.columnDef.header, header.getContext())}\r\n+                  </TableCell>\r\n+                ))}\r\n+              </TableRow>\r\n+            ))}\r\n+          </TableHead>\r\n+          <TableBody>\r\n+            {table.getRowModel().rows.map((row) => (\r\n+              <TableRow key={row.id}>\r\n+                {row.getVisibleCells().map((cell) => (\r\n+                  <TableCell key={cell.id}>\r\n+                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                  </TableCell>\r\n+                ))}\r\n+              </TableRow>\r\n+            ))}\r\n+          </TableBody>\r\n+        </Table>\r\n+      </TableContainer>\r\n+    </Box>\r\n+  );\r\n }\r\n-\r\n-export default DataTable\r\n-\r\n"
                },
                {
                    "date": 1744131478967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,119 +1,228 @@\n-import React, { useMemo, useState } from \"react\";\r\n-import { useReactTable, getCoreRowModel, flexRender } from \"@tanstack/react-table\";\r\n-import { Box, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from \"@mui/material\";\r\n+\"use client\"\r\n \r\n-const data = [\r\n-  { name: \"Alice\", age: 25 },\r\n-  { name: \"Andrew\", age: 30 },\r\n-  { name: \"Brian\", age: 22 },\r\n-  { name: \"Bella\", age: 28 },\r\n-  { name: \"Charlie\", age: 35 },\r\n-  { name: \"David\", age: 27 },\r\n-  { name: \"Eve\", age: 29 },\r\n-  { name: \"Zara\", age: 21 },\r\n-];\r\n+import React, { useState, useEffect } from \"react\"\r\n+import {\r\n+  useReactTable,\r\n+  getCoreRowModel,\r\n+  getFilteredRowModel,\r\n+  getPaginationRowModel,\r\n+  getSortedRowModel,\r\n+  flexRender,\r\n+} from \"@tanstack/react-table\"\r\n \r\n-const columns = [\r\n-  {\r\n-    header: \"Name\",\r\n-    accessorKey: \"name\",\r\n-  },\r\n-  {\r\n-    header: \"Age\",\r\n-    accessorKey: \"age\",\r\n-  },\r\n-];\r\n+import {\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableContainer,\r\n+  TableHead,\r\n+  TableRow,\r\n+  Paper,\r\n+  TextField,\r\n+  TablePagination,\r\n+  TableSortLabel,\r\n+  Checkbox,\r\n+  Box,\r\n+  CircularProgress,\r\n+} from \"@mui/material\"\r\n \r\n-export default function CustomTable() {\r\n-  const [selectedAlphabet, setSelectedAlphabet] = useState(\"\");\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading  }) => {\r\n \r\n-  const filteredData = useMemo(() => {\r\n-    if (!selectedAlphabet) return data;\r\n-    return data.filter((item) =>\r\n-      item.name?.toLowerCase().startsWith(selectedAlphabet.toLowerCase())\r\n-    );\r\n-  }, [selectedAlphabet]);\r\n \r\n+  const [globalFilter, setGlobalFilter] = useState(\"\")\r\n+  const [sorting, setSorting] = useState([])\r\n+  const [loader, setLoader] = useState(false)\r\n+  const [pagination, setPagination] = useState({\r\n+    pageIndex: 0,\r\n+    pageSize: 10,\r\n+  })\r\n+  const [rowSelection, setRowSelection] = useState({})\r\n+\r\n+  // Notify parent component when selection changes\r\n+  useEffect(() => {\r\n+    if (enableCheckbox && onSelectionChange) {\r\n+      const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n+      onSelectionChange(selectedRows)\r\n+    }\r\n+  }, [rowSelection, data, enableCheckbox])\r\n+\r\n+\r\n+\r\n+\r\n+  // Create checkbox column\r\n+  const checkboxColumn = React.useMemo(\r\n+    () => ({\r\n+      id: \"select\",\r\n+      header: ({ table }) => (\r\n+        <Checkbox\r\n+          checked={table.getIsAllRowsSelected()}\r\n+          indeterminate={table.getIsSomeRowsSelected()}\r\n+          onChange={table.getToggleAllRowsSelectedHandler()}\r\n+        />\r\n+      ),\r\n+      cell: ({ row }) => (\r\n+        <Checkbox\r\n+          checked={row.getIsSelected()}\r\n+          onChange={row.getToggleSelectedHandler()}\r\n+          onClick={(e) => e.stopPropagation()}\r\n+        />\r\n+      ),\r\n+      size: 40,\r\n+    }),\r\n+    [],\r\n+  )\r\n+\r\n+  // Add checkbox column if enabled\r\n+  const tableColumns = React.useMemo(() => {\r\n+    return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n+  }, [columns, enableCheckbox, checkboxColumn])\r\n+\r\n   const table = useReactTable({\r\n-    data: filteredData,\r\n-    columns,\r\n+    data,\r\n+    columns: tableColumns,\r\n+    state: {\r\n+      globalFilter,\r\n+      sorting,\r\n+      pagination,\r\n+      rowSelection,\r\n+    },\r\n+    enableRowSelection: enableCheckbox,\r\n+    onRowSelectionChange: setRowSelection,\r\n+    onGlobalFilterChange: setGlobalFilter,\r\n+    onSortingChange: setSorting,\r\n+    onPaginationChange: setPagination,\r\n     getCoreRowModel: getCoreRowModel(),\r\n-  });\r\n+    getFilteredRowModel: getFilteredRowModel(),\r\n+    getPaginationRowModel: getPaginationRowModel(),\r\n+    getSortedRowModel: getSortedRowModel(),\r\n+  })\r\n \r\n   return (\r\n-    <Box sx={{ p: 3 }}>\r\n-      {/* Alphabet Filter */}\r\n-      <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mb={2}>\r\n-        {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n-          <Box\r\n-            key={letter}\r\n-            onClick={() => setSelectedAlphabet(letter)}\r\n-            sx={{\r\n-              cursor: \"pointer\",\r\n-              fontWeight: selectedAlphabet === letter ? \"bold\" : \"normal\",\r\n-              color: selectedAlphabet === letter ? \"#0076bf\" : \"#000\",\r\n-              border: \"1px solid #ccc\",\r\n-              borderRadius: \"5px\",\r\n-              px: 1,\r\n-              py: 0.5,\r\n-              userSelect: \"none\",\r\n-              transition: \"0.2s\",\r\n+    <div >\r\n+      <Paper sx={{ boxShadow: \"none\", backgroundColor: 'transparent' }}>\r\n+        <TextField\r\n+          value={globalFilter ?? \"\"}\r\n+          size=\"small\"\r\n+          onChange={(e) => setGlobalFilter(e.target.value)}\r\n+          placeholder=\"Search all columns...\"\r\n+          variant=\"outlined\"\r\n+          sx={{\r\n+            borderRadius: \"12px\",\r\n+            mb: 4,\r\n+            \".MuiOutlinedInput-root\": {\r\n+              border: \"2px solid #e0e0e0\",\r\n+              borderRadius: \"12px\",\r\n+              outline: \"none\",\r\n+              transition: \"all 0.2s ease-in-out\",\r\n+              \"& fieldset\": { border: \"none\" },\r\n               \"&:hover\": {\r\n-                backgroundColor: \"#f0f0f0\",\r\n+                border: \"2px solid #0076bf\",\r\n               },\r\n-            }}\r\n-          >\r\n-            {letter}\r\n-          </Box>\r\n-        ))}\r\n-        <Box\r\n-          onClick={() => setSelectedAlphabet(\"\")}\r\n-          sx={{\r\n-            cursor: \"pointer\",\r\n-            fontWeight: !selectedAlphabet ? \"bold\" : \"normal\",\r\n-            color: !selectedAlphabet ? \"#0076bf\" : \"#000\",\r\n-            border: \"1px solid #ccc\",\r\n-            borderRadius: \"5px\",\r\n-            px: 1,\r\n-            py: 0.5,\r\n-            userSelect: \"none\",\r\n-            transition: \"0.2s\",\r\n-            \"&:hover\": {\r\n-              backgroundColor: \"#f0f0f0\",\r\n+              \"&.Mui-focused\": {\r\n+                border: \"2px solid #0076bf\",\r\n+                \"& fieldset\": { border: \"none\" },\r\n+                svg: {\r\n+                  path: {\r\n+                    fill: \"#0076bf\",\r\n+                  },\r\n+                },\r\n+              },\r\n             },\r\n+\r\n           }}\r\n-        >\r\n-          View All\r\n-        </Box>\r\n-      </Box>\r\n+        />\r\n+        <TableContainer sx={{ maxHeight: 440, height: \"auto\", overflowX: \"auto\" }}>\r\n+          <Table stickyHeader aria-label=\"sticky table\">\r\n+            <TableHead>\r\n+              {table.getHeaderGroups().map((headerGroup) => (\r\n+                <TableRow key={headerGroup.id}>\r\n+                  {headerGroup.headers.map((header, index) => (\r\n+                    <TableCell\r\n+                      key={header.id}\r\n+                      align=\"left\"\r\n+                      sortDirection={header.column.getIsSorted()}\r\n+                      sx={{\r\n+                        minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                        whiteSpace: \"nowrap\",\r\n+                        borderTopLeftRadius: index === 0 ? \"8px\" : 0, // First cell\r\n+                        borderTopRightRadius: index === headerGroup.headers.length - 1 ? \"8px\" : 0, // Last cell\r\n+                        overflow: \"hidden\", // Ensures border-radius applies correctly\r\n+                      }}\r\n+                    >\r\n+                      {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n+                        flexRender(header.column.columnDef.header, header.getContext())\r\n+                      ) : (\r\n+                        <TableSortLabel\r\n+                          active={header.column.getIsSorted() !== false}\r\n+                          direction={header.column.getIsSorted() || undefined}\r\n+                          onClick={header.column.getToggleSortingHandler()}\r\n+                        >\r\n+                          {flexRender(header.column.columnDef.header, header.getContext())}\r\n+                        </TableSortLabel>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  ))}\r\n+                </TableRow>\r\n+              ))}\r\n+            </TableHead>\r\n \r\n-      {/* Table */}\r\n-      <TableContainer component={Paper}>\r\n-        <Table>\r\n-          <TableHead>\r\n-            {table.getHeaderGroups().map((headerGroup) => (\r\n-              <TableRow key={headerGroup.id}>\r\n-                {headerGroup.headers.map((header) => (\r\n-                  <TableCell key={header.id}>\r\n-                    {flexRender(header.column.columnDef.header, header.getContext())}\r\n-                  </TableCell>\r\n-                ))}\r\n-              </TableRow>\r\n-            ))}\r\n-          </TableHead>\r\n-          <TableBody>\r\n-            {table.getRowModel().rows.map((row) => (\r\n-              <TableRow key={row.id}>\r\n-                {row.getVisibleCells().map((cell) => (\r\n-                  <TableCell key={cell.id}>\r\n-                    {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n-                  </TableCell>\r\n-                ))}\r\n-              </TableRow>\r\n-            ))}\r\n-          </TableBody>\r\n-        </Table>\r\n-      </TableContainer>\r\n-    </Box>\r\n-  );\r\n+            <TableBody>\r\n+              {table.getRowModel().rows.length > 0 ? (\r\n+                table.getRowModel().rows.map((row) => (\r\n+                  <TableRow\r\n+                    key={row.id}\r\n+                    hover={enableCheckbox}\r\n+                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n+                    selected={row.getIsSelected()}\r\n+                  >\r\n+                    {row.getVisibleCells().map((cell) => (\r\n+                      <TableCell\r\n+                        key={cell.id}\r\n+                        sx={{\r\n+                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                          whiteSpace: \"normal\",\r\n+                          wordBreak: \"break-word\",\r\n+                        }}\r\n+                      >\r\n+                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                      </TableCell>\r\n+                    ))}\r\n+                  </TableRow>\r\n+                ))\r\n+              ) : (\r\n+                <TableRow>\r\n+                  {!loading ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n+                    No Data Found\r\n+                  </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n+                    <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n+                      <CircularProgress sx={{color:'#0b0962'}} size={50} />\r\n+                    </Box>\r\n+                  </TableCell>}\r\n+\r\n+                </TableRow>\r\n+              )}\r\n+            </TableBody>\r\n+\r\n+          </Table>\r\n+        </TableContainer>\r\n+        {table.getRowModel().rows.length > 0 && <TablePagination\r\n+          rowsPerPageOptions={[10, 25, 50]}\r\n+          component=\"div\"\r\n+          count={table.getFilteredRowModel().rows.length}\r\n+          rowsPerPage={table.getState().pagination.pageSize}\r\n+          page={table.getState().pagination.pageIndex}\r\n+          onPageChange={(_, newPage) => {\r\n+            table.setPageIndex(newPage)\r\n+          }}\r\n+          onRowsPerPageChange={(e) => {\r\n+            const size = e.target.value ? Number(e.target.value) : 10\r\n+            table.setPageSize(size)\r\n+          }}\r\n+        />}\r\n+      </Paper>\r\n+    </div>\r\n+  )\r\n }\r\n+\r\n+export default DataTable\r\n+\r\n"
                },
                {
                    "date": 1744131697848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,33 +23,46 @@\n   TableSortLabel,\r\n   Checkbox,\r\n   Box,\r\n   CircularProgress,\r\n+  Button,\r\n+  ButtonGroup,\r\n+  Typography,\r\n } from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading  }) => {\r\n-\r\n-\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading }) => {\r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n   const [loader, setLoader] = useState(false)\r\n   const [pagination, setPagination] = useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n   })\r\n   const [rowSelection, setRowSelection] = useState({})\r\n+  const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n \r\n+  // Function to filter by first letter\r\n+  const filterByAlphabet = (letter) => {\r\n+    if (letter === activeAlphabet) {\r\n+      // If clicking the same letter again, clear the filter\r\n+      setActiveAlphabet(\"\")\r\n+      setGlobalFilter(\"\")\r\n+    } else {\r\n+      setActiveAlphabet(letter)\r\n+      // Assuming the first column after checkbox is the name column\r\n+      const nameColumnId = enableCheckbox ? columns[0].accessorKey : tableColumns[0].accessorKey\r\n+      setGlobalFilter(letter)\r\n+    }\r\n+  }\r\n+\r\n   // Notify parent component when selection changes\r\n   useEffect(() => {\r\n     if (enableCheckbox && onSelectionChange) {\r\n       const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n       onSelectionChange(selectedRows)\r\n     }\r\n   }, [rowSelection, data, enableCheckbox])\r\n \r\n-\r\n-\r\n-\r\n   // Create checkbox column\r\n   const checkboxColumn = React.useMemo(\r\n     () => ({\r\n       id: \"select\",\r\n@@ -97,10 +110,10 @@\n     getSortedRowModel: getSortedRowModel(),\r\n   })\r\n \r\n   return (\r\n-    <div >\r\n-      <Paper sx={{ boxShadow: \"none\", backgroundColor: 'transparent' }}>\r\n+    <div>\r\n+      <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n         <TextField\r\n           value={globalFilter ?? \"\"}\r\n           size=\"small\"\r\n           onChange={(e) => setGlobalFilter(e.target.value)}\r\n@@ -127,11 +140,42 @@\n                   },\r\n                 },\r\n               },\r\n             },\r\n-\r\n           }}\r\n         />\r\n+        <Box\r\n+          sx={{\r\n+            mb: 2,\r\n+            display: \"flex\",\r\n+            flexDirection: { xs: \"column\", sm: \"row\" },\r\n+            alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n+            gap: 1,\r\n+          }}\r\n+        >\r\n+          <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n+            View all:\r\n+          </Typography>\r\n+          <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n+            {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n+              <Button\r\n+                key={letter}\r\n+                onClick={() => filterByAlphabet(letter)}\r\n+                sx={{\r\n+                  minWidth: \"30px\",\r\n+                  px: 1,\r\n+                  backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"transparent\",\r\n+                  color: activeAlphabet === letter ? \"white\" : \"inherit\",\r\n+                  \"&:hover\": {\r\n+                    backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"rgba(0, 118, 191, 0.1)\",\r\n+                  },\r\n+                }}\r\n+              >\r\n+                {letter}\r\n+              </Button>\r\n+            ))}\r\n+          </ButtonGroup>\r\n+        </Box>\r\n         <TableContainer sx={{ maxHeight: 440, height: \"auto\", overflowX: \"auto\" }}>\r\n           <Table stickyHeader aria-label=\"sticky table\">\r\n             <TableHead>\r\n               {table.getHeaderGroups().map((headerGroup) => (\r\n@@ -190,39 +234,48 @@\n                   </TableRow>\r\n                 ))\r\n               ) : (\r\n                 <TableRow>\r\n-                  {!loading ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n-                    No Data Found\r\n-                  </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n-                    <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n-                      <CircularProgress sx={{color:'#0b0962'}} size={50} />\r\n-                    </Box>\r\n-                  </TableCell>}\r\n-\r\n+                  {!loading ? (\r\n+                    <TableCell\r\n+                      colSpan={table.getAllColumns().length}\r\n+                      sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"23px\" }}\r\n+                    >\r\n+                      No Data Found\r\n+                    </TableCell>\r\n+                  ) : (\r\n+                    <TableCell\r\n+                      colSpan={table.getAllColumns().length}\r\n+                      sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"23px\" }}\r\n+                    >\r\n+                      <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n+                        <CircularProgress sx={{ color: \"#0b0962\" }} size={50} />\r\n+                      </Box>\r\n+                    </TableCell>\r\n+                  )}\r\n                 </TableRow>\r\n               )}\r\n             </TableBody>\r\n-\r\n           </Table>\r\n         </TableContainer>\r\n-        {table.getRowModel().rows.length > 0 && <TablePagination\r\n-          rowsPerPageOptions={[10, 25, 50]}\r\n-          component=\"div\"\r\n-          count={table.getFilteredRowModel().rows.length}\r\n-          rowsPerPage={table.getState().pagination.pageSize}\r\n-          page={table.getState().pagination.pageIndex}\r\n-          onPageChange={(_, newPage) => {\r\n-            table.setPageIndex(newPage)\r\n-          }}\r\n-          onRowsPerPageChange={(e) => {\r\n-            const size = e.target.value ? Number(e.target.value) : 10\r\n-            table.setPageSize(size)\r\n-          }}\r\n-        />}\r\n+        {table.getRowModel().rows.length > 0 && (\r\n+          <TablePagination\r\n+            rowsPerPageOptions={[10, 25, 50]}\r\n+            component=\"div\"\r\n+            count={table.getFilteredRowModel().rows.length}\r\n+            rowsPerPage={table.getState().pagination.pageSize}\r\n+            page={table.getState().pagination.pageIndex}\r\n+            onPageChange={(_, newPage) => {\r\n+              table.setPageIndex(newPage)\r\n+            }}\r\n+            onRowsPerPageChange={(e) => {\r\n+              const size = e.target.value ? Number(e.target.value) : 10\r\n+              table.setPageSize(size)\r\n+            }}\r\n+          />\r\n+        )}\r\n       </Paper>\r\n     </div>\r\n   )\r\n }\r\n \r\n export default DataTable\r\n-\r\n"
                },
                {
                    "date": 1744131752037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,11 +151,9 @@\n             alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n             gap: 1,\r\n           }}\r\n         >\r\n-          <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n-            View all:\r\n-          </Typography>\r\n+         \r\n           <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n             {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n               <Button\r\n                 key={letter}\r\n"
                },
                {
                    "date": 1744131826442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     } else {\r\n       setActiveAlphabet(letter)\r\n       // Assuming the first column after checkbox is the name column\r\n       const nameColumnId = enableCheckbox ? columns[0].accessorKey : tableColumns[0].accessorKey\r\n-      setGlobalFilter(letter)\r\n+      // setGlobalFilter(letter)\r\n     }\r\n   }\r\n \r\n   // Notify parent component when selection changes\r\n"
                },
                {
                    "date": 1744131886129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n     } else {\r\n       setActiveAlphabet(letter)\r\n       // Assuming the first column after checkbox is the name column\r\n       const nameColumnId = enableCheckbox ? columns[0].accessorKey : tableColumns[0].accessorKey\r\n-      // setGlobalFilter(letter)\r\n+      setGlobalFilter(letter)\r\n     }\r\n   }\r\n \r\n   // Notify parent component when selection changes\r\n"
                },
                {
                    "date": 1744132014663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,9 @@\n } from \"@mui/material\"\r\n \r\n const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading }) => {\r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n+  const [alphabetFilter, setAlphabetFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n   const [loader, setLoader] = useState(false)\r\n   const [pagination, setPagination] = useState({\r\n     pageIndex: 0,\r\n@@ -44,14 +45,12 @@\n   const filterByAlphabet = (letter) => {\r\n     if (letter === activeAlphabet) {\r\n       // If clicking the same letter again, clear the filter\r\n       setActiveAlphabet(\"\")\r\n-      setGlobalFilter(\"\")\r\n+      setAlphabetFilter(\"\")\r\n     } else {\r\n       setActiveAlphabet(letter)\r\n-      // Assuming the first column after checkbox is the name column\r\n-      const nameColumnId = enableCheckbox ? columns[0].accessorKey : tableColumns[0].accessorKey\r\n-      setGlobalFilter(letter)\r\n+      setAlphabetFilter(letter)\r\n     }\r\n   }\r\n \r\n   // Notify parent component when selection changes\r\n@@ -89,28 +88,65 @@\n   const tableColumns = React.useMemo(() => {\r\n     return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n   }, [columns, enableCheckbox, checkboxColumn])\r\n \r\n+  // Custom filter function that combines global search and alphabet filter\r\n+  const customFilterFn = React.useCallback(\r\n+    (row) => {\r\n+      // Apply global filter first\r\n+      let passesGlobalFilter = true\r\n+      if (globalFilter) {\r\n+        passesGlobalFilter = Object.values(row.original).some(\r\n+          (value) => value && value.toString().toLowerCase().includes(globalFilter.toLowerCase()),\r\n+        )\r\n+      }\r\n+\r\n+      // Apply alphabet filter if active\r\n+      let passesAlphabetFilter = true\r\n+      if (alphabetFilter) {\r\n+        // Get the first column value (assuming it's the name)\r\n+        const firstColumnKey = Object.keys(row.original)[0]\r\n+        const firstValue = row.original[firstColumnKey]\r\n+\r\n+        if (firstValue) {\r\n+          passesAlphabetFilter = firstValue.toString().toLowerCase().startsWith(alphabetFilter.toLowerCase())\r\n+        } else {\r\n+          passesAlphabetFilter = false\r\n+        }\r\n+      }\r\n+\r\n+      return passesGlobalFilter && passesAlphabetFilter\r\n+    },\r\n+    [globalFilter, alphabetFilter],\r\n+  )\r\n+\r\n   const table = useReactTable({\r\n     data,\r\n     columns: tableColumns,\r\n     state: {\r\n-      globalFilter,\r\n       sorting,\r\n       pagination,\r\n       rowSelection,\r\n     },\r\n     enableRowSelection: enableCheckbox,\r\n     onRowSelectionChange: setRowSelection,\r\n-    onGlobalFilterChange: setGlobalFilter,\r\n     onSortingChange: setSorting,\r\n     onPaginationChange: setPagination,\r\n     getCoreRowModel: getCoreRowModel(),\r\n     getFilteredRowModel: getFilteredRowModel(),\r\n     getPaginationRowModel: getPaginationRowModel(),\r\n     getSortedRowModel: getSortedRowModel(),\r\n+    filterFns: {\r\n+      custom: customFilterFn,\r\n+    },\r\n+    globalFilterFn: \"custom\",\r\n   })\r\n \r\n+  // Apply the custom filter\r\n+  const filteredRows = React.useMemo(() => {\r\n+    return table.getFilteredRowModel().rows\r\n+  }, [table, customFilterFn])\r\n+\r\n   return (\r\n     <div>\r\n       <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n         <TextField\r\n@@ -151,9 +187,11 @@\n             alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n             gap: 1,\r\n           }}\r\n         >\r\n-         \r\n+          <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n+            View all:\r\n+          </Typography>\r\n           <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n             {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n               <Button\r\n                 key={letter}\r\n@@ -208,30 +246,32 @@\n               ))}\r\n             </TableHead>\r\n \r\n             <TableBody>\r\n-              {table.getRowModel().rows.length > 0 ? (\r\n-                table.getRowModel().rows.map((row) => (\r\n-                  <TableRow\r\n-                    key={row.id}\r\n-                    hover={enableCheckbox}\r\n-                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n-                    selected={row.getIsSelected()}\r\n-                  >\r\n-                    {row.getVisibleCells().map((cell) => (\r\n-                      <TableCell\r\n-                        key={cell.id}\r\n-                        sx={{\r\n-                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                          whiteSpace: \"normal\",\r\n-                          wordBreak: \"break-word\",\r\n-                        }}\r\n-                      >\r\n-                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n-                      </TableCell>\r\n-                    ))}\r\n-                  </TableRow>\r\n-                ))\r\n+              {filteredRows.length > 0 ? (\r\n+                filteredRows\r\n+                  .slice(pagination.pageIndex * pagination.pageSize, (pagination.pageIndex + 1) * pagination.pageSize)\r\n+                  .map((row) => (\r\n+                    <TableRow\r\n+                      key={row.id}\r\n+                      hover={enableCheckbox}\r\n+                      onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n+                      selected={row.getIsSelected()}\r\n+                    >\r\n+                      {row.getVisibleCells().map((cell) => (\r\n+                        <TableCell\r\n+                          key={cell.id}\r\n+                          sx={{\r\n+                            minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                            whiteSpace: \"normal\",\r\n+                            wordBreak: \"break-word\",\r\n+                          }}\r\n+                        >\r\n+                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                        </TableCell>\r\n+                      ))}\r\n+                    </TableRow>\r\n+                  ))\r\n               ) : (\r\n                 <TableRow>\r\n                   {!loading ? (\r\n                     <TableCell\r\n@@ -254,21 +294,27 @@\n               )}\r\n             </TableBody>\r\n           </Table>\r\n         </TableContainer>\r\n-        {table.getRowModel().rows.length > 0 && (\r\n+        {filteredRows.length > 0 && (\r\n           <TablePagination\r\n             rowsPerPageOptions={[10, 25, 50]}\r\n             component=\"div\"\r\n-            count={table.getFilteredRowModel().rows.length}\r\n-            rowsPerPage={table.getState().pagination.pageSize}\r\n-            page={table.getState().pagination.pageIndex}\r\n+            count={filteredRows.length}\r\n+            rowsPerPage={pagination.pageSize}\r\n+            page={pagination.pageIndex}\r\n             onPageChange={(_, newPage) => {\r\n-              table.setPageIndex(newPage)\r\n+              setPagination((prev) => ({\r\n+                ...prev,\r\n+                pageIndex: newPage,\r\n+              }))\r\n             }}\r\n             onRowsPerPageChange={(e) => {\r\n               const size = e.target.value ? Number(e.target.value) : 10\r\n-              table.setPageSize(size)\r\n+              setPagination((prev) => ({\r\n+                pageIndex: 0,\r\n+                pageSize: size,\r\n+              }))\r\n             }}\r\n           />\r\n         )}\r\n       </Paper>\r\n"
                },
                {
                    "date": 1744132145854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\"\r\n \r\n-import React, { useState, useEffect } from \"react\"\r\n+import { useState, useEffect, useMemo } from \"react\"\r\n import {\r\n   useReactTable,\r\n   getCoreRowModel,\r\n   getFilteredRowModel,\r\n@@ -30,9 +30,8 @@\n } from \"@mui/material\"\r\n \r\n const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading }) => {\r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n-  const [alphabetFilter, setAlphabetFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n   const [loader, setLoader] = useState(false)\r\n   const [pagination, setPagination] = useState({\r\n     pageIndex: 0,\r\n@@ -40,30 +39,44 @@\n   })\r\n   const [rowSelection, setRowSelection] = useState({})\r\n   const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n \r\n+  // Pre-filter data based on alphabet selection\r\n+  const filteredData = useMemo(() => {\r\n+    if (!activeAlphabet) return data\r\n+\r\n+    // Get the first column that's not the checkbox column\r\n+    const nameColumn = enableCheckbox ? columns[0] : columns[0]\r\n+    const nameKey = nameColumn.accessorKey\r\n+\r\n+    return data.filter((row) => {\r\n+      const value = row[nameKey]\r\n+      return value && value.toString().toLowerCase().startsWith(activeAlphabet.toLowerCase())\r\n+    })\r\n+  }, [data, activeAlphabet, columns, enableCheckbox])\r\n+\r\n   // Function to filter by first letter\r\n   const filterByAlphabet = (letter) => {\r\n     if (letter === activeAlphabet) {\r\n       // If clicking the same letter again, clear the filter\r\n       setActiveAlphabet(\"\")\r\n-      setAlphabetFilter(\"\")\r\n     } else {\r\n       setActiveAlphabet(letter)\r\n-      setAlphabetFilter(letter)\r\n     }\r\n+    // Reset to first page when changing filters\r\n+    setPagination((prev) => ({ ...prev, pageIndex: 0 }))\r\n   }\r\n \r\n   // Notify parent component when selection changes\r\n   useEffect(() => {\r\n     if (enableCheckbox && onSelectionChange) {\r\n-      const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n+      const selectedRows = Object.keys(rowSelection).map((index) => filteredData[Number.parseInt(index)])\r\n       onSelectionChange(selectedRows)\r\n     }\r\n-  }, [rowSelection, data, enableCheckbox])\r\n+  }, [rowSelection, filteredData, enableCheckbox, onSelectionChange])\r\n \r\n   // Create checkbox column\r\n-  const checkboxColumn = React.useMemo(\r\n+  const checkboxColumn = useMemo(\r\n     () => ({\r\n       id: \"select\",\r\n       header: ({ table }) => (\r\n         <Checkbox\r\n@@ -84,69 +97,32 @@\n     [],\r\n   )\r\n \r\n   // Add checkbox column if enabled\r\n-  const tableColumns = React.useMemo(() => {\r\n+  const tableColumns = useMemo(() => {\r\n     return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n   }, [columns, enableCheckbox, checkboxColumn])\r\n \r\n-  // Custom filter function that combines global search and alphabet filter\r\n-  const customFilterFn = React.useCallback(\r\n-    (row) => {\r\n-      // Apply global filter first\r\n-      let passesGlobalFilter = true\r\n-      if (globalFilter) {\r\n-        passesGlobalFilter = Object.values(row.original).some(\r\n-          (value) => value && value.toString().toLowerCase().includes(globalFilter.toLowerCase()),\r\n-        )\r\n-      }\r\n-\r\n-      // Apply alphabet filter if active\r\n-      let passesAlphabetFilter = true\r\n-      if (alphabetFilter) {\r\n-        // Get the first column value (assuming it's the name)\r\n-        const firstColumnKey = Object.keys(row.original)[0]\r\n-        const firstValue = row.original[firstColumnKey]\r\n-\r\n-        if (firstValue) {\r\n-          passesAlphabetFilter = firstValue.toString().toLowerCase().startsWith(alphabetFilter.toLowerCase())\r\n-        } else {\r\n-          passesAlphabetFilter = false\r\n-        }\r\n-      }\r\n-\r\n-      return passesGlobalFilter && passesAlphabetFilter\r\n-    },\r\n-    [globalFilter, alphabetFilter],\r\n-  )\r\n-\r\n   const table = useReactTable({\r\n-    data,\r\n+    data: filteredData,\r\n     columns: tableColumns,\r\n     state: {\r\n+      globalFilter,\r\n       sorting,\r\n       pagination,\r\n       rowSelection,\r\n     },\r\n     enableRowSelection: enableCheckbox,\r\n     onRowSelectionChange: setRowSelection,\r\n+    onGlobalFilterChange: setGlobalFilter,\r\n     onSortingChange: setSorting,\r\n     onPaginationChange: setPagination,\r\n     getCoreRowModel: getCoreRowModel(),\r\n     getFilteredRowModel: getFilteredRowModel(),\r\n     getPaginationRowModel: getPaginationRowModel(),\r\n     getSortedRowModel: getSortedRowModel(),\r\n-    filterFns: {\r\n-      custom: customFilterFn,\r\n-    },\r\n-    globalFilterFn: \"custom\",\r\n   })\r\n \r\n-  // Apply the custom filter\r\n-  const filteredRows = React.useMemo(() => {\r\n-    return table.getFilteredRowModel().rows\r\n-  }, [table, customFilterFn])\r\n-\r\n   return (\r\n     <div>\r\n       <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n         <TextField\r\n@@ -246,32 +222,30 @@\n               ))}\r\n             </TableHead>\r\n \r\n             <TableBody>\r\n-              {filteredRows.length > 0 ? (\r\n-                filteredRows\r\n-                  .slice(pagination.pageIndex * pagination.pageSize, (pagination.pageIndex + 1) * pagination.pageSize)\r\n-                  .map((row) => (\r\n-                    <TableRow\r\n-                      key={row.id}\r\n-                      hover={enableCheckbox}\r\n-                      onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n-                      selected={row.getIsSelected()}\r\n-                    >\r\n-                      {row.getVisibleCells().map((cell) => (\r\n-                        <TableCell\r\n-                          key={cell.id}\r\n-                          sx={{\r\n-                            minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                            whiteSpace: \"normal\",\r\n-                            wordBreak: \"break-word\",\r\n-                          }}\r\n-                        >\r\n-                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n-                        </TableCell>\r\n-                      ))}\r\n-                    </TableRow>\r\n-                  ))\r\n+              {table.getRowModel().rows.length > 0 ? (\r\n+                table.getRowModel().rows.map((row) => (\r\n+                  <TableRow\r\n+                    key={row.id}\r\n+                    hover={enableCheckbox}\r\n+                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n+                    selected={row.getIsSelected()}\r\n+                  >\r\n+                    {row.getVisibleCells().map((cell) => (\r\n+                      <TableCell\r\n+                        key={cell.id}\r\n+                        sx={{\r\n+                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                          whiteSpace: \"normal\",\r\n+                          wordBreak: \"break-word\",\r\n+                        }}\r\n+                      >\r\n+                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                      </TableCell>\r\n+                    ))}\r\n+                  </TableRow>\r\n+                ))\r\n               ) : (\r\n                 <TableRow>\r\n                   {!loading ? (\r\n                     <TableCell\r\n@@ -294,27 +268,21 @@\n               )}\r\n             </TableBody>\r\n           </Table>\r\n         </TableContainer>\r\n-        {filteredRows.length > 0 && (\r\n+        {table.getRowModel().rows.length > 0 && (\r\n           <TablePagination\r\n             rowsPerPageOptions={[10, 25, 50]}\r\n             component=\"div\"\r\n-            count={filteredRows.length}\r\n-            rowsPerPage={pagination.pageSize}\r\n-            page={pagination.pageIndex}\r\n+            count={table.getFilteredRowModel().rows.length}\r\n+            rowsPerPage={table.getState().pagination.pageSize}\r\n+            page={table.getState().pagination.pageIndex}\r\n             onPageChange={(_, newPage) => {\r\n-              setPagination((prev) => ({\r\n-                ...prev,\r\n-                pageIndex: newPage,\r\n-              }))\r\n+              table.setPageIndex(newPage)\r\n             }}\r\n             onRowsPerPageChange={(e) => {\r\n               const size = e.target.value ? Number(e.target.value) : 10\r\n-              setPagination((prev) => ({\r\n-                pageIndex: 0,\r\n-                pageSize: size,\r\n-              }))\r\n+              table.setPageSize(size)\r\n             }}\r\n           />\r\n         )}\r\n       </Paper>\r\n"
                },
                {
                    "date": 1744132171513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n \"use client\"\r\n \r\n-import { useState, useEffect, useMemo } from \"react\"\r\n+import React, { useState, useEffect } from \"react\"\r\n import {\r\n   useReactTable,\r\n   getCoreRowModel,\r\n   getFilteredRowModel,\r\n@@ -39,44 +39,32 @@\n   })\r\n   const [rowSelection, setRowSelection] = useState({})\r\n   const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n \r\n-  // Pre-filter data based on alphabet selection\r\n-  const filteredData = useMemo(() => {\r\n-    if (!activeAlphabet) return data\r\n-\r\n-    // Get the first column that's not the checkbox column\r\n-    const nameColumn = enableCheckbox ? columns[0] : columns[0]\r\n-    const nameKey = nameColumn.accessorKey\r\n-\r\n-    return data.filter((row) => {\r\n-      const value = row[nameKey]\r\n-      return value && value.toString().toLowerCase().startsWith(activeAlphabet.toLowerCase())\r\n-    })\r\n-  }, [data, activeAlphabet, columns, enableCheckbox])\r\n-\r\n   // Function to filter by first letter\r\n   const filterByAlphabet = (letter) => {\r\n     if (letter === activeAlphabet) {\r\n       // If clicking the same letter again, clear the filter\r\n       setActiveAlphabet(\"\")\r\n+      setGlobalFilter(\"\")\r\n     } else {\r\n       setActiveAlphabet(letter)\r\n+      // Assuming the first column after checkbox is the name column\r\n+      const nameColumnId = enableCheckbox ? columns[0].accessorKey : tableColumns[0].accessorKey\r\n+      setGlobalFilter(letter)\r\n     }\r\n-    // Reset to first page when changing filters\r\n-    setPagination((prev) => ({ ...prev, pageIndex: 0 }))\r\n   }\r\n \r\n   // Notify parent component when selection changes\r\n   useEffect(() => {\r\n     if (enableCheckbox && onSelectionChange) {\r\n-      const selectedRows = Object.keys(rowSelection).map((index) => filteredData[Number.parseInt(index)])\r\n+      const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n       onSelectionChange(selectedRows)\r\n     }\r\n-  }, [rowSelection, filteredData, enableCheckbox, onSelectionChange])\r\n+  }, [rowSelection, data, enableCheckbox])\r\n \r\n   // Create checkbox column\r\n-  const checkboxColumn = useMemo(\r\n+  const checkboxColumn = React.useMemo(\r\n     () => ({\r\n       id: \"select\",\r\n       header: ({ table }) => (\r\n         <Checkbox\r\n@@ -97,14 +85,14 @@\n     [],\r\n   )\r\n \r\n   // Add checkbox column if enabled\r\n-  const tableColumns = useMemo(() => {\r\n+  const tableColumns = React.useMemo(() => {\r\n     return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n   }, [columns, enableCheckbox, checkboxColumn])\r\n \r\n   const table = useReactTable({\r\n-    data: filteredData,\r\n+    data,\r\n     columns: tableColumns,\r\n     state: {\r\n       globalFilter,\r\n       sorting,\r\n"
                },
                {
                    "date": 1744132178471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,11 +151,9 @@\n             alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n             gap: 1,\r\n           }}\r\n         >\r\n-          <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n-            View all:\r\n-          </Typography>\r\n+         \r\n           <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n             {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n               <Button\r\n                 key={letter}\r\n"
                },
                {
                    "date": 1744132292394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,11 +47,9 @@\n       setActiveAlphabet(\"\")\r\n       setGlobalFilter(\"\")\r\n     } else {\r\n       setActiveAlphabet(letter)\r\n-      // Assuming the first column after checkbox is the name column\r\n-      const nameColumnId = enableCheckbox ? columns[0].accessorKey : tableColumns[0].accessorKey\r\n-      setGlobalFilter(letter)\r\n+\r\n     }\r\n   }\r\n \r\n   // Notify parent component when selection changes\r\n"
                },
                {
                    "date": 1744132383082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n   const filterByAlphabet = (letter) => {\r\n     if (letter === activeAlphabet) {\r\n       // If clicking the same letter again, clear the filter\r\n       setActiveAlphabet(\"\")\r\n-      setGlobalFilter(\"\")\r\n+      \r\n     } else {\r\n       setActiveAlphabet(letter)\r\n \r\n     }\r\n"
                },
                {
                    "date": 1744132484122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,44 +23,33 @@\n   TableSortLabel,\r\n   Checkbox,\r\n   Box,\r\n   CircularProgress,\r\n-  Button,\r\n-  ButtonGroup,\r\n-  Typography,\r\n } from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading }) => {\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading  }) => {\r\n+\r\n+\r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n   const [loader, setLoader] = useState(false)\r\n   const [pagination, setPagination] = useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n   })\r\n   const [rowSelection, setRowSelection] = useState({})\r\n-  const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n \r\n-  // Function to filter by first letter\r\n-  const filterByAlphabet = (letter) => {\r\n-    if (letter === activeAlphabet) {\r\n-      // If clicking the same letter again, clear the filter\r\n-      setActiveAlphabet(\"\")\r\n-      \r\n-    } else {\r\n-      setActiveAlphabet(letter)\r\n-\r\n-    }\r\n-  }\r\n-\r\n   // Notify parent component when selection changes\r\n   useEffect(() => {\r\n     if (enableCheckbox && onSelectionChange) {\r\n       const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n       onSelectionChange(selectedRows)\r\n     }\r\n   }, [rowSelection, data, enableCheckbox])\r\n \r\n+\r\n+\r\n+\r\n   // Create checkbox column\r\n   const checkboxColumn = React.useMemo(\r\n     () => ({\r\n       id: \"select\",\r\n@@ -108,10 +97,10 @@\n     getSortedRowModel: getSortedRowModel(),\r\n   })\r\n \r\n   return (\r\n-    <div>\r\n-      <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n+    <div >\r\n+      <Paper sx={{ boxShadow: \"none\", backgroundColor: 'transparent' }}>\r\n         <TextField\r\n           value={globalFilter ?? \"\"}\r\n           size=\"small\"\r\n           onChange={(e) => setGlobalFilter(e.target.value)}\r\n@@ -138,40 +127,11 @@\n                   },\r\n                 },\r\n               },\r\n             },\r\n+\r\n           }}\r\n         />\r\n-        <Box\r\n-          sx={{\r\n-            mb: 2,\r\n-            display: \"flex\",\r\n-            flexDirection: { xs: \"column\", sm: \"row\" },\r\n-            alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n-            gap: 1,\r\n-          }}\r\n-        >\r\n-         \r\n-          <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n-            {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n-              <Button\r\n-                key={letter}\r\n-                onClick={() => filterByAlphabet(letter)}\r\n-                sx={{\r\n-                  minWidth: \"30px\",\r\n-                  px: 1,\r\n-                  backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"transparent\",\r\n-                  color: activeAlphabet === letter ? \"white\" : \"inherit\",\r\n-                  \"&:hover\": {\r\n-                    backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"rgba(0, 118, 191, 0.1)\",\r\n-                  },\r\n-                }}\r\n-              >\r\n-                {letter}\r\n-              </Button>\r\n-            ))}\r\n-          </ButtonGroup>\r\n-        </Box>\r\n         <TableContainer sx={{ maxHeight: 440, height: \"auto\", overflowX: \"auto\" }}>\r\n           <Table stickyHeader aria-label=\"sticky table\">\r\n             <TableHead>\r\n               {table.getHeaderGroups().map((headerGroup) => (\r\n@@ -230,48 +190,39 @@\n                   </TableRow>\r\n                 ))\r\n               ) : (\r\n                 <TableRow>\r\n-                  {!loading ? (\r\n-                    <TableCell\r\n-                      colSpan={table.getAllColumns().length}\r\n-                      sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"23px\" }}\r\n-                    >\r\n-                      No Data Found\r\n-                    </TableCell>\r\n-                  ) : (\r\n-                    <TableCell\r\n-                      colSpan={table.getAllColumns().length}\r\n-                      sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: \"23px\" }}\r\n-                    >\r\n-                      <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n-                        <CircularProgress sx={{ color: \"#0b0962\" }} size={50} />\r\n-                      </Box>\r\n-                    </TableCell>\r\n-                  )}\r\n+                  {!loading ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n+                    No Data Found\r\n+                  </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n+                    <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n+                      <CircularProgress sx={{color:'#0b0962'}} size={50} />\r\n+                    </Box>\r\n+                  </TableCell>}\r\n+\r\n                 </TableRow>\r\n               )}\r\n             </TableBody>\r\n+\r\n           </Table>\r\n         </TableContainer>\r\n-        {table.getRowModel().rows.length > 0 && (\r\n-          <TablePagination\r\n-            rowsPerPageOptions={[10, 25, 50]}\r\n-            component=\"div\"\r\n-            count={table.getFilteredRowModel().rows.length}\r\n-            rowsPerPage={table.getState().pagination.pageSize}\r\n-            page={table.getState().pagination.pageIndex}\r\n-            onPageChange={(_, newPage) => {\r\n-              table.setPageIndex(newPage)\r\n-            }}\r\n-            onRowsPerPageChange={(e) => {\r\n-              const size = e.target.value ? Number(e.target.value) : 10\r\n-              table.setPageSize(size)\r\n-            }}\r\n-          />\r\n-        )}\r\n+        {table.getRowModel().rows.length > 0 && <TablePagination\r\n+          rowsPerPageOptions={[10, 25, 50]}\r\n+          component=\"div\"\r\n+          count={table.getFilteredRowModel().rows.length}\r\n+          rowsPerPage={table.getState().pagination.pageSize}\r\n+          page={table.getState().pagination.pageIndex}\r\n+          onPageChange={(_, newPage) => {\r\n+            table.setPageIndex(newPage)\r\n+          }}\r\n+          onRowsPerPageChange={(e) => {\r\n+            const size = e.target.value ? Number(e.target.value) : 10\r\n+            table.setPageSize(size)\r\n+          }}\r\n+        />}\r\n       </Paper>\r\n     </div>\r\n   )\r\n }\r\n \r\n export default DataTable\r\n+\r\n"
                },
                {
                    "date": 1744132714406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-\"use client\"\r\n+\"use client\";\r\n \r\n-import React, { useState, useEffect } from \"react\"\r\n+import React, { useState, useEffect, useMemo } from \"react\";\r\n import {\r\n   useReactTable,\r\n   getCoreRowModel,\r\n   getFilteredRowModel,\r\n   getPaginationRowModel,\r\n   getSortedRowModel,\r\n   flexRender,\r\n-} from \"@tanstack/react-table\"\r\n+} from \"@tanstack/react-table\";\r\n \r\n import {\r\n   Table,\r\n   TableBody,\r\n@@ -23,35 +23,29 @@\n   TableSortLabel,\r\n   Checkbox,\r\n   Box,\r\n   CircularProgress,\r\n-} from \"@mui/material\"\r\n+} from \"@mui/material\";\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading  }) => {\r\n-\r\n-\r\n-  const [globalFilter, setGlobalFilter] = useState(\"\")\r\n-  const [sorting, setSorting] = useState([])\r\n-  const [loader, setLoader] = useState(false)\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading }) => {\r\n+  const [globalFilter, setGlobalFilter] = useState(\"\");\r\n+  const [sorting, setSorting] = useState([]);\r\n   const [pagination, setPagination] = useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n-  })\r\n-  const [rowSelection, setRowSelection] = useState({})\r\n+  });\r\n+  const [rowSelection, setRowSelection] = useState({});\r\n \r\n   // Notify parent component when selection changes\r\n   useEffect(() => {\r\n     if (enableCheckbox && onSelectionChange) {\r\n-      const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n-      onSelectionChange(selectedRows)\r\n+      const selectedRows = Object.keys(rowSelection).map((index) => data[Number(index)]);\r\n+      onSelectionChange(selectedRows);\r\n     }\r\n-  }, [rowSelection, data, enableCheckbox])\r\n+  }, [rowSelection, data, enableCheckbox]);\r\n \r\n-\r\n-\r\n-\r\n-  // Create checkbox column\r\n-  const checkboxColumn = React.useMemo(\r\n+  // Checkbox column\r\n+  const checkboxColumn = useMemo(\r\n     () => ({\r\n       id: \"select\",\r\n       header: ({ table }) => (\r\n         <Checkbox\r\n@@ -68,16 +62,26 @@\n         />\r\n       ),\r\n       size: 40,\r\n     }),\r\n-    [],\r\n-  )\r\n+    []\r\n+  );\r\n \r\n-  // Add checkbox column if enabled\r\n-  const tableColumns = React.useMemo(() => {\r\n-    return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n-  }, [columns, enableCheckbox, checkboxColumn])\r\n+  const tableColumns = useMemo(() => {\r\n+    return enableCheckbox ? [checkboxColumn, ...columns] : columns;\r\n+  }, [columns, enableCheckbox, checkboxColumn]);\r\n \r\n+  // Global filter function for all visible columns\r\n+  const globalFilterFn = (row, columnId, filterValue) => {\r\n+    return row\r\n+      .getVisibleCells()\r\n+      .some((cell) =>\r\n+        String(cell.getValue())\r\n+          .toLowerCase()\r\n+          .includes(filterValue.toLowerCase())\r\n+      );\r\n+  };\r\n+\r\n   const table = useReactTable({\r\n     data,\r\n     columns: tableColumns,\r\n     state: {\r\n@@ -90,17 +94,18 @@\n     onRowSelectionChange: setRowSelection,\r\n     onGlobalFilterChange: setGlobalFilter,\r\n     onSortingChange: setSorting,\r\n     onPaginationChange: setPagination,\r\n+    globalFilterFn,\r\n     getCoreRowModel: getCoreRowModel(),\r\n     getFilteredRowModel: getFilteredRowModel(),\r\n     getPaginationRowModel: getPaginationRowModel(),\r\n     getSortedRowModel: getSortedRowModel(),\r\n-  })\r\n+  });\r\n \r\n   return (\r\n-    <div >\r\n-      <Paper sx={{ boxShadow: \"none\", backgroundColor: 'transparent' }}>\r\n+    <div>\r\n+      <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n         <TextField\r\n           value={globalFilter ?? \"\"}\r\n           size=\"small\"\r\n           onChange={(e) => setGlobalFilter(e.target.value)}\r\n@@ -111,51 +116,44 @@\n             mb: 4,\r\n             \".MuiOutlinedInput-root\": {\r\n               border: \"2px solid #e0e0e0\",\r\n               borderRadius: \"12px\",\r\n-              outline: \"none\",\r\n-              transition: \"all 0.2s ease-in-out\",\r\n               \"& fieldset\": { border: \"none\" },\r\n               \"&:hover\": {\r\n                 border: \"2px solid #0076bf\",\r\n               },\r\n               \"&.Mui-focused\": {\r\n                 border: \"2px solid #0076bf\",\r\n                 \"& fieldset\": { border: \"none\" },\r\n-                svg: {\r\n-                  path: {\r\n-                    fill: \"#0076bf\",\r\n-                  },\r\n-                },\r\n               },\r\n             },\r\n-\r\n           }}\r\n         />\r\n-        <TableContainer sx={{ maxHeight: 440, height: \"auto\", overflowX: \"auto\" }}>\r\n-          <Table stickyHeader aria-label=\"sticky table\">\r\n+\r\n+        <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n+          <Table stickyHeader>\r\n             <TableHead>\r\n               {table.getHeaderGroups().map((headerGroup) => (\r\n                 <TableRow key={headerGroup.id}>\r\n                   {headerGroup.headers.map((header, index) => (\r\n                     <TableCell\r\n                       key={header.id}\r\n                       align=\"left\"\r\n-                      sortDirection={header.column.getIsSorted()}\r\n+                      sortDirection={header.column.getIsSorted() || false}\r\n                       sx={{\r\n                         minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n                         whiteSpace: \"nowrap\",\r\n-                        borderTopLeftRadius: index === 0 ? \"8px\" : 0, // First cell\r\n-                        borderTopRightRadius: index === headerGroup.headers.length - 1 ? \"8px\" : 0, // Last cell\r\n-                        overflow: \"hidden\", // Ensures border-radius applies correctly\r\n+                        borderTopLeftRadius: index === 0 ? \"8px\" : 0,\r\n+                        borderTopRightRadius:\r\n+                          index === headerGroup.headers.length - 1 ? \"8px\" : 0,\r\n                       }}\r\n                     >\r\n                       {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n                         flexRender(header.column.columnDef.header, header.getContext())\r\n                       ) : (\r\n                         <TableSortLabel\r\n-                          active={header.column.getIsSorted() !== false}\r\n-                          direction={header.column.getIsSorted() || undefined}\r\n+                          active={!!header.column.getIsSorted()}\r\n+                          direction={header.column.getIsSorted() || \"asc\"}\r\n                           onClick={header.column.getToggleSortingHandler()}\r\n                         >\r\n                           {flexRender(header.column.columnDef.header, header.getContext())}\r\n                         </TableSortLabel>\r\n@@ -179,9 +177,8 @@\n                       <TableCell\r\n                         key={cell.id}\r\n                         sx={{\r\n                           minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                          whiteSpace: \"normal\",\r\n                           wordBreak: \"break-word\",\r\n                         }}\r\n                       >\r\n                         {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n@@ -190,39 +187,41 @@\n                   </TableRow>\r\n                 ))\r\n               ) : (\r\n                 <TableRow>\r\n-                  {!loading ? <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n-                    No Data Found\r\n-                  </TableCell> : <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\", fontSize: '23px' }}>\r\n-                    <Box py={3} display=\"flex\" justifyContent=\"center\">\r\n-                      <CircularProgress sx={{color:'#0b0962'}} size={50} />\r\n+                  <TableCell colSpan={table.getAllColumns().length}>\r\n+                    <Box py={3} textAlign=\"center\">\r\n+                      {!loading ? (\r\n+                        <strong style={{ fontSize: \"18px\" }}>No Data Found</strong>\r\n+                      ) : (\r\n+                        <CircularProgress sx={{ color: \"#0b0962\" }} size={50} />\r\n+                      )}\r\n                     </Box>\r\n-                  </TableCell>}\r\n-\r\n+                  </TableCell>\r\n                 </TableRow>\r\n               )}\r\n             </TableBody>\r\n-\r\n           </Table>\r\n         </TableContainer>\r\n-        {table.getRowModel().rows.length > 0 && <TablePagination\r\n-          rowsPerPageOptions={[10, 25, 50]}\r\n-          component=\"div\"\r\n-          count={table.getFilteredRowModel().rows.length}\r\n-          rowsPerPage={table.getState().pagination.pageSize}\r\n-          page={table.getState().pagination.pageIndex}\r\n-          onPageChange={(_, newPage) => {\r\n-            table.setPageIndex(newPage)\r\n-          }}\r\n-          onRowsPerPageChange={(e) => {\r\n-            const size = e.target.value ? Number(e.target.value) : 10\r\n-            table.setPageSize(size)\r\n-          }}\r\n-        />}\r\n+\r\n+        {table.getFilteredRowModel().rows.length > 0 && (\r\n+          <TablePagination\r\n+            rowsPerPageOptions={[10, 25, 50]}\r\n+            component=\"div\"\r\n+            count={table.getFilteredRowModel().rows.length}\r\n+            rowsPerPage={table.getState().pagination.pageSize}\r\n+            page={table.getState().pagination.pageIndex}\r\n+            onPageChange={(_, newPage) => {\r\n+              table.setPageIndex(newPage);\r\n+            }}\r\n+            onRowsPerPageChange={(e) => {\r\n+              const size = e.target.value ? Number(e.target.value) : 10;\r\n+              table.setPageSize(size);\r\n+            }}\r\n+          />\r\n+        )}\r\n       </Paper>\r\n     </div>\r\n-  )\r\n-}\r\n+  );\r\n+};\r\n \r\n-export default DataTable\r\n-\r\n+export default DataTable;\r\n"
                },
                {
                    "date": 1744133925764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,50 @@\n               },\r\n             },\r\n           }}\r\n         />\r\n-\r\n+ <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mb={2}>\r\n+        {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n+          <Box\r\n+            key={letter}\r\n+            onClick={() => setSelectedAlphabet(letter)}\r\n+            sx={{\r\n+              cursor: \"pointer\",\r\n+              fontWeight: selectedAlphabet === letter ? \"bold\" : \"normal\",\r\n+              color: selectedAlphabet === letter ? \"#0076bf\" : \"#000\",\r\n+              border: \"1px solid #ccc\",\r\n+              borderRadius: \"5px\",\r\n+              px: 1,\r\n+              py: 0.5,\r\n+              userSelect: \"none\",\r\n+              transition: \"all 0.2s ease\",\r\n+              \"&:hover\": {\r\n+                backgroundColor: \"#f0f0f0\",\r\n+              },\r\n+            }}\r\n+          >\r\n+            {letter}\r\n+          </Box>\r\n+        ))}\r\n+        <Box\r\n+          onClick={() => setSelectedAlphabet(\"\")}\r\n+          sx={{\r\n+            cursor: \"pointer\",\r\n+            fontWeight: !selectedAlphabet ? \"bold\" : \"normal\",\r\n+            color: !selectedAlphabet ? \"#0076bf\" : \"#000\",\r\n+            border: \"1px solid #ccc\",\r\n+            borderRadius: \"5px\",\r\n+            px: 1,\r\n+            py: 0.5,\r\n+            userSelect: \"none\",\r\n+            transition: \"all 0.2s ease\",\r\n+            \"&:hover\": {\r\n+              backgroundColor: \"#f0f0f0\",\r\n+            },\r\n+          }}\r\n+        >\r\n+          View All\r\n+        </Box>\r\n         <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n           <Table stickyHeader>\r\n             <TableHead>\r\n               {table.getHeaderGroups().map((headerGroup) => (\r\n"
                },
                {
                    "date": 1744133942691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,17 +127,38 @@\n               },\r\n             },\r\n           }}\r\n         />\r\n- <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mb={2}>\r\n-        {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n+        <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mb={2}>\r\n+          {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n+            <Box\r\n+              key={letter}\r\n+              onClick={() => setSelectedAlphabet(letter)}\r\n+              sx={{\r\n+                cursor: \"pointer\",\r\n+                fontWeight: selectedAlphabet === letter ? \"bold\" : \"normal\",\r\n+                color: selectedAlphabet === letter ? \"#0076bf\" : \"#000\",\r\n+                border: \"1px solid #ccc\",\r\n+                borderRadius: \"5px\",\r\n+                px: 1,\r\n+                py: 0.5,\r\n+                userSelect: \"none\",\r\n+                transition: \"all 0.2s ease\",\r\n+                \"&:hover\": {\r\n+                  backgroundColor: \"#f0f0f0\",\r\n+                },\r\n+              }}\r\n+            >\r\n+              {letter}\r\n+            </Box>\r\n+          ))}\r\n+          </Box>\r\n           <Box\r\n-            key={letter}\r\n-            onClick={() => setSelectedAlphabet(letter)}\r\n+            onClick={() => setSelectedAlphabet(\"\")}\r\n             sx={{\r\n               cursor: \"pointer\",\r\n-              fontWeight: selectedAlphabet === letter ? \"bold\" : \"normal\",\r\n-              color: selectedAlphabet === letter ? \"#0076bf\" : \"#000\",\r\n+              fontWeight: !selectedAlphabet ? \"bold\" : \"normal\",\r\n+              color: !selectedAlphabet ? \"#0076bf\" : \"#000\",\r\n               border: \"1px solid #ccc\",\r\n               borderRadius: \"5px\",\r\n               px: 1,\r\n               py: 0.5,\r\n@@ -147,120 +168,100 @@\n                 backgroundColor: \"#f0f0f0\",\r\n               },\r\n             }}\r\n           >\r\n-            {letter}\r\n+            View All\r\n           </Box>\r\n-        ))}\r\n-        <Box\r\n-          onClick={() => setSelectedAlphabet(\"\")}\r\n-          sx={{\r\n-            cursor: \"pointer\",\r\n-            fontWeight: !selectedAlphabet ? \"bold\" : \"normal\",\r\n-            color: !selectedAlphabet ? \"#0076bf\" : \"#000\",\r\n-            border: \"1px solid #ccc\",\r\n-            borderRadius: \"5px\",\r\n-            px: 1,\r\n-            py: 0.5,\r\n-            userSelect: \"none\",\r\n-            transition: \"all 0.2s ease\",\r\n-            \"&:hover\": {\r\n-              backgroundColor: \"#f0f0f0\",\r\n-            },\r\n-          }}\r\n-        >\r\n-          View All\r\n-        </Box>\r\n-        <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n-          <Table stickyHeader>\r\n-            <TableHead>\r\n-              {table.getHeaderGroups().map((headerGroup) => (\r\n-                <TableRow key={headerGroup.id}>\r\n-                  {headerGroup.headers.map((header, index) => (\r\n-                    <TableCell\r\n-                      key={header.id}\r\n-                      align=\"left\"\r\n-                      sortDirection={header.column.getIsSorted() || false}\r\n-                      sx={{\r\n-                        minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                        whiteSpace: \"nowrap\",\r\n-                        borderTopLeftRadius: index === 0 ? \"8px\" : 0,\r\n-                        borderTopRightRadius:\r\n-                          index === headerGroup.headers.length - 1 ? \"8px\" : 0,\r\n-                      }}\r\n-                    >\r\n-                      {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n-                        flexRender(header.column.columnDef.header, header.getContext())\r\n-                      ) : (\r\n-                        <TableSortLabel\r\n-                          active={!!header.column.getIsSorted()}\r\n-                          direction={header.column.getIsSorted() || \"asc\"}\r\n-                          onClick={header.column.getToggleSortingHandler()}\r\n-                        >\r\n-                          {flexRender(header.column.columnDef.header, header.getContext())}\r\n-                        </TableSortLabel>\r\n-                      )}\r\n-                    </TableCell>\r\n-                  ))}\r\n-                </TableRow>\r\n-              ))}\r\n-            </TableHead>\r\n-\r\n-            <TableBody>\r\n-              {table.getRowModel().rows.length > 0 ? (\r\n-                table.getRowModel().rows.map((row) => (\r\n-                  <TableRow\r\n-                    key={row.id}\r\n-                    hover={enableCheckbox}\r\n-                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n-                    selected={row.getIsSelected()}\r\n-                  >\r\n-                    {row.getVisibleCells().map((cell) => (\r\n+          <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n+            <Table stickyHeader>\r\n+              <TableHead>\r\n+                {table.getHeaderGroups().map((headerGroup) => (\r\n+                  <TableRow key={headerGroup.id}>\r\n+                    {headerGroup.headers.map((header, index) => (\r\n                       <TableCell\r\n-                        key={cell.id}\r\n+                        key={header.id}\r\n+                        align=\"left\"\r\n+                        sortDirection={header.column.getIsSorted() || false}\r\n                         sx={{\r\n-                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                          wordBreak: \"break-word\",\r\n+                          minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                          whiteSpace: \"nowrap\",\r\n+                          borderTopLeftRadius: index === 0 ? \"8px\" : 0,\r\n+                          borderTopRightRadius:\r\n+                            index === headerGroup.headers.length - 1 ? \"8px\" : 0,\r\n                         }}\r\n                       >\r\n-                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                        {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n+                          flexRender(header.column.columnDef.header, header.getContext())\r\n+                        ) : (\r\n+                          <TableSortLabel\r\n+                            active={!!header.column.getIsSorted()}\r\n+                            direction={header.column.getIsSorted() || \"asc\"}\r\n+                            onClick={header.column.getToggleSortingHandler()}\r\n+                          >\r\n+                            {flexRender(header.column.columnDef.header, header.getContext())}\r\n+                          </TableSortLabel>\r\n+                        )}\r\n                       </TableCell>\r\n                     ))}\r\n                   </TableRow>\r\n-                ))\r\n-              ) : (\r\n-                <TableRow>\r\n-                  <TableCell colSpan={table.getAllColumns().length}>\r\n-                    <Box py={3} textAlign=\"center\">\r\n-                      {!loading ? (\r\n-                        <strong style={{ fontSize: \"18px\" }}>No Data Found</strong>\r\n-                      ) : (\r\n-                        <CircularProgress sx={{ color: \"#0b0962\" }} size={50} />\r\n-                      )}\r\n-                    </Box>\r\n-                  </TableCell>\r\n-                </TableRow>\r\n-              )}\r\n-            </TableBody>\r\n-          </Table>\r\n-        </TableContainer>\r\n+                ))}\r\n+              </TableHead>\r\n \r\n-        {table.getFilteredRowModel().rows.length > 0 && (\r\n-          <TablePagination\r\n-            rowsPerPageOptions={[10, 25, 50]}\r\n-            component=\"div\"\r\n-            count={table.getFilteredRowModel().rows.length}\r\n-            rowsPerPage={table.getState().pagination.pageSize}\r\n-            page={table.getState().pagination.pageIndex}\r\n-            onPageChange={(_, newPage) => {\r\n-              table.setPageIndex(newPage);\r\n-            }}\r\n-            onRowsPerPageChange={(e) => {\r\n-              const size = e.target.value ? Number(e.target.value) : 10;\r\n-              table.setPageSize(size);\r\n-            }}\r\n-          />\r\n-        )}\r\n+              <TableBody>\r\n+                {table.getRowModel().rows.length > 0 ? (\r\n+                  table.getRowModel().rows.map((row) => (\r\n+                    <TableRow\r\n+                      key={row.id}\r\n+                      hover={enableCheckbox}\r\n+                      onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n+                      selected={row.getIsSelected()}\r\n+                    >\r\n+                      {row.getVisibleCells().map((cell) => (\r\n+                        <TableCell\r\n+                          key={cell.id}\r\n+                          sx={{\r\n+                            minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                            wordBreak: \"break-word\",\r\n+                          }}\r\n+                        >\r\n+                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+                        </TableCell>\r\n+                      ))}\r\n+                    </TableRow>\r\n+                  ))\r\n+                ) : (\r\n+                  <TableRow>\r\n+                    <TableCell colSpan={table.getAllColumns().length}>\r\n+                      <Box py={3} textAlign=\"center\">\r\n+                        {!loading ? (\r\n+                          <strong style={{ fontSize: \"18px\" }}>No Data Found</strong>\r\n+                        ) : (\r\n+                          <CircularProgress sx={{ color: \"#0b0962\" }} size={50} />\r\n+                        )}\r\n+                      </Box>\r\n+                    </TableCell>\r\n+                  </TableRow>\r\n+                )}\r\n+              </TableBody>\r\n+            </Table>\r\n+          </TableContainer>\r\n+\r\n+          {table.getFilteredRowModel().rows.length > 0 && (\r\n+            <TablePagination\r\n+              rowsPerPageOptions={[10, 25, 50]}\r\n+              component=\"div\"\r\n+              count={table.getFilteredRowModel().rows.length}\r\n+              rowsPerPage={table.getState().pagination.pageSize}\r\n+              page={table.getState().pagination.pageIndex}\r\n+              onPageChange={(_, newPage) => {\r\n+                table.setPageIndex(newPage);\r\n+              }}\r\n+              onRowsPerPageChange={(e) => {\r\n+                const size = e.target.value ? Number(e.target.value) : 10;\r\n+                table.setPageSize(size);\r\n+              }}\r\n+            />\r\n+          )}\r\n       </Paper>\r\n     </div>\r\n   );\r\n };\r\n"
                },
                {
                    "date": 1744133960178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n } from \"@mui/material\";\r\n \r\n const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading }) => {\r\n   const [globalFilter, setGlobalFilter] = useState(\"\");\r\n+  const [selectedAlphabet, setSelectedAlphabet] = useState(\"\");\r\n   const [sorting, setSorting] = useState([]);\r\n   const [pagination, setPagination] = useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n"
                },
                {
                    "date": 1744134039312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,32 +128,40 @@\n               },\r\n             },\r\n           }}\r\n         />\r\n-        <Box display=\"flex\" gap={1} flexWrap=\"wrap\" mb={2}>\r\n-          {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n-            <Box\r\n-              key={letter}\r\n-              onClick={() => setSelectedAlphabet(letter)}\r\n-              sx={{\r\n-                cursor: \"pointer\",\r\n-                fontWeight: selectedAlphabet === letter ? \"bold\" : \"normal\",\r\n-                color: selectedAlphabet === letter ? \"#0076bf\" : \"#000\",\r\n-                border: \"1px solid #ccc\",\r\n-                borderRadius: \"5px\",\r\n-                px: 1,\r\n-                py: 0.5,\r\n-                userSelect: \"none\",\r\n-                transition: \"all 0.2s ease\",\r\n-                \"&:hover\": {\r\n-                  backgroundColor: \"#f0f0f0\",\r\n-                },\r\n-              }}\r\n-            >\r\n-              {letter}\r\n-            </Box>\r\n-          ))}\r\n-          </Box>\r\n+       <Box\r\n+          sx={{\r\n+            mb: 2,\r\n+            display: \"flex\",\r\n+            flexDirection: { xs: \"column\", sm: \"row\" },\r\n+            alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n+            gap: 1,\r\n+          }}\r\n+        >\r\n+          <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n+            View all:\r\n+          </Typography>\r\n+          <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n+            {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n+              <Button\r\n+                key={letter}\r\n+                onClick={() => filterByAlphabet(letter)}\r\n+                sx={{\r\n+                  minWidth: \"30px\",\r\n+                  px: 1,\r\n+                  backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"transparent\",\r\n+                  color: activeAlphabet === letter ? \"white\" : \"inherit\",\r\n+                  \"&:hover\": {\r\n+                    backgroundColor: activeAlphabet === letter ? \"#0076bf\" : \"rgba(0, 118, 191, 0.1)\",\r\n+                  },\r\n+                }}\r\n+              >\r\n+                {letter}\r\n+              </Button>\r\n+            ))}\r\n+          </ButtonGroup>\r\n+        </Box>\r\n           <Box\r\n             onClick={() => setSelectedAlphabet(\"\")}\r\n             sx={{\r\n               cursor: \"pointer\",\r\n"
                },
                {
                    "date": 1744134049864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,11 @@\n   TableSortLabel,\r\n   Checkbox,\r\n   Box,\r\n   CircularProgress,\r\n+  Typography,\r\n+  ButtonGroup,\r\n+  Button,\r\n } from \"@mui/material\";\r\n \r\n const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading }) => {\r\n   const [globalFilter, setGlobalFilter] = useState(\"\");\r\n"
                },
                {
                    "date": 1744134103059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,18 @@\n     getFilteredRowModel: getFilteredRowModel(),\r\n     getPaginationRowModel: getPaginationRowModel(),\r\n     getSortedRowModel: getSortedRowModel(),\r\n   });\r\n+  const filterByAlphabet = (letter) => {\r\n+    if (letter === activeAlphabet) {\r\n+      // If clicking the same letter again, clear the filter\r\n+      setActiveAlphabet(\"\")\r\n+    } else {\r\n+      setActiveAlphabet(letter)\r\n+    }\r\n+    // Reset to first page when changing filters\r\n+    setPagination((prev) => ({ ...prev, pageIndex: 0 }))\r\n+  }\r\n \r\n   return (\r\n     <div>\r\n       <Paper sx={{ boxShadow: \"none\", backgroundColor: \"transparent\" }}>\r\n"
                },
                {
                    "date": 1744134123984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n \r\n const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading }) => {\r\n   const [globalFilter, setGlobalFilter] = useState(\"\");\r\n   const [selectedAlphabet, setSelectedAlphabet] = useState(\"\");\r\n+  const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n   const [sorting, setSorting] = useState([]);\r\n   const [pagination, setPagination] = useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n"
                },
                {
                    "date": 1744134141963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,27 +174,9 @@\n               </Button>\r\n             ))}\r\n           </ButtonGroup>\r\n         </Box>\r\n-          <Box\r\n-            onClick={() => setSelectedAlphabet(\"\")}\r\n-            sx={{\r\n-              cursor: \"pointer\",\r\n-              fontWeight: !selectedAlphabet ? \"bold\" : \"normal\",\r\n-              color: !selectedAlphabet ? \"#0076bf\" : \"#000\",\r\n-              border: \"1px solid #ccc\",\r\n-              borderRadius: \"5px\",\r\n-              px: 1,\r\n-              py: 0.5,\r\n-              userSelect: \"none\",\r\n-              transition: \"all 0.2s ease\",\r\n-              \"&:hover\": {\r\n-                backgroundColor: \"#f0f0f0\",\r\n-              },\r\n-            }}\r\n-          >\r\n-            View All\r\n-          </Box>\r\n+        \r\n           <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n             <Table stickyHeader>\r\n               <TableHead>\r\n                 {table.getHeaderGroups().map((headerGroup) => (\r\n"
                },
                {
                    "date": 1744134147907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,11 +151,9 @@\n             alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n             gap: 1,\r\n           }}\r\n         >\r\n-          <Typography variant=\"body2\" sx={{ mr: 1 }}>\r\n-            View all:\r\n-          </Typography>\r\n+          \r\n           <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n             {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n               <Button\r\n                 key={letter}\r\n"
                },
                {
                    "date": 1744134372814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n     getSortedRowModel: getSortedRowModel(),\r\n   });\r\n   const filterByAlphabet = (letter) => {\r\n     if (letter === activeAlphabet) {\r\n-      // If clicking the same letter again, clear the filter\r\n+      \r\n       setActiveAlphabet(\"\")\r\n     } else {\r\n       setActiveAlphabet(letter)\r\n     }\r\n"
                },
                {
                    "date": 1744134649718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n-\"use client\";\r\n+\"use client\"\r\n \r\n-import React, { useState, useEffect, useMemo } from \"react\";\r\n+import { useState, useEffect, useMemo } from \"react\"\r\n import {\r\n   useReactTable,\r\n   getCoreRowModel,\r\n   getFilteredRowModel,\r\n   getPaginationRowModel,\r\n   getSortedRowModel,\r\n   flexRender,\r\n-} from \"@tanstack/react-table\";\r\n+} from \"@tanstack/react-table\"\r\n \r\n import {\r\n   Table,\r\n   TableBody,\r\n@@ -23,31 +23,65 @@\n   TableSortLabel,\r\n   Checkbox,\r\n   Box,\r\n   CircularProgress,\r\n-  Typography,\r\n   ButtonGroup,\r\n   Button,\r\n-} from \"@mui/material\";\r\n+} from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading }) => {\r\n-  const [globalFilter, setGlobalFilter] = useState(\"\");\r\n-  const [selectedAlphabet, setSelectedAlphabet] = useState(\"\");\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading, nameColumnId = \"name\" }) => {\r\n+  const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n-  const [sorting, setSorting] = useState([]);\r\n+  const [sorting, setSorting] = useState([])\r\n   const [pagination, setPagination] = useState({\r\n     pageIndex: 0,\r\n     pageSize: 10,\r\n-  });\r\n-  const [rowSelection, setRowSelection] = useState({});\r\n+  })\r\n+  const [rowSelection, setRowSelection] = useState({})\r\n+  const [filteredData, setFilteredData] = useState(data)\r\n \r\n+  // Apply alphabetical filter whenever activeAlphabet changes or data changes\r\n+  useEffect(() => {\r\n+    if (!activeAlphabet) {\r\n+      setFilteredData(data)\r\n+    } else {\r\n+      // Find the name column to filter on\r\n+      const nameColumn = columns.find((col) => col.id === nameColumnId || col.accessorKey === nameColumnId)\r\n+\r\n+      if (nameColumn) {\r\n+        const filtered = data.filter((row) => {\r\n+          let nameValue\r\n+\r\n+          // Handle different ways to access the name value\r\n+          if (nameColumn.accessorFn) {\r\n+            nameValue = nameColumn.accessorFn(row)\r\n+          } else if (nameColumn.accessorKey) {\r\n+            nameValue = row[nameColumn.accessorKey]\r\n+          } else {\r\n+            // Default to first_name + last_name if available\r\n+            nameValue = row.first_name && row.last_name ? `${row.first_name} ${row.last_name}` : row.name || \"\"\r\n+          }\r\n+\r\n+          return nameValue.toString().toUpperCase().startsWith(activeAlphabet)\r\n+        })\r\n+\r\n+        setFilteredData(filtered)\r\n+      } else {\r\n+        setFilteredData(data)\r\n+      }\r\n+    }\r\n+\r\n+    // Reset to first page when changing filters\r\n+    setPagination((prev) => ({ ...prev, pageIndex: 0 }))\r\n+  }, [activeAlphabet, data, columns, nameColumnId])\r\n+\r\n   // Notify parent component when selection changes\r\n   useEffect(() => {\r\n     if (enableCheckbox && onSelectionChange) {\r\n-      const selectedRows = Object.keys(rowSelection).map((index) => data[Number(index)]);\r\n-      onSelectionChange(selectedRows);\r\n+      const selectedRows = Object.keys(rowSelection).map((index) => filteredData[Number(index)])\r\n+      onSelectionChange(selectedRows)\r\n     }\r\n-  }, [rowSelection, data, enableCheckbox]);\r\n+  }, [rowSelection, filteredData, enableCheckbox, onSelectionChange])\r\n \r\n   // Checkbox column\r\n   const checkboxColumn = useMemo(\r\n     () => ({\r\n@@ -67,28 +101,24 @@\n         />\r\n       ),\r\n       size: 40,\r\n     }),\r\n-    []\r\n-  );\r\n+    [],\r\n+  )\r\n \r\n   const tableColumns = useMemo(() => {\r\n-    return enableCheckbox ? [checkboxColumn, ...columns] : columns;\r\n-  }, [columns, enableCheckbox, checkboxColumn]);\r\n+    return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n+  }, [columns, enableCheckbox, checkboxColumn])\r\n \r\n   // Global filter function for all visible columns\r\n   const globalFilterFn = (row, columnId, filterValue) => {\r\n     return row\r\n       .getVisibleCells()\r\n-      .some((cell) =>\r\n-        String(cell.getValue())\r\n-          .toLowerCase()\r\n-          .includes(filterValue.toLowerCase())\r\n-      );\r\n-  };\r\n+      .some((cell) => String(cell.getValue()).toLowerCase().includes(filterValue.toLowerCase()))\r\n+  }\r\n \r\n   const table = useReactTable({\r\n-    data,\r\n+    data: filteredData, // Use the filtered data instead of the original data\r\n     columns: tableColumns,\r\n     state: {\r\n       globalFilter,\r\n       sorting,\r\n@@ -104,18 +134,16 @@\n     getCoreRowModel: getCoreRowModel(),\r\n     getFilteredRowModel: getFilteredRowModel(),\r\n     getPaginationRowModel: getPaginationRowModel(),\r\n     getSortedRowModel: getSortedRowModel(),\r\n-  });\r\n+  })\r\n+\r\n   const filterByAlphabet = (letter) => {\r\n     if (letter === activeAlphabet) {\r\n-      \r\n       setActiveAlphabet(\"\")\r\n     } else {\r\n       setActiveAlphabet(letter)\r\n     }\r\n-    // Reset to first page when changing filters\r\n-    setPagination((prev) => ({ ...prev, pageIndex: 0 }))\r\n   }\r\n \r\n   return (\r\n     <div>\r\n@@ -142,18 +170,17 @@\n               },\r\n             },\r\n           }}\r\n         />\r\n-       <Box\r\n+        <Box\r\n           sx={{\r\n             mb: 2,\r\n             display: \"flex\",\r\n             flexDirection: { xs: \"column\", sm: \"row\" },\r\n             alignItems: { xs: \"flex-start\", sm: \"center\" },\r\n             gap: 1,\r\n           }}\r\n         >\r\n-          \r\n           <ButtonGroup variant=\"outlined\" size=\"small\" sx={{ flexWrap: \"wrap\" }}>\r\n             {Array.from({ length: 26 }, (_, i) => String.fromCharCode(65 + i)).map((letter) => (\r\n               <Button\r\n                 key={letter}\r\n@@ -171,102 +198,106 @@\n                 {letter}\r\n               </Button>\r\n             ))}\r\n           </ButtonGroup>\r\n+          {activeAlphabet && (\r\n+            <Button variant=\"outlined\" size=\"small\" onClick={() => setActiveAlphabet(\"\")} sx={{ ml: 1 }}>\r\n+              Clear Filter\r\n+            </Button>\r\n+          )}\r\n         </Box>\r\n-        \r\n-          <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n-            <Table stickyHeader>\r\n-              <TableHead>\r\n-                {table.getHeaderGroups().map((headerGroup) => (\r\n-                  <TableRow key={headerGroup.id}>\r\n-                    {headerGroup.headers.map((header, index) => (\r\n+\r\n+        <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n+          <Table stickyHeader>\r\n+            <TableHead>\r\n+              {table.getHeaderGroups().map((headerGroup) => (\r\n+                <TableRow key={headerGroup.id}>\r\n+                  {headerGroup.headers.map((header, index) => (\r\n+                    <TableCell\r\n+                      key={header.id}\r\n+                      align=\"left\"\r\n+                      sortDirection={header.column.getIsSorted() || false}\r\n+                      sx={{\r\n+                        minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                        whiteSpace: \"nowrap\",\r\n+                        borderTopLeftRadius: index === 0 ? \"8px\" : 0,\r\n+                        borderTopRightRadius: index === headerGroup.headers.length - 1 ? \"8px\" : 0,\r\n+                      }}\r\n+                    >\r\n+                      {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n+                        flexRender(header.column.columnDef.header, header.getContext())\r\n+                      ) : (\r\n+                        <TableSortLabel\r\n+                          active={!!header.column.getIsSorted()}\r\n+                          direction={header.column.getIsSorted() || \"asc\"}\r\n+                          onClick={header.column.getToggleSortingHandler()}\r\n+                        >\r\n+                          {flexRender(header.column.columnDef.header, header.getContext())}\r\n+                        </TableSortLabel>\r\n+                      )}\r\n+                    </TableCell>\r\n+                  ))}\r\n+                </TableRow>\r\n+              ))}\r\n+            </TableHead>\r\n+\r\n+            <TableBody>\r\n+              {table.getRowModel().rows.length > 0 ? (\r\n+                table.getRowModel().rows.map((row) => (\r\n+                  <TableRow\r\n+                    key={row.id}\r\n+                    hover={enableCheckbox}\r\n+                    onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n+                    selected={row.getIsSelected()}\r\n+                  >\r\n+                    {row.getVisibleCells().map((cell) => (\r\n                       <TableCell\r\n-                        key={header.id}\r\n-                        align=\"left\"\r\n-                        sortDirection={header.column.getIsSorted() || false}\r\n+                        key={cell.id}\r\n                         sx={{\r\n-                          minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                          whiteSpace: \"nowrap\",\r\n-                          borderTopLeftRadius: index === 0 ? \"8px\" : 0,\r\n-                          borderTopRightRadius:\r\n-                            index === headerGroup.headers.length - 1 ? \"8px\" : 0,\r\n+                          minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+                          wordBreak: \"break-word\",\r\n                         }}\r\n                       >\r\n-                        {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n-                          flexRender(header.column.columnDef.header, header.getContext())\r\n-                        ) : (\r\n-                          <TableSortLabel\r\n-                            active={!!header.column.getIsSorted()}\r\n-                            direction={header.column.getIsSorted() || \"asc\"}\r\n-                            onClick={header.column.getToggleSortingHandler()}\r\n-                          >\r\n-                            {flexRender(header.column.columnDef.header, header.getContext())}\r\n-                          </TableSortLabel>\r\n-                        )}\r\n+                        {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n                       </TableCell>\r\n                     ))}\r\n                   </TableRow>\r\n-                ))}\r\n-              </TableHead>\r\n+                ))\r\n+              ) : (\r\n+                <TableRow>\r\n+                  <TableCell colSpan={table.getAllColumns().length}>\r\n+                    <Box py={3} textAlign=\"center\">\r\n+                      {!loading ? (\r\n+                        <strong style={{ fontSize: \"18px\" }}>No Data Found</strong>\r\n+                      ) : (\r\n+                        <CircularProgress sx={{ color: \"#0b0962\" }} size={50} />\r\n+                      )}\r\n+                    </Box>\r\n+                  </TableCell>\r\n+                </TableRow>\r\n+              )}\r\n+            </TableBody>\r\n+          </Table>\r\n+        </TableContainer>\r\n \r\n-              <TableBody>\r\n-                {table.getRowModel().rows.length > 0 ? (\r\n-                  table.getRowModel().rows.map((row) => (\r\n-                    <TableRow\r\n-                      key={row.id}\r\n-                      hover={enableCheckbox}\r\n-                      onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n-                      selected={row.getIsSelected()}\r\n-                    >\r\n-                      {row.getVisibleCells().map((cell) => (\r\n-                        <TableCell\r\n-                          key={cell.id}\r\n-                          sx={{\r\n-                            minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                            wordBreak: \"break-word\",\r\n-                          }}\r\n-                        >\r\n-                          {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n-                        </TableCell>\r\n-                      ))}\r\n-                    </TableRow>\r\n-                  ))\r\n-                ) : (\r\n-                  <TableRow>\r\n-                    <TableCell colSpan={table.getAllColumns().length}>\r\n-                      <Box py={3} textAlign=\"center\">\r\n-                        {!loading ? (\r\n-                          <strong style={{ fontSize: \"18px\" }}>No Data Found</strong>\r\n-                        ) : (\r\n-                          <CircularProgress sx={{ color: \"#0b0962\" }} size={50} />\r\n-                        )}\r\n-                      </Box>\r\n-                    </TableCell>\r\n-                  </TableRow>\r\n-                )}\r\n-              </TableBody>\r\n-            </Table>\r\n-          </TableContainer>\r\n-\r\n-          {table.getFilteredRowModel().rows.length > 0 && (\r\n-            <TablePagination\r\n-              rowsPerPageOptions={[10, 25, 50]}\r\n-              component=\"div\"\r\n-              count={table.getFilteredRowModel().rows.length}\r\n-              rowsPerPage={table.getState().pagination.pageSize}\r\n-              page={table.getState().pagination.pageIndex}\r\n-              onPageChange={(_, newPage) => {\r\n-                table.setPageIndex(newPage);\r\n-              }}\r\n-              onRowsPerPageChange={(e) => {\r\n-                const size = e.target.value ? Number(e.target.value) : 10;\r\n-                table.setPageSize(size);\r\n-              }}\r\n-            />\r\n-          )}\r\n+        {table.getFilteredRowModel().rows.length > 0 && (\r\n+          <TablePagination\r\n+            rowsPerPageOptions={[10, 25, 50]}\r\n+            component=\"div\"\r\n+            count={table.getFilteredRowModel().rows.length}\r\n+            rowsPerPage={table.getState().pagination.pageSize}\r\n+            page={table.getState().pagination.pageIndex}\r\n+            onPageChange={(_, newPage) => {\r\n+              table.setPageIndex(newPage)\r\n+            }}\r\n+            onRowsPerPageChange={(e) => {\r\n+              const size = e.target.value ? Number(e.target.value) : 10\r\n+              table.setPageSize(size)\r\n+            }}\r\n+          />\r\n+        )}\r\n       </Paper>\r\n     </div>\r\n-  );\r\n-};\r\n+  )\r\n+}\r\n \r\n-export default DataTable;\r\n+export default DataTable\r\n"
                },
                {
                    "date": 1744134706910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,13 +198,9 @@\n                 {letter}\r\n               </Button>\r\n             ))}\r\n           </ButtonGroup>\r\n-          {activeAlphabet && (\r\n-            <Button variant=\"outlined\" size=\"small\" onClick={() => setActiveAlphabet(\"\")} sx={{ ml: 1 }}>\r\n-              Clear Filter\r\n-            </Button>\r\n-          )}\r\n+         \r\n         </Box>\r\n \r\n         <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n           <Table stickyHeader>\r\n"
                },
                {
                    "date": 1744197140350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   ButtonGroup,\r\n   Button,\r\n } from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading, nameColumnId = \"name\" }) => {\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading, nameColumnId = \"name\" ,alphabtes}) => {\r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n   const [pagination, setPagination] = useState({\r\n"
                },
                {
                    "date": 1744197149346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   ButtonGroup,\r\n   Button,\r\n } from \"@mui/material\"\r\n \r\n-const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading, nameColumnId = \"name\" ,alphabtes}) => {\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange, loading, nameColumnId = \"name\" ,alphabets}) => {\r\n   const [globalFilter, setGlobalFilter] = useState(\"\")\r\n   const [activeAlphabet, setActiveAlphabet] = useState(\"\")\r\n   const [sorting, setSorting] = useState([])\r\n   const [pagination, setPagination] = useState({\r\n"
                },
                {
                    "date": 1744197193199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n               },\r\n             },\r\n           }}\r\n         />\r\n-        <Box\r\n+        {alphabets && <Box\r\n           sx={{\r\n             mb: 2,\r\n             display: \"flex\",\r\n             flexDirection: { xs: \"column\", sm: \"row\" },\r\n@@ -199,9 +199,9 @@\n               </Button>\r\n             ))}\r\n           </ButtonGroup>\r\n          \r\n-        </Box>\r\n+        </Box>}\r\n \r\n         <TableContainer sx={{ maxHeight: 440, overflowX: \"auto\" }}>\r\n           <Table stickyHeader>\r\n             <TableHead>\r\n"
                }
            ],
            "date": 1743759186148,
            "name": "Commit-0",
            "content": "\"use client\"\r\nimport { MaterialReactTable, useMaterialReactTable } from \"material-react-table\"\r\nimport { Box, IconButton, Tooltip } from \"@mui/material\"\r\nimport { mkConfig, generateCsv, download } from \"@tanstack/csv-utils\"\r\nimport { Button, TableCell } from \"@mui/material\"\r\n\r\nconst DataTable = ({ columns, data, enableGrouping }) => {\r\n  const csvOptions = mkConfig({\r\n    columnHeaders: columns.map((c) => c.header),\r\n    data: data,\r\n  })\r\n\r\n  const handleExportData = () => {\r\n    generateCsv(csvOptions).then((csv) => download(csv, { filename: \"data-table.csv\" }))\r\n  }\r\n\r\n  const table = useMaterialReactTable({\r\n    columns,\r\n    data,\r\n    enableRowSelection: true,\r\n    columnFilterDisplayMode: \"popover\",\r\n    paginationDisplayMode: \"pages\",\r\n    enableGrouping: enableGrouping,\r\n    muiTableProps: {\r\n      sx: {\r\n        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n      },\r\n    },\r\n    muiTableHeadCellProps: {\r\n      sx: {\r\n        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n      },\r\n    },\r\n    muiTableBodyCellProps: {\r\n      sx: {\r\n        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n      },\r\n    },\r\n    renderTopToolbar: ({ table }) => (\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          gap: \"16px\",\r\n          justifyContent: \"flex-end\",\r\n          padding: \"8px\",\r\n        }}\r\n      >\r\n        <Button color=\"primary\" onClick={handleExportData} variant=\"contained\">\r\n          Export Data\r\n        </Button>\r\n      </Box>\r\n    ),\r\n    renderRowActions: ({ row, table }) => (\r\n      <Box sx={{ display: \"flex\", gap: \"1rem\" }}>\r\n        <Tooltip title=\"Edit\">\r\n          <IconButton onClick={() => alert(\"Edit this row\")}>{/* <EditIcon /> */}</IconButton>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton color=\"error\" onClick={() => alert(\"Delete this row\")}>\r\n            {/* <DeleteIcon /> */}\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Box>\r\n    ),\r\n    renderTableHead: ({ table }) => {\r\n      return (\r\n        <thead>\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <tr key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => (\r\n                <TableCell\r\n                  key={header.id}\r\n                  align=\"left\"\r\n                  sortDirection={header.column.getIsSorted()}\r\n                  sx={{\r\n                    minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n                    whiteSpace: \"nowrap\",\r\n                    ...(headerGroup.headers[0].id === header.id && {\r\n                      borderTopLeftRadius: \"8px\",\r\n                    }),\r\n                    ...(headerGroup.headers[headerGroup.headers.length - 1].id === header.id && {\r\n                      borderTopRightRadius: \"8px\",\r\n                    }),\r\n                  }}\r\n                >\r\n                  {header.isPlaceholder ? null : header.column.columnDef.header}\r\n                </TableCell>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n      )\r\n    },\r\n  })\r\n\r\n  return <MaterialReactTable table={table} />\r\n}\r\n\r\nexport default DataTable\r\n\r\n"
        }
    ]
}