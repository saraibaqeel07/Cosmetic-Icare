{
    "sourceFile": "src/components/DataTable.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1743759186148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743759312635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,100 +1,218 @@\n \"use client\"\r\n-import { MaterialReactTable, useMaterialReactTable } from \"material-react-table\"\r\n-import { Box, IconButton, Tooltip } from \"@mui/material\"\r\n-import { mkConfig, generateCsv, download } from \"@tanstack/csv-utils\"\r\n-import { Button, TableCell } from \"@mui/material\"\r\n \r\n-const DataTable = ({ columns, data, enableGrouping }) => {\r\n-  const csvOptions = mkConfig({\r\n-    columnHeaders: columns.map((c) => c.header),\r\n-    data: data,\r\n+import React, { useState, useEffect } from \"react\"\r\n+import {\r\n+  useReactTable,\r\n+  getCoreRowModel,\r\n+  getFilteredRowModel,\r\n+  getPaginationRowModel,\r\n+  getSortedRowModel,\r\n+  flexRender,\r\n+} from \"@tanstack/react-table\"\r\n+\r\n+import {\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableContainer,\r\n+  TableHead,\r\n+  TableRow,\r\n+  Paper,\r\n+  TextField,\r\n+  TablePagination,\r\n+  TableSortLabel,\r\n+  Checkbox,\r\n+  Box,\r\n+} from \"@mui/material\"\r\n+\r\n+const DataTable = ({ data, columns, enableCheckbox = false, onSelectionChange }) => {\r\n+ \r\n+\r\n+  const [globalFilter, setGlobalFilter] = useState(\"\")\r\n+  const [sorting, setSorting] = useState([])\r\n+  const [pagination, setPagination] = useState({\r\n+    pageIndex: 0,\r\n+    pageSize: 10,\r\n   })\r\n+  const [rowSelection, setRowSelection] = useState({})\r\n \r\n-  const handleExportData = () => {\r\n-    generateCsv(csvOptions).then((csv) => download(csv, { filename: \"data-table.csv\" }))\r\n-  }\r\n+  // Notify parent component when selection changes\r\n+  useEffect(() => {\r\n+    if (enableCheckbox && onSelectionChange) {\r\n+      const selectedRows = Object.keys(rowSelection).map((index) => data[Number.parseInt(index)])\r\n+      onSelectionChange(selectedRows)\r\n+    }\r\n+  }, [rowSelection, data, enableCheckbox])\r\n \r\n-  const table = useMaterialReactTable({\r\n-    columns,\r\n+  // Create checkbox column\r\n+  const checkboxColumn = React.useMemo(\r\n+    () => ({\r\n+      id: \"select\",\r\n+      header: ({ table }) => (\r\n+        <Checkbox\r\n+          checked={table.getIsAllRowsSelected()}\r\n+          indeterminate={table.getIsSomeRowsSelected()}\r\n+          onChange={table.getToggleAllRowsSelectedHandler()}\r\n+        />\r\n+      ),\r\n+      cell: ({ row }) => (\r\n+        <Checkbox\r\n+          checked={row.getIsSelected()}\r\n+          onChange={row.getToggleSelectedHandler()}\r\n+          onClick={(e) => e.stopPropagation()}\r\n+        />\r\n+      ),\r\n+      size: 40,\r\n+    }),\r\n+    [],\r\n+  )\r\n+\r\n+  // Add checkbox column if enabled\r\n+  const tableColumns = React.useMemo(() => {\r\n+    return enableCheckbox ? [checkboxColumn, ...columns] : columns\r\n+  }, [columns, enableCheckbox, checkboxColumn])\r\n+\r\n+  const table = useReactTable({\r\n     data,\r\n-    enableRowSelection: true,\r\n-    columnFilterDisplayMode: \"popover\",\r\n-    paginationDisplayMode: \"pages\",\r\n-    enableGrouping: enableGrouping,\r\n-    muiTableProps: {\r\n-      sx: {\r\n-        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n-      },\r\n+    columns: tableColumns,\r\n+    state: {\r\n+      globalFilter,\r\n+      sorting,\r\n+      pagination,\r\n+      rowSelection,\r\n     },\r\n-    muiTableHeadCellProps: {\r\n-      sx: {\r\n-        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n-      },\r\n-    },\r\n-    muiTableBodyCellProps: {\r\n-      sx: {\r\n-        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n-      },\r\n-    },\r\n-    renderTopToolbar: ({ table }) => (\r\n-      <Box\r\n-        sx={{\r\n-          display: \"flex\",\r\n-          gap: \"16px\",\r\n-          justifyContent: \"flex-end\",\r\n-          padding: \"8px\",\r\n-        }}\r\n-      >\r\n-        <Button color=\"primary\" onClick={handleExportData} variant=\"contained\">\r\n-          Export Data\r\n-        </Button>\r\n-      </Box>\r\n-    ),\r\n-    renderRowActions: ({ row, table }) => (\r\n-      <Box sx={{ display: \"flex\", gap: \"1rem\" }}>\r\n-        <Tooltip title=\"Edit\">\r\n-          <IconButton onClick={() => alert(\"Edit this row\")}>{/* <EditIcon /> */}</IconButton>\r\n-        </Tooltip>\r\n-        <Tooltip title=\"Delete\">\r\n-          <IconButton color=\"error\" onClick={() => alert(\"Delete this row\")}>\r\n-            {/* <DeleteIcon /> */}\r\n-          </IconButton>\r\n-        </Tooltip>\r\n-      </Box>\r\n-    ),\r\n-    renderTableHead: ({ table }) => {\r\n-      return (\r\n-        <thead>\r\n-          {table.getHeaderGroups().map((headerGroup) => (\r\n-            <tr key={headerGroup.id}>\r\n-              {headerGroup.headers.map((header) => (\r\n-                <TableCell\r\n-                  key={header.id}\r\n-                  align=\"left\"\r\n-                  sortDirection={header.column.getIsSorted()}\r\n-                  sx={{\r\n-                    minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n-                    whiteSpace: \"nowrap\",\r\n-                    ...(headerGroup.headers[0].id === header.id && {\r\n-                      borderTopLeftRadius: \"8px\",\r\n-                    }),\r\n-                    ...(headerGroup.headers[headerGroup.headers.length - 1].id === header.id && {\r\n-                      borderTopRightRadius: \"8px\",\r\n-                    }),\r\n-                  }}\r\n-                >\r\n-                  {header.isPlaceholder ? null : header.column.columnDef.header}\r\n-                </TableCell>\r\n-              ))}\r\n-            </tr>\r\n-          ))}\r\n-        </thead>\r\n-      )\r\n-    },\r\n+    enableRowSelection: enableCheckbox,\r\n+    onRowSelectionChange: setRowSelection,\r\n+    onGlobalFilterChange: setGlobalFilter,\r\n+    onSortingChange: setSorting,\r\n+    onPaginationChange: setPagination,\r\n+    getCoreRowModel: getCoreRowModel(),\r\n+    getFilteredRowModel: getFilteredRowModel(),\r\n+    getPaginationRowModel: getPaginationRowModel(),\r\n+    getSortedRowModel: getSortedRowModel(),\r\n   })\r\n \r\n-  return <MaterialReactTable table={table} />\r\n+  return (\r\n+    <div >\r\n+      <Paper sx={{ boxShadow: \"none\",backgroundColor:'transparent'}}>\r\n+        <TextField\r\n+          value={globalFilter ?? \"\"}\r\n+          size=\"small\"\r\n+          onChange={(e) => setGlobalFilter(e.target.value)}\r\n+          placeholder=\"Search all columns...\"\r\n+          variant=\"outlined\"\r\n+          sx={{\r\n+            borderRadius: \"12px\",\r\n+            mb:4,\r\n+            \".MuiOutlinedInput-root\": {\r\n+              border: \"2px solid #e0e0e0\",\r\n+              borderRadius: \"12px\",\r\n+              outline: \"none\",\r\n+              transition: \"all 0.2s ease-in-out\",\r\n+              \"& fieldset\": { border: \"none\" },\r\n+              \"&:hover\": {\r\n+                border: \"2px solid #0076bf\",\r\n+              },\r\n+              \"&.Mui-focused\": {\r\n+                border: \"2px solid #0076bf\",\r\n+                \"& fieldset\": { border: \"none\" },\r\n+                svg: {\r\n+                  path: {\r\n+                    fill: \"#0076bf\",\r\n+                  },\r\n+                },\r\n+              },\r\n+            },\r\n+           \r\n+          }}\r\n+        />\r\n+        <TableContainer sx={{ maxHeight: 440, height: \"auto\", overflowX: \"auto\" }}>\r\n+          <Table stickyHeader aria-label=\"sticky table\">\r\n+          <TableHead>\r\n+  {table.getHeaderGroups().map((headerGroup) => (\r\n+    <TableRow key={headerGroup.id}>\r\n+      {headerGroup.headers.map((header, index) => (\r\n+        <TableCell\r\n+          key={header.id}\r\n+          align=\"left\"\r\n+          sortDirection={header.column.getIsSorted()}\r\n+          sx={{\r\n+            minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+            whiteSpace: \"nowrap\",\r\n+            borderTopLeftRadius: index === 0 ? \"8px\" : 0, // First cell\r\n+            borderTopRightRadius: index === headerGroup.headers.length - 1 ? \"8px\" : 0, // Last cell\r\n+            overflow: \"hidden\", // Ensures border-radius applies correctly\r\n+          }}\r\n+        >\r\n+          {header.isPlaceholder ? null : header.column.columnDef.id === \"select\" ? (\r\n+            flexRender(header.column.columnDef.header, header.getContext())\r\n+          ) : (\r\n+            <TableSortLabel\r\n+              active={header.column.getIsSorted() !== false}\r\n+              direction={header.column.getIsSorted() || undefined}\r\n+              onClick={header.column.getToggleSortingHandler()}\r\n+            >\r\n+              {flexRender(header.column.columnDef.header, header.getContext())}\r\n+            </TableSortLabel>\r\n+          )}\r\n+        </TableCell>\r\n+      ))}\r\n+    </TableRow>\r\n+  ))}\r\n+</TableHead>\r\n+\r\n+            <TableBody>\r\n+  {table.getRowModel().rows.length > 0 ? (\r\n+    table.getRowModel().rows.map((row) => (\r\n+      <TableRow\r\n+        key={row.id}\r\n+        hover={enableCheckbox}\r\n+        onClick={enableCheckbox ? () => row.toggleSelected() : undefined}\r\n+        selected={row.getIsSelected()}\r\n+      >\r\n+        {row.getVisibleCells().map((cell) => (\r\n+          <TableCell\r\n+            key={cell.id}\r\n+            sx={{\r\n+              minWidth: cell.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n+              whiteSpace: \"normal\",\r\n+              wordBreak: \"break-word\",\r\n+            }}\r\n+          >\r\n+            {flexRender(cell.column.columnDef.cell, cell.getContext())}\r\n+          </TableCell>\r\n+        ))}\r\n+      </TableRow>\r\n+    ))\r\n+  ) : (\r\n+    <TableRow>\r\n+      <TableCell colSpan={table.getAllColumns().length} sx={{ textAlign: \"center\", fontWeight: \"bold\",fontSize:'23px' }}>\r\n+        No Data Found\r\n+      </TableCell>\r\n+    </TableRow>\r\n+  )}\r\n+</TableBody>\r\n+\r\n+          </Table>\r\n+        </TableContainer>\r\n+        {table.getRowModel().rows.length > 0 && <TablePagination\r\n+          rowsPerPageOptions={[10, 25, 50]}\r\n+          component=\"div\"\r\n+          count={table.getFilteredRowModel().rows.length}\r\n+          rowsPerPage={table.getState().pagination.pageSize}\r\n+          page={table.getState().pagination.pageIndex}\r\n+          onPageChange={(_, newPage) => {\r\n+            table.setPageIndex(newPage)\r\n+          }}\r\n+          onRowsPerPageChange={(e) => {\r\n+            const size = e.target.value ? Number(e.target.value) : 10\r\n+            table.setPageSize(size)\r\n+          }}\r\n+        />}\r\n+      </Paper>\r\n+    </div>\r\n+  )\r\n }\r\n \r\n export default DataTable\r\n \r\n"
                }
            ],
            "date": 1743759186148,
            "name": "Commit-0",
            "content": "\"use client\"\r\nimport { MaterialReactTable, useMaterialReactTable } from \"material-react-table\"\r\nimport { Box, IconButton, Tooltip } from \"@mui/material\"\r\nimport { mkConfig, generateCsv, download } from \"@tanstack/csv-utils\"\r\nimport { Button, TableCell } from \"@mui/material\"\r\n\r\nconst DataTable = ({ columns, data, enableGrouping }) => {\r\n  const csvOptions = mkConfig({\r\n    columnHeaders: columns.map((c) => c.header),\r\n    data: data,\r\n  })\r\n\r\n  const handleExportData = () => {\r\n    generateCsv(csvOptions).then((csv) => download(csv, { filename: \"data-table.csv\" }))\r\n  }\r\n\r\n  const table = useMaterialReactTable({\r\n    columns,\r\n    data,\r\n    enableRowSelection: true,\r\n    columnFilterDisplayMode: \"popover\",\r\n    paginationDisplayMode: \"pages\",\r\n    enableGrouping: enableGrouping,\r\n    muiTableProps: {\r\n      sx: {\r\n        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n      },\r\n    },\r\n    muiTableHeadCellProps: {\r\n      sx: {\r\n        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n      },\r\n    },\r\n    muiTableBodyCellProps: {\r\n      sx: {\r\n        border: \"1px solid rgba(81, 56, 238, 0.2)\",\r\n      },\r\n    },\r\n    renderTopToolbar: ({ table }) => (\r\n      <Box\r\n        sx={{\r\n          display: \"flex\",\r\n          gap: \"16px\",\r\n          justifyContent: \"flex-end\",\r\n          padding: \"8px\",\r\n        }}\r\n      >\r\n        <Button color=\"primary\" onClick={handleExportData} variant=\"contained\">\r\n          Export Data\r\n        </Button>\r\n      </Box>\r\n    ),\r\n    renderRowActions: ({ row, table }) => (\r\n      <Box sx={{ display: \"flex\", gap: \"1rem\" }}>\r\n        <Tooltip title=\"Edit\">\r\n          <IconButton onClick={() => alert(\"Edit this row\")}>{/* <EditIcon /> */}</IconButton>\r\n        </Tooltip>\r\n        <Tooltip title=\"Delete\">\r\n          <IconButton color=\"error\" onClick={() => alert(\"Delete this row\")}>\r\n            {/* <DeleteIcon /> */}\r\n          </IconButton>\r\n        </Tooltip>\r\n      </Box>\r\n    ),\r\n    renderTableHead: ({ table }) => {\r\n      return (\r\n        <thead>\r\n          {table.getHeaderGroups().map((headerGroup) => (\r\n            <tr key={headerGroup.id}>\r\n              {headerGroup.headers.map((header) => (\r\n                <TableCell\r\n                  key={header.id}\r\n                  align=\"left\"\r\n                  sortDirection={header.column.getIsSorted()}\r\n                  sx={{\r\n                    minWidth: header.column.columnDef.id === \"select\" ? \"60px\" : \"150px\",\r\n                    whiteSpace: \"nowrap\",\r\n                    ...(headerGroup.headers[0].id === header.id && {\r\n                      borderTopLeftRadius: \"8px\",\r\n                    }),\r\n                    ...(headerGroup.headers[headerGroup.headers.length - 1].id === header.id && {\r\n                      borderTopRightRadius: \"8px\",\r\n                    }),\r\n                  }}\r\n                >\r\n                  {header.isPlaceholder ? null : header.column.columnDef.header}\r\n                </TableCell>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n      )\r\n    },\r\n  })\r\n\r\n  return <MaterialReactTable table={table} />\r\n}\r\n\r\nexport default DataTable\r\n\r\n"
        }
    ]
}