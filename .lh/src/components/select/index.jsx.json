{
    "sourceFile": "src/components/select/index.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1743863063705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1743863063705,
            "name": "Commit-0",
            "content": "import { Fragment } from \"react\";\r\nimport { Autocomplete, InputLabel, TextField, Typography, createFilterOptions } from \"@mui/material\";\r\nimport { Debounce } from \"../../utils\";\r\n\r\n\r\nfunction SelectField(props) {\r\n\r\n  const { label, size, disabled, onSearch, addNew, multiple, selected, onSelect, register, error, options, fullWidth, newLabel, readOnly } = props\r\n\r\n  const filter = createFilterOptions();\r\n\r\n\r\n  // *For Handle Filter Option\r\n  const handleFilterOptions = (options, params) => {\r\n\r\n    const filtered = filter(options, params);\r\n\r\n\r\n    const { inputValue } = params;\r\n    // *Suggest the creation of a new value\r\n    const isExisting = options.some((option) => inputValue === option.name);\r\n    if (inputValue !== '' && !isExisting && addNew) {\r\n      filtered.push({\r\n        inputValue,\r\n        name: `Add \"${inputValue}\"`,\r\n      });\r\n    }\r\n\r\n    return filtered;\r\n  }\r\n\r\n  // *For Handle Option Label\r\n  const handleOptionLabel = (option) => {\r\n\r\n    // *Value selected with enter, right from the input\r\n    if (typeof option === 'string') {\r\n      return option;\r\n    }\r\n    // *Add new option created dynamically\r\n    if (option.inputValue && addNew) {\r\n      return option.inputValue;\r\n    }\r\n    // *Regular option\r\n    return option.name;\r\n\r\n  }\r\n\r\n  // *For Handle Change\r\n  const handleChange = (newValue) => {\r\n    if (typeof newValue === 'string') {\r\n      onSelect(newValue)\r\n      return\r\n    }\r\n    if (newValue && newValue.inputValue && addNew) {\r\n      addNew(newValue?.inputValue)\r\n      return\r\n    }\r\n    return onSelect(newValue)\r\n  }\r\n\r\n  // *For Handle Search\r\n  const handleSearch = (value) => {\r\n    if (onSearch) {\r\n      Debounce(() => onSearch(value));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <InputLabel sx={{ fontWeight: 'bold', fontSize: '16px', mb: '10px' }} error={error && selected === '' && true}>{label}</InputLabel>\r\n      <Autocomplete\r\n        readOnly={readOnly}\r\n        disabled={disabled}\r\n        size={size}\r\n        fullWidth={fullWidth}\r\n        multiple={multiple}\r\n        isOptionEqualToValue={(option, value) => option?.name === value?.name}\r\n        value={selected}\r\n        options={options}\r\n        filterOptions={(options, params) => handleFilterOptions(options, params)}\r\n        getOptionLabel={(option) => handleOptionLabel(option)}\r\n        onChange={(event, newValue) => handleChange(newValue)}\r\n        onInputChange={(event, newInputValue) => handleSearch(newInputValue)}\r\n        sx={{ mb: !error && 2 }}\r\n        renderOption={(props, option) => <li {...props}>{option.name}</li>}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            sx={{\r\n              '& .MuiOutlinedInput-root': {\r\n                '& fieldset': {\r\n                  border: '1px solid #818181 !important',\r\n                  borderRadius: '12px',\r\n\r\n                }\r\n              }\r\n            }}\r\n            placeholder={newLabel ? newLabel : label}\r\n            error={error}\r\n            {...register}\r\n            InputProps={{\r\n              ...params.InputProps,\r\n              endAdornment: (\r\n                <Fragment>\r\n                  {params.InputProps.endAdornment}\r\n                </Fragment>\r\n              ),\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n      {error && (\r\n        <Typography variant=\"caption\" color=\"error\" sx={{ textAlign: 'left' }}>{error}</Typography>\r\n      )}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default SelectField"
        }
    ]
}