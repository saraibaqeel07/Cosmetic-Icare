{
    "sourceFile": "src/layouts/Dashboard/Pages/CreatePlace.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744118122249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744118122249,
            "name": "Commit-0",
            "content": "import { Autocomplete, Box, Grid, InputLabel, Paper, TextField, Typography } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { Debounce } from \"../../../utils\";\r\nimport InputField from \"../../../components/input\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport SelectField from \"../../../components/select\";\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport { showPromiseToast } from \"../../../components/Toaster\";\r\nimport Lightbox from \"yet-another-react-lightbox\";\r\nimport { Thumbnails } from \"yet-another-react-lightbox/plugins\";\r\nimport \"yet-another-react-lightbox/styles.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { SlideshowLightbox } from 'lightbox.js-react'\r\n\r\n\r\n\r\n\r\nconst CreatePlace = () => {\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const [open, setOpen] = useState(false);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [options, setOptions] = useState([]);\r\n    const navigate = useNavigate()\r\n\r\n    const [selectedType, setSelectedType] = useState(null)\r\n    const [loader, setLoader] = useState(false)\r\n    const [detail, setDetail] = useState(null)\r\n    const [selectedPlace, setSelectedPlace] = useState('')\r\n    const [images, setImages] = useState([])\r\n\r\n\r\n    const getLocation = async (value) => {\r\n        try {\r\n            let params = {\r\n                input: value, // Ensure input is set properly\r\n            };\r\n\r\n            const data = await ApiServices.geoLocation(params);\r\n            console.log(data?.data?.predictions);\r\n\r\n\r\n            setOptions(data?.data?.predictions);\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n\r\n    const getLocationDetail = async (id) => {\r\n        try {\r\n            let params = {\r\n                place_id: id, // Ensure input is set properly\r\n            };\r\n\r\n            const data = await ApiServices.getLocationDetail(params);\r\n            console.log(data?.data?.placeDetails);\r\n            let LocationDetail = await data?.data?.placeDetails\r\n            setDetail(LocationDetail)\r\n            console.log(LocationDetail?.openingHours?.weekdayText?.join(\", \"));\r\n            let newHours = LocationDetail?.openingHours?.weekdayText?.join(\", \")\r\n            setImages(LocationDetail?.pictures?.map(pic => ({ src: pic })) ?? []);\r\n\r\n            setValue('name', LocationDetail?.name)\r\n            setValue('hours', newHours)\r\n            setValue('address', LocationDetail?.address)\r\n            setValue('website', LocationDetail?.website)\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    const CreatePlace = async () => {\r\n        setLoader(true);\r\n        const srcArray = images?.map(item => item.src);\r\n        try {\r\n            let obj = {\r\n                name: getValues('name'),\r\n                website: getValues('website'),\r\n                address: getValues('address'),\r\n                place_id: selectedPlace?.placeId,\r\n                type: selectedType.id,\r\n                latitude: detail?.location?.lat,\r\n                longitude: detail?.location?.lng,\r\n                photos: srcArray,\r\n                opening_hours: getValues('hours')\r\n            };\r\n            console.log(srcArray);\r\n\r\n            const promise = ApiServices.CreatePlace(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Navigate if response is successful\r\n            if (response?.responseCode === 200) {\r\n                navigate(\"/places\"); // Change to your desired route\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    const handleSelect = async (event, newValue) => {\r\n        console.log(newValue);\r\n        setSelectedPlace(newValue)\r\n        getLocationDetail(newValue?.placeId)\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none' }}>\r\n                <Typography variant=\"h5\" sx={{ mb: 4, fontWeight: 500 }}>\r\n                    Create Place\r\n                </Typography>\r\n\r\n\r\n                <Box component={'form'} onSubmit={handleSubmit(CreatePlace)} >\r\n                    {console.log(options)}\r\n\r\n                    <Grid container mt={4} gap={2}>\r\n                        <Grid item xs={5}>\r\n                            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block' }}>\r\n\r\n                                Search Place\r\n                            </InputLabel>\r\n                            <Autocomplete\r\n                                size=\"small\"\r\n                                aria-placeholder=\"Search Place\"\r\n                                disableClearable\r\n                                filterOptions={(options) => options} // Prevents filtering\r\n                                sx={{\r\n                                    border: '2px solid #191d31',\r\n                                    borderRadius: '5px ',\r\n                                    outline: \"none !important\",\r\n                                    mt: 1,\r\n                                    '& fieldset': { border: 'none !important' },\r\n                                    '& .MuiSvgIcon-root':{display:'none'},\r\n                                    \"&.Mui-focused\": {\r\n                                        '& fieldset': { border: 'none !important' },\r\n                                        \"svg\": {\r\n                                            \"path\": {\r\n                                                fill: \"#0076bf\"\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }}\r\n                                onInputChange={(event, newInputValue) => Debounce(() => getLocation(newInputValue))}\r\n                                options={options}\r\n                                getOptionLabel={(option) => option?.description}\r\n                                onChange={handleSelect}\r\n                                renderInput={(params) => (\r\n                                    <TextField {...params} variant=\"outlined\" />\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={5}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Type :*'}\r\n                                options={[\r\n                                    {\r\n                                        \"id\": \"Club\",\r\n                                        \"name\": \"Bar/Club\"\r\n                                    },\r\n                                    {\r\n                                        \"id\": \"Restaurant\",\r\n                                        \"name\": \"Restaurant\"\r\n                                    }\r\n                                ]}\r\n                                selected={selectedType}\r\n                                onSelect={(value) => setSelectedType(value)}\r\n                                error={errors?.type?.message}\r\n                                register={register(\"type\", {\r\n                                    required: 'Please select type.',\r\n                                })}\r\n                            /></Grid>\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Name :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Name\"}\r\n                            error={errors?.name?.message}\r\n                            register={register(\"name\", {\r\n                                required:\r\n                                    \"Please enter your name.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Address :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Address\"}\r\n                            error={errors?.address?.message}\r\n                            register={register(\"address\", {\r\n                                required:\r\n                                    \"Please enter your address.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Website :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Website \"}\r\n                            error={errors?.website?.message}\r\n                            register={register(\"website\", {\r\n                                required:\r\n                                    \"Please enter your website.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Opening Hours :*\"}\r\n                            size={'small'}\r\n                            multiline\r\n                            rows={4}\r\n                            placeholder={\"Opening Hours \"}\r\n                            error={errors?.hours?.message}\r\n                            register={register(\"hours\", {\r\n                                required:\r\n                                    \"Please enter your hours.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                    </Grid>\r\n                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3 }}>\r\n\r\n                        Images :\r\n                    </InputLabel>\r\n                    {images?.length > 0 ? (\r\n                        <SlideshowLightbox className=\" LightBox-Div container grid grid-cols-3 gap-2 mx-auto\">\r\n                            {images.map((image, index) => (\r\n\r\n                                <img key={index} className=\" rounded\" src={image.src} width={'300px'} height={'200px'} alt={`image-${index}`} style={{ borderRadius: '5px', objectFit: 'cover' }} />\r\n                            ))}\r\n                        </SlideshowLightbox>\r\n                    ) : (\r\n                        <p></p>\r\n                    )}\r\n\r\n\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '85%', mt: 2 }}>\r\n                        <PrimaryButton loader={loader} disabled={loader}type={'submit'} title={\"Submit\"} />\r\n                    </Box>\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePlace;\r\n"
        }
    ]
}