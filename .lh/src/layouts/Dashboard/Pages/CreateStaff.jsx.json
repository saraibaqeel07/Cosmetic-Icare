{
    "sourceFile": "src/layouts/Dashboard/Pages/CreateStaff.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744022163057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744022178964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -575,9 +575,9 @@\n                                             mt: 2,\r\n                                         }}\r\n                                     >\r\n                                         <Avatar\r\n-                                            src={imageURL}\r\n+                                            src={import.meta.env.VITE_BASE_URL+imageURL}\r\n                                             alt=\"Profile\"\r\n                                             sx={{\r\n                                                 position: \"relative\",\r\n                                                 width: \"100%\",\r\n"
                },
                {
                    "date": 1744151472001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -633,9 +633,9 @@\n                         </Grid>\r\n                         {/* <Grid item xs={5} display={'flex'} alignItems={'flex-end'}>\r\n               <PrimaryButton onClick={() => SendOtp()} title={\"Update Password\"} />\r\n             </Grid> */}\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item lg={3}  md={4} sm={6} xs={6}mt={2}><InputField\r\n                             label={\"First Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"First Name\"}\r\n                             error={errors?.fname?.message}\r\n@@ -644,9 +644,9 @@\n                                     \"Please enter your fname.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item lg={3}  md={4} sm={6} xs={6}mt={2}><InputField\r\n                             label={\"Last Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Last Name\"}\r\n                             error={errors?.lname?.message}\r\n@@ -655,9 +655,9 @@\n                                     \"Please enter your lname.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item lg={3}  md={4} sm={6} xs={6}mt={2}><InputField\r\n                             label={\"Email :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Email\"}\r\n                             error={errors?.email?.message}\r\n@@ -666,9 +666,9 @@\n                                     \"Please enter your email.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item lg={3}  md={4} sm={6} xs={6}mt={2}><InputField\r\n                             label={\"Phone Number :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Phone Number\"}\r\n                             error={errors?.phone?.message}\r\n@@ -679,9 +679,9 @@\n                             })}\r\n                         /></Grid>\r\n \r\n \r\n-                        <Grid item xs={3} mt={2}>\r\n+                        <Grid item lg={3}  md={4} sm={6} xs={6}mt={2}>\r\n                             <InputField\r\n                                 label={\"Password :*\"}\r\n                                 size={'small'}\r\n                                 type={showPassword ? \"text\" : \"password\"}\r\n@@ -705,9 +705,9 @@\n                                 }}\r\n                             />\r\n                         </Grid>\r\n \r\n-                        <Grid item xs={3} mt={2}>\r\n+                        <Grid item lg={3}  md={4} sm={6} xs={6}mt={2}>\r\n                             <InputField\r\n                                 label={\"Confirm Password :*\"}\r\n                                 size={'small'}\r\n                                 type={showConfirmPassword ? \"text\" : \"password\"}\r\n"
                }
            ],
            "date": 1744022163057,
            "name": "Commit-0",
            "content": "import { useEffect, useRef, useState } from \"react\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Grid, IconButton, InputAdornment, InputLabel, Paper, TextField, Typography } from \"@mui/material\";\r\nimport InputField from \"../../../components/input\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\";\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport OTPInput from \"react-otp-input\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n\r\n\r\nconst CreateStaff = () => {\r\n    const navigate = useNavigate()\r\n    const [userData, setUserData] = useState(null)\r\n    const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset,watch } = useForm();\r\n\r\n\r\n    const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n    const [otp, setOtp] = useState(\"\");\r\n    const [otpError, setOtpError] = useState(false);\r\n    const [timer, setTimer] = useState(30);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [open, setOpen] = useState(false)\r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n \r\n    const [showPassword2, setShowPassword2] = useState(false);\r\n    const [otpToken, setOtpToken] = useState(null)\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n    const {\r\n        register: register4,\r\n        handleSubmit: handleSubmit4,\r\n        setValue: setValue4,\r\n        getValues: getValues4,\r\n        reset: reset4,\r\n        formState: { errors: errors4 },\r\n    } = useForm();\r\n\r\n    // Simulate OTP Submission\r\n    const handleOtpSubmit = () => {\r\n        if (otp.length !== 4) {\r\n            setOtpError(true);\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n            SubmitOTP()\r\n            setStep(2); // Move to reset password step\r\n        }, 2000);\r\n    };\r\n\r\n    // Simulate Reset Password Submission\r\n    const handleResetSubmit = () => {\r\n        if (password !== confirmPassword) {\r\n            alert(\"Passwords do not match!\");\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n            // Close dialog after password reset\r\n        }, 2000);\r\n    };\r\n    const fileInputRef = useRef(null);\r\n\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const [imageURL, setImageURL] = useState()\r\n    const [hovered, setHovered] = useState(false);\r\n\r\n\r\n\r\n\r\n    const handleImageClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n    const handleFileChange = async (e) => {\r\n        try {\r\n            const file = e.target.files[0];\r\n            if (file) {\r\n                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n            }\r\n            const formData = new FormData();\r\n            formData.append(\"document\", e.target.files[0]);\r\n\r\n            const response = await axios.post(\r\n                'https://cosmetic.theappkit.com/api/system/upload',\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                }\r\n            );\r\n\r\n            console.log(response?.data?.data?.path);\r\n\r\n            setImageURL(response?.data?.data?.path);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n    };\r\n    const CreateStaff = async () => {\r\n        setLoader(true);\r\n        try {\r\n            let obj = {\r\n                first_name: getValues('fname'),\r\n                last_name: getValues('lname'),\r\n                email: getValues('email'),\r\n                phone: getValues('phone'),\r\n                password: getValues('password'),\r\n                confirm_password: getValues('confirmPassword'),\r\n                picture: imageURL\r\n\r\n            };\r\n\r\n            const promise = ApiServices.CreateStaff(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Navigate if response is successful\r\n            if (response?.responseCode === 200) {\r\n                console.log(response);\r\n                setImageURL(null)\r\n                navigate('/staff')\r\n\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            showErrorToast(error)\r\n        } finally {\r\n    \r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    const SendOtp = async (val) => {\r\n        if (val != 'resend') {\r\n            setIsLoading(true)\r\n        }\r\n\r\n\r\n        setTimer(60);\r\n        try {\r\n            let obj = {\r\n                email: userData?.email\r\n            };\r\n\r\n            const data = await ApiServices.SendOtp(obj);\r\n            console.log(data);\r\n            if (data.responseCode == 206) {\r\n                setOtp('')\r\n                showSuccessToast('Otp Sent Successfully')\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n\r\n            console.log(error)\r\n        }\r\n        finally {\r\n            setIsLoading(false)\r\n            setStep(1)\r\n            setOpen(true)\r\n\r\n        }\r\n    }\r\n\r\n    const UpdatePassword = async (sendData, result) => {\r\n        setIsLoading(true)\r\n        console.log(otpToken, \"otpToken2\");\r\n        try {\r\n            let obj = {\r\n                otp_token: otpToken,\r\n                email: userData?.email,\r\n                password: getValues4('password'),\r\n                confirm_password: getValues4('confirmPassword'),\r\n            };\r\n\r\n            const data = await ApiServices.SendOtp(obj);\r\n            console.log(data);\r\n            if (data.responseCode == 200) {\r\n                setOtp('')\r\n\r\n                reset4()\r\n                setConfirmPassword(false)\r\n\r\n\r\n\r\n            }\r\n        } catch (error) {\r\n            setOtpError(true)\r\n        }\r\n        finally {\r\n            setIsLoading(false)\r\n            setOpen(false)\r\n            showSuccessToast('Password Reset Successfully')\r\n        }\r\n    };\r\n\r\n    const SubmitOTP = async (val) => {\r\n\r\n        setIsLoading(true)\r\n\r\n\r\n\r\n        try {\r\n            let obj = {\r\n                email: userData?.email,\r\n                otp: otp,\r\n            };\r\n\r\n            const data = await ApiServices.SendOtp(obj);\r\n            console.log(data?.data, 'tesetttt');\r\n            if (data.responseCode == 206) {\r\n                console.log(data);\r\n                setOtpToken(data?.data?.otp_token)\r\n\r\n\r\n            }\r\n        } catch (error) {\r\n            setOtpError(true)\r\n        }\r\n        finally {\r\n            setIsLoading(false)\r\n\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        let interval;\r\n        if (timer > 0) {\r\n            interval = setInterval(() => {\r\n                setTimer((prev) => prev - 1);\r\n            }, 1000);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [timer]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={() => setOpen(false)} fullWidth maxWidth=\"sm\">\r\n\r\n                <DialogContent>\r\n                    {step === 1 ? (\r\n                        // OTP Verification Step\r\n                        <Box>\r\n                            <Typography\r\n                                className=\"heading-font\"\r\n                                variant=\"h5\"\r\n                                mb={2}\r\n                                sx={{\r\n                                    fontWeight: \"bold\",\r\n                                    textAlign: \"center\",\r\n\r\n\r\n                                }}\r\n                            >\r\n                                Enter OTP\r\n                            </Typography>\r\n                            <div className=\"otp-container\" style={{ display: \"flex\", justifyContent: \"center\", gap: \"8px\" }}>\r\n                                <OTPInput\r\n                                    value={otp}\r\n                                    onChange={(otp) => {\r\n                                        setOtp(otp);\r\n                                        setOtpError(false);\r\n                                    }}\r\n                                    numInputs={4}\r\n                                    renderSeparator={<span className=\"separator\">-</span>}\r\n                                    renderInput={(props) => (\r\n                                        <input\r\n                                            className=\"otp-input\"\r\n                                            {...props}\r\n                                            style={{\r\n                                                width: \"40px\",\r\n                                                height: \"40px\",\r\n                                                textAlign: \"center\",\r\n                                                fontSize: \"18px\",\r\n                                                border: \"1px solid #ccc\",\r\n                                                borderRadius: \"5px\",\r\n                                            }}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </div>\r\n                            {otpError && (\r\n                                <span style={{ color: \"red\", marginTop: \"5px\", fontSize: \"12px\" }}>\r\n                                    &nbsp; OTP is Invalid\r\n                                </span>\r\n                            )}\r\n                            <div\r\n                                style={{\r\n                                    display: \"flex\",\r\n                                    justifyContent: \"space-between\",\r\n                                    alignItems: \"center\",\r\n                                    marginTop: \"10px\",\r\n                                }}\r\n                            >\r\n                                <span style={{ fontSize: \"14px\", color: \"#6B7280\" }}>Resend OTP in {timer}s</span>\r\n                                <Button\r\n                                    variant=\"text\"\r\n                                    disabled={timer > 0}\r\n                                    onClick={() => SendOtp('resend')}\r\n                                    sx={{\r\n                                        fontSize: \"14px\",\r\n                                        textTransform: \"capitalize\",\r\n                                        color: timer > 0 ? \"#9CA3AF\" : \"#0EA5EA\",\r\n                                    }}\r\n                                >\r\n                                    Resend\r\n                                </Button>\r\n                            </div>\r\n                            <Button\r\n                                onClick={handleOtpSubmit}\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                sx={{\r\n                                    background: \"#18A5C3\",\r\n                                    color: \"white\",\r\n                                    borderRadius: \"8px\",\r\n                                    textTransform: \"capitalize\",\r\n                                    p: \"14px 40px\",\r\n                                    mt: 2,\r\n                                }}\r\n                                disabled={isLoading || otp.length !== 4}\r\n                            >\r\n                                {isLoading ? <CircularProgress size={24} sx={{ color: \"black\" }} /> : \"Submit\"}\r\n                            </Button>\r\n                        </Box>\r\n                    ) : (\r\n                        // Reset Password Step\r\n                        <Box sx={{ width: \"100%\" }} component={'form'} onSubmit={handleSubmit4(UpdatePassword)}>\r\n                            <Typography\r\n                                className=\"heading-font\"\r\n                                variant=\"h5\"\r\n                                mb={2}\r\n                                sx={{\r\n                                    fontWeight: \"bold\",\r\n                                    textAlign: \"center\",\r\n\r\n\r\n                                }}\r\n                            >\r\n                                Reset Password\r\n                            </Typography>\r\n                            {/* Password Field */}\r\n                            <TextField\r\n                                fullWidth\r\n                                placeholder=\"Password\"\r\n                                variant=\"outlined\"\r\n\r\n                                type={showPassword ? \"text\" : \"password\"}\r\n                                {...register4(\"password\", {\r\n                                    required: \"Password is required\",\r\n                                })}\r\n                                error={!!errors4.password}\r\n                                helperText={\r\n                                    errors4.password ? errors4.password.message : \"\"\r\n                                }\r\n                                InputProps={{\r\n\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowPassword(!showPassword)}\r\n                                                edge=\"end\"\r\n                                                sx={{\r\n                                                    \":focus\": {\r\n                                                        outline: \"none !important\"\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {showPassword ? (\r\n                                                    <VisibilityIcon\r\n                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <VisibilityOffIcon\r\n                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n                                                    />\r\n                                                )}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                    style: {\r\n                                        color: \"#0F172A\",\r\n                                        fontSize: \"16px\",\r\n                                        borderRadius: 8, // Rounded corners\r\n                                    },\r\n                                }}\r\n                                sx={{\r\n                                    my: 1,\r\n                                    backgroundColor: \"#1E1E1E\", // Dark background color\r\n                                    \"& .MuiOutlinedInput-root\": {\r\n                                        backgroundColor: \"white\",\r\n                                        \"& fieldset\": { borderColor: \"rgb(182, 182, 182)\" }, // Blue border\r\n                                        \"&:hover fieldset\": { borderColor: \"rgb(182, 182, 182)\" },\r\n                                        \"&.Mui-focused fieldset\": {\r\n                                            borderColor: \"rgb(182, 182, 182)\",\r\n                                        },\r\n                                    },\r\n                                    \"&.MuiFormControl-fullWidth\": {\r\n                                        background: \"transparent !important\",\r\n                                        borderRadius: '10px !important'\r\n                                    },\r\n                                    \"& .MuiInputLabel-root\": { color: \"black\" },\r\n                                    \"& .MuiInputLabel-root.Mui-focused\": { color: \"black\" },\r\n                                }}\r\n                            />\r\n\r\n                            {/* Confirm Password Field */}\r\n                            <TextField\r\n                                fullWidth\r\n                                placeholder=\"Confirm Password\"\r\n\r\n                                variant=\"outlined\"\r\n                                type={showPassword2 ? \"text\" : \"password\"}\r\n                                {...register4(\"confirmPassword\", {\r\n                                    required: \"Confirm Password is required\",\r\n                                    validate: (value) =>\r\n                                        value === getValues4(\"password\") ||\r\n                                        \"Passwords do not match\",\r\n                                })}\r\n                                error={!!errors4.confirmPassword}\r\n                                helperText={\r\n                                    errors4.confirmPassword\r\n                                        ? errors4.confirmPassword.message\r\n                                        : \"\"\r\n                                }\r\n                                InputProps={{\r\n\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowPassword2(!showPassword2)}\r\n                                                edge=\"end\"\r\n                                                sx={{\r\n                                                    \":focus\": {\r\n                                                        outline: \"none !important\"\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {showPassword2 ? (\r\n                                                    <VisibilityIcon\r\n                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <VisibilityOffIcon\r\n                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n                                                    />\r\n                                                )}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                    style: {\r\n                                        color: \"#0F172A\",\r\n                                        fontSize: \"16px\",\r\n                                        borderRadius: 8, // Rounded corners\r\n                                    },\r\n                                }}\r\n                                sx={{\r\n                                    my: 1,\r\n                                    backgroundColor: \"#1E1E1E\", // Dark background color\r\n                                    \"& .MuiOutlinedInput-root\": {\r\n                                        backgroundColor: \"white\",\r\n                                        \"& fieldset\": { borderColor: \"rgb(182, 182, 182)\" }, // Blue border\r\n                                        \"&:hover fieldset\": { borderColor: \"rgb(182, 182, 182)\" },\r\n                                        \"&.Mui-focused fieldset\": {\r\n                                            borderColor: \"rgb(182, 182, 182)\",\r\n                                        },\r\n                                    },\r\n                                    \"&.MuiFormControl-fullWidth\": {\r\n                                        background: \"transparent !important\",\r\n                                        borderRadius: '10px !important'\r\n                                    },\r\n                                    \"& .MuiInputLabel-root\": { color: \"black\" },\r\n                                    \"& .MuiInputLabel-root.Mui-focused\": { color: \"black\" },\r\n                                }}\r\n                            />\r\n\r\n                            <Button\r\n                                type={\"submit\"}\r\n                                fullWidth\r\n                                variant={\"contained\"}\r\n                                sx={{\r\n                                    background: \" #18A5C3\",\r\n                                    color: 'white',\r\n                                    borderRadius: \"8px\",\r\n                                    mt: 2,\r\n                                    textTransform: 'capitalize',\r\n                                    p: \"14px 40px\",\r\n                                    \"&.Mui-disabled\": {\r\n                                        background: \"#337DBD\",\r\n                                    },\r\n                                }}\r\n                                disabled={isLoading}\r\n                            >\r\n                                {isLoading ? (\r\n                                    <CircularProgress\r\n                                        sx={{\r\n                                            \"&.MuiCircularProgress-root\": {\r\n                                                width: \"26px !important\",\r\n                                                height: \"26px !important\",\r\n                                            },\r\n                                            color: 'black',\r\n                                        }}\r\n                                    />\r\n                                ) : (\r\n                                    \"Submit\"\r\n                                )}\r\n                            </Button>\r\n                        </Box>\r\n                    )}\r\n                </DialogContent>\r\n            </Dialog>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none',backgroundColor:'#ffff',borderRadius:'12px' }}>\r\n\r\n\r\n\r\n                <Box component={'form'} p={3} sx={{borderRadius:'12px'}} onSubmit={handleSubmit(CreateStaff)} >\r\n\r\n\r\n                    <Grid container mt={4} spacing={2}>\r\n\r\n                        <Grid item xs={10}>\r\n                            <InputLabel sx={{\r\n                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n\r\n                                fontSize: \"14px\",\r\n                                color: \"#333\",\r\n                                marginBottom: \"4px\",\r\n                            }}>\r\n\r\n                                Profile Picture :*\r\n                            </InputLabel>\r\n\r\n                            <Controller\r\n                                name=\"image\"\r\n                                control={control}\r\n                                rules={{ required: \"Profile picture is required\" }}\r\n                                render={() => (\r\n                                    <Box\r\n                                        component={\"div\"}\r\n                                        onMouseEnter={() => setHovered(true)}\r\n                                        onMouseLeave={() => setHovered(false)}\r\n                                        sx={{\r\n                                            position: \"relative\",\r\n                                            width: 75,\r\n                                            height: 75,\r\n                                            mt: 2,\r\n                                        }}\r\n                                    >\r\n                                        <Avatar\r\n                                            src={imageURL}\r\n                                            alt=\"Profile\"\r\n                                            sx={{\r\n                                                position: \"relative\",\r\n                                                width: \"100%\",\r\n                                                height: \"100%\",\r\n                                                borderRadius: \"50%\",\r\n                                                fontSize: 24,\r\n                                                backgroundColor: imageURL ? \"\" : \"#0EA5EA\",\r\n                                                color: \"white\",\r\n                                                cursor: \"pointer\",\r\n                                                objectFit: \"cover\",\r\n                                                textTransform: \"capitalize\",\r\n                                            }}\r\n                                            onClick={handleImageClick}\r\n                                        />\r\n\r\n                                        {hovered && <IconButton\r\n                                            sx={{\r\n                                                position: \"absolute\",\r\n                                                top: \"0\",\r\n                                                left: \"0\",\r\n                                                width: \"100%\",\r\n                                                padding: \"9px 15px\",\r\n                                                color: \"white\",\r\n                                                backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n                                                borderRadius: \"50%\",\r\n                                                display: \"block\",\r\n                                                \"&:hover\": {\r\n                                                    backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n                                                },\r\n                                            }}\r\n                                            onClick={handleImageClick}\r\n                                        >\r\n                                            <UploadIcon />\r\n                                            <Box sx={{ fontSize: \"12px\" }}>Upload Image</Box>\r\n                                        </IconButton>}\r\n\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            ref={fileInputRef}\r\n                                            style={{ display: \"none\" }}\r\n                                            onChange={handleFileChange}\r\n                                            accept=\"image/*\"\r\n                                        />\r\n                                    </Box>\r\n                                )}\r\n                            />\r\n\r\n                            {(errors.image && !imageURL) && (\r\n                                <Typography sx={{ color: \"red\", fontSize: \"12px\", mt: 1 }}>\r\n                                    {errors.image.message}\r\n                                </Typography>\r\n                            )}\r\n                        </Grid>\r\n                        {/* <Grid item xs={5} display={'flex'} alignItems={'flex-end'}>\r\n              <PrimaryButton onClick={() => SendOtp()} title={\"Update Password\"} />\r\n            </Grid> */}\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"First Name :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"First Name\"}\r\n                            error={errors?.fname?.message}\r\n                            register={register(\"fname\", {\r\n                                required:\r\n                                    \"Please enter your fname.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Last Name :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Last Name\"}\r\n                            error={errors?.lname?.message}\r\n                            register={register(\"lname\", {\r\n                                required:\r\n                                    \"Please enter your lname.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Email :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Email\"}\r\n                            error={errors?.email?.message}\r\n                            register={register(\"email\", {\r\n                                required:\r\n                                    \"Please enter your email.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Phone Number :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Phone Number\"}\r\n                            error={errors?.phone?.message}\r\n                            register={register(\"phone\", {\r\n                                required:\r\n                                    \"Please enter your phone.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n\r\n                        <Grid item xs={3} mt={2}>\r\n                            <InputField\r\n                                label={\"Password :*\"}\r\n                                size={'small'}\r\n                                type={showPassword ? \"text\" : \"password\"}\r\n                                placeholder={\"Enter Password\"}\r\n                                error={errors?.password?.message}\r\n                                register={register(\"password\", {\r\n                                    required: \"Please enter a password.\",\r\n                                    minLength: {\r\n                                        value: 6,\r\n                                        message: \"Password must be at least 6 characters long.\"\r\n                                    }\r\n                                })}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                                                {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={3} mt={2}>\r\n                            <InputField\r\n                                label={\"Confirm Password :*\"}\r\n                                size={'small'}\r\n                                type={showConfirmPassword ? \"text\" : \"password\"}\r\n                                placeholder={\"Confirm Password\"}\r\n                                error={errors?.confirmPassword?.message}\r\n                                register={register(\"confirmPassword\", {\r\n                                    required: \"Please confirm your password.\",\r\n                                    validate: (value) => value === watch(\"password\") || \"Passwords do not match.\"\r\n                                })}\r\n                                InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton onClick={() => setShowConfirmPassword(!showConfirmPassword)} edge=\"end\">\r\n                                                {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n\r\n\r\n\r\n                    </Grid>\r\n\r\n\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                    </Box>\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateStaff\r\n"
        }
    ]
}