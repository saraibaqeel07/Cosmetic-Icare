{
    "sourceFile": "src/layouts/Dashboard/Pages/CreateJob.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744118122096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744118122096,
            "name": "Commit-0",
            "content": "import { Avatar, Box, CircularProgress, Grid, IconButton, InputLabel, Paper, Typography } from \"@mui/material\";\r\nimport { useRef, useState } from \"react\";\r\nimport ApiServices from \"../../../services/Apis\";\r\n\r\nimport InputField from \"../../../components/input\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\n\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport { showPromiseToast } from \"../../../components/Toaster\";\r\n\r\nimport \"yet-another-react-lightbox/styles.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport axios from \"axios\";\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\n\r\n\r\n\r\nconst CreateJob = () => {\r\n    const { register, control, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n\r\n    const [imageLoader, setImageLoader] = useState(false)\r\n    const navigate = useNavigate()\r\n    const fileInputRef = useRef(null);\r\n\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const [imageURL, setImageURL] = useState()\r\n    const [hovered, setHovered] = useState(false);\r\n\r\n\r\n\r\n\r\n    const handleImageClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n    const handleFileChange = async (e) => {\r\n        setImageLoader(true)\r\n        try {\r\n            const file = e.target.files[0];\r\n            if (file) {\r\n                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n            }\r\n            const formData = new FormData();\r\n            formData.append(\"document\", e.target.files[0]);\r\n\r\n            const response = await axios.post(\r\n                ' https://server.naesminc.org/api/system/upload',\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                }\r\n            );\r\n\r\n            console.log(response?.data?.data?.path);\r\n\r\n            setImageURL('https://server.naesminc.org' + response?.data?.data?.path);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n        finally {\r\n            setImageLoader(false)\r\n        }\r\n    };\r\n\r\n    const CreateJob = async () => {\r\n        setLoader(true);\r\n        try {\r\n            let obj = {\r\n                name: getValues('name'),\r\n\r\n                location: getValues('location'),\r\n                description: getValues('description'),\r\n                link: getValues('link'),\r\n                picture: imageURL,\r\n\r\n            };\r\n\r\n            const promise = ApiServices.CreateJob(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Navigate if response is successful\r\n            if (response?.responseCode === 200) {\r\n                navigate(\"/jobs\"); // Change to your desired route\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none' }}>\r\n                <Typography variant=\"h5\" sx={{ mb: 4, fontWeight: 500 }}>\r\n                    Create Job\r\n                </Typography>\r\n\r\n\r\n                <Box component={'form'} onSubmit={handleSubmit(CreateJob)} >\r\n\r\n\r\n                    <Grid container mt={4} gap={2}>\r\n\r\n                        {/* <Grid item xs={12}>\r\n                            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block' }}>\r\n\r\n                                Profile Picture :*\r\n                            </InputLabel>\r\n\r\n                            <Controller\r\n                                name=\"image\"\r\n                                control={control}\r\n                                rules={{ required: \"Profile picture is required\" }}\r\n                                render={() => (\r\n                                    <Box\r\n                                        component={\"div\"}\r\n                                        onMouseEnter={() => setHovered(true)}\r\n                                        onMouseLeave={() => setHovered(false)}\r\n                                        sx={{\r\n                                            position: \"relative\",\r\n                                            width: 75,\r\n                                            height: 75,\r\n                                            mt: 2,\r\n                                        }}\r\n                                    >\r\n                                        <Avatar\r\n                                            src={imageURL}\r\n                                            alt=\"Profile\"\r\n                                            sx={{\r\n                                                position: \"relative\",\r\n                                                width: \"100%\",\r\n                                                height: \"100%\",\r\n                                                borderRadius: \"50%\",\r\n                                                fontSize: 24,\r\n                                                backgroundColor: imageURL ? \"\" : \"#0EA5EA\",\r\n                                                color: \"white\",\r\n                                                cursor: \"pointer\",\r\n                                                objectFit: \"cover\",\r\n                                                textTransform: \"capitalize\",\r\n                                            }}\r\n                                            onClick={handleImageClick}\r\n                                        />\r\n\r\n                                        {hovered && <IconButton\r\n                                            sx={{\r\n                                                position: \"absolute\",\r\n                                                top: \"0\",\r\n                                                left: \"0\",\r\n                                                width: \"100%\",\r\n                                                padding: \"9px 15px\",\r\n                                                color: \"white\",\r\n                                                backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n                                                borderRadius: \"50%\",\r\n                                                display: \"block\",\r\n                                                \"&:hover\": {\r\n                                                    backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n                                                },\r\n                                            }}\r\n                                            onClick={handleImageClick}\r\n                                        >\r\n                                            <UploadIcon />\r\n                                            <Box sx={{ fontSize: \"12px\" }}>Upload Image</Box>\r\n                                        </IconButton>}\r\n\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            ref={fileInputRef}\r\n                                            style={{ display: \"none\" }}\r\n                                            onChange={handleFileChange}\r\n                                            accept=\"image/*\"\r\n                                        />\r\n                                    </Box>\r\n                                )}\r\n                            />\r\n\r\n                            {(errors.image && !imageURL) && (\r\n                                <Typography sx={{ color: \"red\", fontSize: \"12px\", mt: 1 }}>\r\n                                    {errors.image.message}\r\n                                </Typography>\r\n                            )}\r\n                        </Grid> */}\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Title :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Title\"}\r\n                            error={errors?.name?.message}\r\n                            register={register(\"name\", {\r\n                                required:\r\n                                    \"Please enter your name.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        {/* <Grid item xs={5}><InputField\r\n                            label={\"Location :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Location\"}\r\n                            error={errors?.location?.message}\r\n                            register={register(\"location\", {\r\n                                required:\r\n                                    \"Please enter your location.\"\r\n\r\n                            })}\r\n                        /></Grid> */}\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Link :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Link\"}\r\n                            error={errors?.link?.message}\r\n                            register={register(\"link\", {\r\n                                required:\r\n                                    \"Please enter your link.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={10.2}><InputField\r\n                            label={\"Description :*\"}\r\n                            size={'small'}\r\n                            multiline\r\n                            rows={4}\r\n                            placeholder={\"Description \"}\r\n                            error={errors?.description?.message}\r\n                            register={register(\"description\", {\r\n                                required:\r\n                                    \"Please enter your description.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n\r\n                        <Grid item xs={12} sm={5}>\r\n                            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 2 }}>\r\n\r\n                                Upload  Image :\r\n                            </InputLabel>\r\n\r\n                            <Controller\r\n                                name=\"media\"\r\n                                control={control}\r\n                                rules={{\r\n                                    required: false,\r\n                                    validate: (value) => {\r\n                                        if (!value || value.length === 0) {\r\n                                            return false;\r\n                                        }\r\n                                        for (let i = 0; i < value.length; i++) {\r\n                                            if (value[i].size > 10 * 1024 * 1024) { // Increased limit to 10MB\r\n                                                return \"Each file must be smaller than 10MB\";\r\n                                            }\r\n                                            if (![\"image/\", \"audio/\", \"video/\"].some(type => value[i].type.startsWith(type))) {\r\n                                                return \"Only images, audio, and videos are allowed\";\r\n                                            }\r\n                                        }\r\n                                        return true;\r\n                                    },\r\n                                }}\r\n                                render={({ field: { onChange } }) => (\r\n                                    <>\r\n                                        <Box\r\n                                            sx={{\r\n                                                border: \"2px dashed #0EA5EA\",\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                textAlign: \"center\",\r\n                                                cursor: \"pointer\",\r\n                                                backgroundColor: \"#f9f9f9\",\r\n                                                height: '135px',\r\n                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                            }}\r\n                                            onClick={() => document.getElementById(\"upload-media\").click()}\r\n                                        >\r\n                                            {!imageLoader ? (\r\n                                                <>\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        accept=\"image/*\"\r\n\r\n                                                        style={{ display: \"none\" }}\r\n                                                        id=\"upload-media\"\r\n                                                        onChange={(e) => {\r\n                                                            const files = Array.from(e.target.files);\r\n                                                            onChange(files); // Update react-hook-form\r\n                                                            handleFileChange(e); // Handle upload logic\r\n                                                        }}\r\n                                                    />\r\n                                                    <CloudUploadIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n                                                        Drag & drop or click to upload image\r\n                                                    </Typography>\r\n                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n                                                        Allowed: Image (Max 10MB)\r\n                                                    </Typography>\r\n                                                </>\r\n                                            ) : (\r\n                                                <CircularProgress size={90} />\r\n                                            )}\r\n                                        </Box>\r\n\r\n                                        {errors.media && (\r\n                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n                                                {errors.media.message}\r\n                                            </Typography>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            />\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        </Grid>\r\n                        {imageURL && <Grid item xs={5} >\r\n                            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block' }}>\r\n\r\n                                 Picture :\r\n                            </InputLabel>\r\n                            <Box display={'flex'} justifyContent={'center'} alignItems={'center'}>\r\n\r\n                            \r\n                            <Box component={'img'} mt={1.5} src={imageURL} width={'180px'} height={'180px'}>\r\n\r\n                            </Box>\r\n                            </Box>\r\n                        </Grid>}\r\n\r\n                    </Grid>\r\n\r\n\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '85%', mt: 2 }}>\r\n                        <PrimaryButton loader={loader} disabled={loader}type={'submit'} title={\"Submit\"} />\r\n                    </Box>\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateJob;\r\n"
        }
    ]
}