{
    "sourceFile": "src/layouts/Dashboard/Pages/Appoinments.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744118122248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744118122248,
            "name": "Commit-0",
            "content": "\r\nimport {\r\n\r\n    Paper,\r\n\r\n    Typography,\r\n    Button,\r\n    Box,\r\n    IconButton,\r\n    CircularProgress, // Import TableSortLabel\r\n} from \"@mui/material\"\r\nimport DataTable from \"../../../components/DataTable\"\r\nimport { Calendar } from 'rsuite';\r\nimport \"rsuite/Calendar/styles/index.css\";\r\nimport \"rsuite/dist/rsuite-no-reset.min.css\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport NorthEastIcon from '@mui/icons-material/NorthEast';\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst Appointments = () => {\r\n    const [selectedMonth, setSelectedMonth] = useState()\r\n    const [selectedDate, setSelectedDate] = useState(null)\r\n    const [excludedDays, setExcludedDays] = useState([])\r\n    const [appointmentsDates, setAppointmentsDates] = useState([])\r\n    const [loader, setLoader] = useState(false)\r\n    const [data, setData] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n\r\n    const renderCell = (date) => {\r\n        // Convert the date to YYYY-MM-DD format in the local timezone\r\n        const formattedDate = date.getFullYear() +\r\n            \"-\" + String(date.getMonth() + 1).padStart(2, \"0\") +\r\n            \"-\" + String(date.getDate()).padStart(2, \"0\");\r\n\r\n        if (appointmentsDates.includes(formattedDate)) {\r\n            return (\r\n                <div style={{ position: \"relative\" }}>\r\n                    <span\r\n                        style={{\r\n                            width: \"10px\",\r\n                            height: \"10px\",\r\n                            backgroundColor: \"red\",\r\n                            borderRadius: \"50%\",\r\n                            position: \"absolute\",\r\n                            top: \"3px\",\r\n                            left: \"50%\",\r\n                            transform: \"translateX(-50%)\",\r\n                        }}\r\n                    />\r\n                </div>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    // // Dummy data\r\n    // const data = [\r\n    //     { id: 1, firstName: \"John\", lastName: \"Doe\", age: 30, city: \"New York\" },\r\n    //     { id: 2, firstName: \"Jane\", lastName: \"Smith\", age: 25, city: \"Los Angeles\" },\r\n    //     { id: 3, firstName: \"Bob\", lastName: \"Johnson\", age: 35, city: \"Chicago\" },\r\n    //     { id: 4, firstName: \"Alice\", lastName: \"Brown\", age: 28, city: \"Houston\" },\r\n    //     { id: 5, firstName: \"Charlie\", lastName: \"Davis\", age: 42, city: \"Phoenix\" },\r\n    //     { id: 6, firstName: \"Eva\", lastName: \"Wilson\", age: 31, city: \"Philadelphia\" },\r\n    //     { id: 7, firstName: \"Frank\", lastName: \"Moore\", age: 29, city: \"San Antonio\" },\r\n    //     { id: 8, firstName: \"Grace\", lastName: \"Taylor\", age: 36, city: \"San Diego\" },\r\n    //     { id: 9, firstName: \"Henry\", lastName: \"Anderson\", age: 41, city: \"Dallas\" },\r\n    //     { id: 10, firstName: \"Ivy\", lastName: \"Thomas\", age: 27, city: \"San Jose\" },\r\n    // ]\r\n\r\n    // Column definitions with sorting\r\n    const columns = [\r\n        {\r\n            header: \"Appointment Date\",\r\n            accessorKey: \"firstName\",\r\n            cell: ({ row }) => (\r\n                <Box>\r\n                    {moment(row?.original?.date).format('MM-DD-YYYY')}\r\n                </Box>\r\n            ),\r\n        },\r\n        {\r\n            header: \"Time\",\r\n            accessorKey: \"timeslot\",\r\n        },\r\n        {\r\n            header: \"Client Name\",\r\n            accessorKey: \"name\",\r\n            cell: ({ row }) => (\r\n                <Box>\r\n                    {row?.original?.first_name + \" \" + row?.original?.last_name}\r\n                </Box>\r\n            ),\r\n        },\r\n        {\r\n            header: \"Mobile No.\",\r\n            accessorKey: \"mobile\",\r\n        },\r\n        {\r\n            header: \"PIN\",\r\n            accessorKey: \"pin\",\r\n        },\r\n\r\n        {\r\n            header: \"Actions\",\r\n            cell: ({ row }) => (\r\n\r\n                <Box component={'div'} variant=\"contained\" color=\"primary\" sx={{ cursor: 'pointer' }} >\r\n                    <IconButton onClick={() => { navigate(`/appointment-detail/${row?.original?._id}`, { state: row?.original }) }}>\r\n                        <NorthEastIcon sx={{ fontSize: '16px' }} />\r\n                    </IconButton>\r\n                </Box>\r\n            ),\r\n        },\r\n\r\n    ]\r\n    const getCalendar = async () => {\r\n        console.log(selectedDate)\r\n        try {\r\n            let params = {\r\n                month: selectedDate ? moment(selectedDate).format('YYYY-MM') : moment().format('YYYY-MM')\r\n            };\r\n\r\n            const data = await ApiServices.getCalendar(params);\r\n\r\n            console.log(data);\r\n            setAppointmentsDates(data?.data?.activeDates)\r\n\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    const handleMonthChange = (newDate) => {\r\n        console.log(\"New month selected:\", appointmentsDates.includes(moment(newDate).format('YYYY-MM-DD')));\r\n        if (appointmentsDates.includes(moment(newDate).format('YYYY-MM-DD'))) {\r\n            console.log('asdasd');\r\n            setLoader(true)\r\n            getAppointments(moment(newDate).format('YYYY-MM-DD'))\r\n\r\n        }\r\n        else {\r\n            setData([])\r\n        }\r\n\r\n        setSelectedDate(newDate)\r\n        if (selectedMonth != moment(newDate).format('MM')) {\r\n            setSelectedMonth(moment(newDate).format('MM'))\r\n        }\r\n\r\n\r\n    };\r\n    const getExcludeDays = async () => {\r\n        try {\r\n\r\n\r\n            const data = await ApiServices.getSettings();\r\n            console.log(data?.data?.settings?.exclude_days);\r\n            setExcludedDays(data?.data?.settings?.exclude_days)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const getAppointments = async date => {\r\n        try {\r\n            let params = {\r\n                date: date\r\n            }\r\n\r\n            const data = await ApiServices.getAppointments(params);\r\n            console.log(data?.data?.bookings);\r\n            setData(data?.data?.bookings)\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n        finally {\r\n            setLoader(false)\r\n        }\r\n    };\r\n\r\n    const isDisabled = (date) => {\r\n        const dayName = date.toLocaleDateString(\"en-US\", { weekday: \"long\" });\r\n        return excludedDays.includes(dayName);\r\n    };\r\n    useEffect(() => {\r\n        getCalendar()\r\n        getExcludeDays()\r\n        getAppointments(moment().format('YYYY-MM-DD'))\r\n    }, [])\r\n    useEffect(() => {\r\n        getCalendar(selectedMonth)\r\n\r\n    }, [selectedMonth])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none' }}>\r\n                <Typography variant=\"h5\" sx={{ mb: 1, fontWeight: 500 }}>\r\n                    Appointments\r\n                </Typography>\r\n                <Calendar\r\n                    style={{\r\n\r\n                        margin: \"0 auto\",\r\n                        width: '80%',\r\n                        height: '400px',\r\n                        overflowY: 'scroll'\r\n\r\n                    }}\r\n\r\n                    onChange={handleMonthChange}\r\n                    disabledDate={isDisabled}\r\n                    renderCell={renderCell}\r\n                />\r\n                <Typography variant=\"h5\" sx={{ mt: 4,mb:4, fontWeight: 500 }}>\r\n                    Booked  Appointments\r\n                </Typography>\r\n                {loader ? <Box sx={{ margin: '20px auto', display: 'flex', justifyContent: 'center' }}><CircularProgress /> </Box> : <DataTable data={data} columns={columns} />}\r\n\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Appointments;\r\n"
        }
    ]
}