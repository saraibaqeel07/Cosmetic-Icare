{
    "sourceFile": "src/layouts/Dashboard/Pages/CreateDoctor.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744118122097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744118122097,
            "name": "Commit-0",
            "content": "import { Autocomplete, Avatar, Box, CircularProgress, Grid, IconButton, InputLabel, Paper, TextField, Typography } from \"@mui/material\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { Debounce } from \"../../../utils\";\r\nimport InputField from \"../../../components/input\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport SelectField from \"../../../components/select\";\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport { showPromiseToast } from \"../../../components/Toaster\";\r\nimport Lightbox from \"yet-another-react-lightbox\";\r\nimport { Thumbnails } from \"yet-another-react-lightbox/plugins\";\r\nimport \"yet-another-react-lightbox/styles.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { SlideshowLightbox } from 'lightbox.js-react'\r\nimport axios from \"axios\";\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\n\r\n\r\n\r\n\r\nconst CreateDoctor = () => {\r\n    const { register, control, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n\r\n    const [options, setOptions] = useState([]);\r\n    const navigate = useNavigate()\r\n    const fileInputRef = useRef(null);\r\n    const [selectedType, setSelectedType] = useState(null)\r\n    const [selectedSpecialty, setSelectedSpecialty] = useState(null)\r\n    const [loader, setLoader] = useState(false)\r\n    const [detail, setDetail] = useState(null)\r\n    const [selectedPlace, setSelectedPlace] = useState('')\r\n    const [images, setImages] = useState([])\r\n    const [imageURL, setImageURL] = useState()\r\n    const [hovered, setHovered] = useState(false);\r\n    const [imageLoader, setImageLoader] = useState(false)\r\n\r\n\r\n\r\n    const GetSpecialty = async () => {\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 999\r\n            };\r\n\r\n            const data = await ApiServices.GetSpecialty(params);\r\n\r\n\r\n            console.log(data?.data?.specialties);\r\n            const specialtiesWithId = data?.data?.specialties.map((name, index) => ({\r\n                id: name, // Assigning a unique ID starting from 1\r\n                name: name\r\n            }));\r\n            setOptions(specialtiesWithId)\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n\r\n    const handleImageClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n    const handleFileChange = async (e) => {\r\n        setImageLoader(true)\r\n        try {\r\n            const file = e.target.files[0];\r\n            if (file) {\r\n                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n            }\r\n            const formData = new FormData();\r\n            formData.append(\"document\", e.target.files[0]);\r\n\r\n            const response = await axios.post(\r\n                ' https://server.naesminc.org/api/system/upload',\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                }\r\n            );\r\n\r\n            console.log(response?.data?.data?.path);\r\n\r\n            setImageURL('https://server.naesminc.org' + response?.data?.data?.path);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n        finally {\r\n            setImageLoader(false)\r\n        }\r\n    };\r\n\r\n    const CreateDoctor = async () => {\r\n        setLoader(true);\r\n        try {\r\n            let obj = {\r\n                name: getValues('name'),\r\n                picture: imageURL,\r\n                specialty: selectedSpecialty?.id\r\n            };\r\n\r\n            const promise = ApiServices.CreateDoctor(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Navigate if response is successful\r\n            if (response?.responseCode === 200) {\r\n                navigate(\"/doctors\"); // Change to your desired route\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setLoader(false);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        GetSpecialty()\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none' }}>\r\n                <Typography variant=\"h5\" sx={{ mb: 4, fontWeight: 500 }}>\r\n                    Create Doctor\r\n                </Typography>\r\n\r\n\r\n                <Box component={'form'} onSubmit={handleSubmit(CreateDoctor)} >\r\n\r\n\r\n                    <Grid container mt={4} gap={2}>\r\n\r\n                        <Grid item xs={12}>\r\n                            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block' }}>\r\n\r\n                                Profile Picture :\r\n                            </InputLabel>\r\n\r\n                            <Controller\r\n                                name=\"image\"\r\n                                control={control}\r\n                                rules={{ required: false }}\r\n                                render={({ field }) => (\r\n                                    <Box\r\n                                        component={\"div\"}\r\n                                        onMouseEnter={() => setHovered(true)}\r\n                                        onMouseLeave={() => setHovered(false)}\r\n                                        sx={{\r\n                                            position: \"relative\",\r\n                                            width: 75,\r\n                                            height: 75,\r\n                                            mt: 2,\r\n                                        }}\r\n                                    >\r\n                                        <Avatar\r\n                                            src={imageLoader ? \"\" : imageURL} // Hide image when loading\r\n                                            alt=\"Profile\"\r\n                                            sx={{\r\n                                                position: \"relative\",\r\n                                                width: \"100%\",\r\n                                                height: \"100%\",\r\n                                                borderRadius: \"50%\",\r\n                                                fontSize: 24,\r\n                                                backgroundColor: imageLoader ? \"rgba(0, 0, 0, 0.1)\" : imageURL ? \"\" : \"#0EA5EA\",\r\n                                                color: \"white\",\r\n                                                cursor: \"pointer\",\r\n                                                objectFit: \"cover\",\r\n                                                textTransform: \"capitalize\",\r\n                                                display: \"flex\",\r\n                                                alignItems: \"center\",\r\n                                                justifyContent: \"center\",\r\n                                            }}\r\n                                            onClick={handleImageClick}\r\n                                        >\r\n                                            {imageLoader && (\r\n                                                <CircularProgress size={30} sx={{ color: \"white\", position: \"absolute\" }} />\r\n                                            )}\r\n                                        </Avatar>\r\n\r\n                                        {hovered && !imageLoader && (\r\n                                            <IconButton\r\n                                                sx={{\r\n                                                    position: \"absolute\",\r\n                                                    top: \"0\",\r\n                                                    left: \"0\",\r\n                                                    width: \"100%\",\r\n                                                    padding: \"9px 15px\",\r\n                                                    color: \"white\",\r\n                                                    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n                                                    borderRadius: \"50%\",\r\n                                                    display: \"block\",\r\n                                                    \"&:hover\": {\r\n                                                        backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n                                                    },\r\n                                                }}\r\n                                                onClick={handleImageClick}\r\n                                            >\r\n                                                <UploadIcon />\r\n                                                <Box sx={{ fontSize: \"12px\" }}>Upload Image</Box>\r\n                                            </IconButton>\r\n                                        )}\r\n\r\n                                        <input\r\n                                            type=\"file\"\r\n                                            ref={fileInputRef}\r\n                                            style={{ display: \"none\" }}\r\n                                            onChange={handleFileChange}\r\n                                            accept=\"image/*\"\r\n                                        />\r\n                                    </Box>\r\n                                )}\r\n                            />\r\n\r\n\r\n                            {(errors.image && !imageURL) && (\r\n                                <Typography sx={{ color: \"red\", fontSize: \"12px\", mt: 1 }}>\r\n                                    {errors.image.message}\r\n                                </Typography>\r\n                            )}\r\n                        </Grid>\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Name :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Name\"}\r\n                            error={errors?.name?.message}\r\n                            register={register(\"name\", {\r\n                                required:\r\n                                    \"Please enter your name.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={5}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Specialty :*'}\r\n                                options={options}\r\n                                selected={selectedSpecialty}\r\n                                addNew={(newValue) => setOptions([...options, { id: newValue, name: newValue }])}\r\n                                onSelect={(value) => setSelectedSpecialty(value)}\r\n                                error={errors?.specialty?.message}\r\n                                register={register(\"specialty\", {\r\n                                    required: 'Please select specialty.',\r\n                                })}\r\n                            /></Grid>\r\n\r\n\r\n\r\n\r\n\r\n                    </Grid>\r\n\r\n\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '85%', mt: 2 }}>\r\n                        <PrimaryButton loader={loader} disabled={loader || imageLoader} type={'submit'} title={\"Submit\"} />\r\n                    </Box>\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateDoctor;\r\n"
        }
    ]
}