{
    "sourceFile": "src/layouts/Dashboard/Pages/Settings.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744118122084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744118122084,
            "name": "Commit-0",
            "content": "import { useForm, Controller } from \"react-hook-form\";\r\nimport { Box, Grid, Typography, Button, Chip, InputLabel } from \"@mui/material\";\r\nimport { LocalizationProvider, TimePicker } from \"@mui/x-date-pickers\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport dayjs from \"dayjs\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { showPromiseToast } from \"../../../components/Toaster\";\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\n\r\nconst Settings = () => {\r\n    let suggestedDays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\r\n\r\n    const [selectedChips, setSelectedChips] = useState([])\r\n    const [timeData, setTimeData] = useState(null)\r\n    const [loader, setLoader] = useState(false)\r\n    const { control, handleSubmit, setValue, formState: { errors } } = useForm({\r\n        defaultValues: {\r\n            startTime: null,\r\n            endTime: null,\r\n            breakStartTime: null,\r\n            breakEndTime: null\r\n        }\r\n    });\r\n\r\n    const getData = async () => {\r\n        try {\r\n\r\n\r\n            const data = await ApiServices.getSettings();\r\n            console.log(data);\r\n            setTimeData(data?.data?.settings)\r\n\r\n\r\n\r\n            setSelectedChips(data?.data?.settings?.exclude_days)\r\n\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    const handleClick = (item) => {\r\n        console.log(item);\r\n        \r\n        setSelectedChips((prevSelected) => {\r\n            const name = typeof item === \"string\" ? item : item; // This line is redundant, just use item directly\r\n            const isAlreadySelected = prevSelected.includes(name); // Use includes() for clarity\r\n    \r\n            if (isAlreadySelected) {\r\n                console.log(\"Removing:\", name);\r\n                return prevSelected.filter((chip) => chip !== name); // Strict comparison to remove\r\n            } else {\r\n                console.log(\"Adding:\", name);\r\n                return [...prevSelected, name]; // Add new item\r\n            }\r\n        });\r\n    };\r\n    \r\n    \r\nconsole.log(selectedChips);\r\n\r\n\r\n    const formatTime = (isoString) => new Date(isoString).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: false });\r\n    const onSubmit = async (data) => {\r\n        setLoader(true);\r\n       \r\n\r\n        try {\r\n            let obj = {\r\n\r\n                break_start: formatTime(data.breakStartTime),\r\n                break_end: formatTime(data.breakEndTime),\r\n                start_time: formatTime(data.startTime),\r\n                end_time: formatTime(data.endTime),\r\n                exclude_days: selectedChips\r\n\r\n            };\r\n            console.log(obj);\r\n\r\n\r\n            const promise = ApiServices.UpdateSettings(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setLoader(false);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!timeData) return;\r\n\r\n        console.log(timeData);\r\n\r\n        const defaultStartTime = timeData.start_time\r\n            ? dayjs(timeData.start_time, \"HH:mm\")\r\n            : dayjs().hour(9).minute(0);\r\n\r\n        const defaultEndTime = timeData.end_time\r\n            ? dayjs(timeData.end_time, \"HH:mm\")\r\n            : dayjs().hour(17).minute(0);\r\n\r\n        const defaultBreakStartTime = timeData.break_start\r\n            ? dayjs(timeData.break_start, \"HH:mm\")\r\n            : dayjs().hour(12).minute(0);\r\n\r\n        const defaultBreakEndTime = timeData.break_end\r\n            ? dayjs(timeData.break_end, \"HH:mm\")\r\n            : dayjs().hour(12).minute(30);\r\n\r\n        setValue(\"startTime\", defaultStartTime);\r\n        setValue(\"endTime\", defaultEndTime);\r\n        setValue(\"breakStartTime\", defaultBreakStartTime);\r\n        setValue(\"breakEndTime\", defaultBreakEndTime);\r\n    }, [timeData]);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"h5\" sx={{ mb: 4, fontWeight: 500 }}>\r\n                Settings\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n                <Grid container spacing={2}>\r\n                    <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                        <Grid item xs={6} display={'flex'} gap={2}>\r\n                            <Box>\r\n                                <Controller\r\n                                    name=\"startTime\"\r\n                                    control={control}\r\n                                    rules={{ required: \"Start time is required\" }}\r\n                                    render={({ field }) => (\r\n                                        <TimePicker\r\n                                            ampm={false}\r\n                                            label=\"Start Time\"\r\n                                            {...field}\r\n                                            value={field.value || null}\r\n                                            onChange={(newValue) => field.onChange(newValue)}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {errors.startTime && (\r\n                                    <Typography color=\"error\">{errors.startTime.message}</Typography>\r\n                                )}\r\n                            </Box>\r\n                            <Box>\r\n                                <Controller\r\n                                    name=\"endTime\"\r\n                                    control={control}\r\n                                    rules={{ required: \"End time is required\" }}\r\n                                    render={({ field }) => (\r\n                                        <TimePicker\r\n                                            ampm={false}\r\n                                            label=\"End Time\"\r\n                                            {...field}\r\n                                            value={field.value || null}\r\n                                            onChange={(newValue) => field.onChange(newValue)}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {errors.endTime && (\r\n                                    <Typography color=\"error\">{errors.endTime.message}</Typography>\r\n                                )}\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                        <Grid item xs={6} display={'flex'} gap={2}>\r\n                            <Box>\r\n                                <Controller\r\n\r\n                                    name=\"breakStartTime\"\r\n                                    control={control}\r\n                                    rules={{ required: \"Break start time is required\" }}\r\n                                    render={({ field }) => (\r\n                                        <TimePicker\r\n                                            ampm={false}\r\n                                            label=\"Break Start Time\"\r\n                                            {...field}\r\n                                            value={field.value || null}\r\n                                            onChange={(newValue) => field.onChange(newValue)}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {errors.breakStartTime && (\r\n                                    <Typography color=\"error\">{errors.breakStartTime.message}</Typography>\r\n                                )}\r\n                            </Box>\r\n                            <Box>\r\n\r\n\r\n                                <Controller\r\n                                    name=\"breakEndTime\"\r\n                                    control={control}\r\n                                    rules={{ required: \"Break end time is required\" }}\r\n                                    render={({ field }) => (\r\n                                        <TimePicker\r\n                                            ampm={false}\r\n                                            label=\"Break End Time\"\r\n                                            {...field}\r\n                                            value={field.value || null}\r\n                                            onChange={(newValue) => field.onChange(newValue)}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                                {errors.breakEndTime && (\r\n                                    <Typography color=\"error\">{errors.breakEndTime.message}</Typography>\r\n                                )}\r\n                            </Box>\r\n                        </Grid>\r\n\r\n                    </LocalizationProvider>\r\n                </Grid>\r\n                <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mt: 4 }}>\r\n\r\n                    Excluded Days\r\n                </InputLabel>\r\n                {suggestedDays.map((item, index) => {\r\n                    const name = typeof item === \"string\" ? item : item;\r\n                    const isSelected = selectedChips.some((chip) => chip === name);\r\n\r\n                    return (\r\n                        <Chip\r\n                            key={name} // Use name instead of id\r\n                            label={name}\r\n                            sx={{\r\n                                backgroundColor: isSelected ? \"#ed2b2b\" : \"transparent\",\r\n                                border:  isSelected ? \"1px solid #ed2b2b\"  :  \"1px solid #18A5C3\",\r\n                                borderRadius: \"6px\",\r\n                                color: isSelected ? \"white\" : \"#18A5C3\",\r\n                                fontFamily: \"Poppins, sans-serif\",\r\n                                width: \"100px\",\r\n                                fontWeight: \"bold\",\r\n                                m: 1,\r\n                                mb: 0,\r\n                                \"&:hover\": {\r\n                                    backgroundColor: isSelected ? \"#0BD1D1\" : \"transparent\",\r\n                                },\r\n                            }}\r\n                            onClick={() => handleClick(name)}\r\n                        />\r\n                    );\r\n                })}\r\n\r\n                <Box display={'flex'} justifyContent={'flex-end'} mt={4}>\r\n                    <PrimaryButton loader={loader} disabled={loader}type={'submit'} title={\"Update Settings\"} />\r\n                </Box>\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Settings;\r\n"
        }
    ]
}