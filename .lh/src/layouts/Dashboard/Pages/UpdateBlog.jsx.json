{
    "sourceFile": "src/layouts/Dashboard/Pages/UpdateBlog.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744118122095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744118122095,
            "name": "Commit-0",
            "content": "import { Autocomplete, Box, Button, CircularProgress, Grid, IconButton, InputLabel, Paper, TextField, Typography } from \"@mui/material\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { Debounce } from \"../../../utils\";\r\nimport InputField from \"../../../components/input\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport SelectField from \"../../../components/select\";\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport { showErrorToast, showPromiseToast } from \"../../../components/Toaster\";\r\nimport Lightbox from \"yet-another-react-lightbox\";\r\nimport { Thumbnails } from \"yet-another-react-lightbox/plugins\";\r\nimport \"yet-another-react-lightbox/styles.css\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { SlideshowLightbox } from 'lightbox.js-react'\r\nimport UploadFile from \"../../../components/upload/UploadFile\";\r\nimport instance from \"../../../config/axios\";\r\nimport routes from \"../../../services/Apis/routes\";\r\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\r\nimport axios from \"axios\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\n\r\n\r\n\r\n\r\nconst UpdateBlog = () => {\r\n    const { register, handleSubmit, getValues, setValue, control, formState: { errors } } = useForm();\r\n    const [open, setOpen] = useState(false);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [options, setOptions] = useState([]);\r\n    const {id} = useParams()\r\n    const navigate = useNavigate()\r\n    const [progress4, setProgress4] = useState(0);\r\n    const [uploadedSize4, setUploadedSize4] = useState(0);\r\n    const allowOnlyImage = ['image/png', 'image/jpg', 'image/jpeg']\r\n    const [selectedType, setSelectedType] = useState(null)\r\n    const [loader, setLoader] = useState(false)\r\n    const [detail, setDetail] = useState(null)\r\n    const [selectedPlace, setSelectedPlace] = useState('')\r\n    const [selectedTopic, setSelectedTopic] = useState(null)\r\n    const [topics, setTopics] = useState([])\r\n    const [images, setImages] = useState([])\r\n    const [previewImages, setPreviewImages] = useState([]);\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [imageLoader, setImageLoader] = useState(false)\r\n\r\n    const handleFileChange = async (e) => {\r\n        setUploadedImages([\r\n\r\n        ])\r\n        setImageLoader(true)\r\n        try {\r\n            const files = e.target.files;\r\n            console.log(files.length);\r\n            if (files.length === 0) return; // Exit if no files are selected\r\n\r\n            setValue(\"images\", files, { shouldValidate: true }); // Store all files\r\n\r\n            const uploadedImages = [];\r\n            console.log(files.length);\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                const formData = new FormData();\r\n                formData.append(\"document\", files[i]);\r\n\r\n                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n\r\n                const response = await axios.post(\r\n                    \"https://server.naesminc.org/api/system/upload\",\r\n                    formData,\r\n                    {\r\n                        headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                const imagePath = response?.data?.data?.path;\r\n                if (imagePath) {\r\n                    uploadedImages.push(\"https://server.naesminc.org\" + imagePath);\r\n                    console.log(\"Uploaded Image URL:\", \"https://server.naesminc.org\" + imagePath);\r\n                }\r\n            }\r\n\r\n            setImageLoader(false)\r\n\r\n            setUploadedImages(uploadedImages); // Store all uploaded image URLs\r\n            console.log(\"All Uploaded Images:\", uploadedImages);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error uploading files:\", error);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n  \r\n    const UpdateBlog = async () => {\r\n        setLoader(true);\r\n        console.log(selectedPlace);\r\n\r\n        console.log(uploadedImages);\r\n\r\n        try {\r\n            let obj = {\r\n                _id:id,\r\n                title: getValues('title'),\r\n                short_description: getValues('description'),\r\n                link: getValues('link'),\r\n                content: getValues('content'),\r\n                image: uploadedImages[0]\r\n\r\n\r\n            };\r\n\r\n\r\n            const promise = ApiServices.UpdateBlog(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Navigate if response is successful\r\n            if (response?.responseCode === 200) {\r\n                navigate(\"/blogs\"); // Change to your desired route\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            showErrorToast(error)\r\n        } finally {\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    const handleRemoveImage = (index) => {\r\n        setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n    };\r\n\r\n\r\n   \r\n    const getBlogData = async () => {\r\n        try {\r\n            let params = {\r\n                id: id,\r\n                \r\n            };\r\n\r\n            const data = await ApiServices.getBlogData(params);\r\n\r\n            setValue('title',data?.data?.blog?.title)\r\n            setValue('description',data?.data?.blog?.short_description)\r\n            setValue('content',data?.data?.blog?.content)\r\n            setValue('link',data?.data?.blog?.link)\r\n\r\n            \r\n        \r\n            setUploadedImages([data?.data?.blog?.image])\r\n            setValue(\"image\", { shouldValidate: true });\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n  \r\n   useEffect(() => {\r\n    getBlogData()\r\n   }, [])\r\n   \r\n\r\n    return (\r\n        <div>\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none' }}>\r\n                <Typography variant=\"h5\" sx={{ mb: 4, fontWeight: 500 }}>\r\n                    Update Blog\r\n                </Typography>\r\n\r\n\r\n                <Box component={'form'} onSubmit={handleSubmit(UpdateBlog)} >\r\n                    {console.log(options)}\r\n\r\n                    <Grid container mt={4} gap={2}>\r\n\r\n                        {/* <Grid item xs={5}>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Type :*'}\r\n                                options={[\r\n                                    {\r\n                                        \"id\": \"Club\",\r\n                                        \"name\": \"Bar/Club\"\r\n                                    },\r\n                                    {\r\n                                        \"id\": \"Restaurant\",\r\n                                        \"name\": \"Restaurant\"\r\n                                    }\r\n                                ]}\r\n                                selected={selectedType}\r\n                                onSelect={(value) => setSelectedType(value)}\r\n                                error={errors?.type?.message}\r\n                                register={register(\"type\", {\r\n                                    required: 'Please select type.',\r\n                                })}\r\n                            /></Grid> */}\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Title :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Title\"}\r\n                            error={errors?.title?.message}\r\n                            register={register(\"title\", {\r\n                                required:\r\n                                    \"Please enter your title.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Link :\"}\r\n                            size={'small'}\r\n                            placeholder={\"Link\"}\r\n                            error={errors?.link?.message}\r\n                            register={register(\"link\", {\r\n                                required:\r\n                                    false\r\n                            })}\r\n                        /></Grid>\r\n\r\n\r\n\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Short Description:*\"}\r\n                            size={'small'}\r\n                            multiline\r\n                            rows={4}\r\n                            placeholder={\"Short Description  \"}\r\n                            error={errors?.description?.message}\r\n                            register={register(\"description\", {\r\n                                required:\r\n                                    \"Please enter your description.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Content:*\"}\r\n                            size={'small'}\r\n                            multiline\r\n                            rows={4}\r\n                            placeholder={\"Content  \"}\r\n                            error={errors?.content?.message}\r\n                            register={register(\"content\", {\r\n                                required:\r\n                                    \"Please enter your content.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n\r\n                        <Grid item xs={12} sm={5}>\r\n                            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 2 }}>\r\n\r\n                                Upload  Image :*\r\n                            </InputLabel>\r\n\r\n                            <Controller\r\n                                name=\"image\"\r\n                                control={control}\r\n                                rules={{\r\n                                    required: \"Image is required\",\r\n                                    validate: (value) => {\r\n                                        if (!value || value.length === 0) {\r\n                                            return \"Image is required\";\r\n                                        }\r\n                                        for (let i = 0; i < value.length; i++) {\r\n                                            if (value[i].size > 10 * 1024 * 1024) { // Increased limit to 10MB\r\n                                                return \"Each file must be smaller than 10MB\";\r\n                                            }\r\n                                            if (![\"image/\"].some(type => value[i].type.startsWith(type))) {\r\n                                                return \"Only images are allowed\";\r\n                                            }\r\n                                        }\r\n                                        return true;\r\n                                    },\r\n                                }}\r\n                                render={({ field: { onChange } }) => (\r\n                                    <>\r\n                                        <Box\r\n                                            sx={{\r\n                                                border: \"2px dashed #0EA5EA\",\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                textAlign: \"center\",\r\n                                                cursor: \"pointer\",\r\n                                                backgroundColor: \"#f9f9f9\",\r\n                                                height: '135px',\r\n                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                            }}\r\n                                            onClick={() => document.getElementById(\"upload-media\").click()}\r\n                                        >\r\n                                            {!imageLoader ? (\r\n                                                <>\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        accept=\"image/*\"\r\n\r\n                                                        style={{ display: \"none\" }}\r\n                                                        id=\"upload-media\"\r\n                                                        onChange={(e) => {\r\n                                                            const files = Array.from(e.target.files);\r\n                                                            onChange(files); // Update react-hook-form\r\n                                                            handleFileChange(e); // Handle upload logic\r\n                                                        }}\r\n                                                    />\r\n                                                    <CloudUploadIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n                                                        Drag & drop or click to upload media\r\n                                                    </Typography>\r\n                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n                                                        Allowed: Image (Max 10MB)\r\n                                                    </Typography>\r\n                                                </>\r\n                                            ) : (\r\n                                                <CircularProgress size={90} />\r\n                                            )}\r\n                                        </Box>\r\n\r\n                                        {errors.media && (\r\n                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n                                                {errors.media.message}\r\n                                            </Typography>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            />\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n                    {uploadedImages?.length > 0 && <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n\r\n                        Images :\r\n                    </InputLabel>}\r\n                    <Box sx={{ display: 'flex', gap: 1, flexWrap: 'wrap' }}>\r\n                        {uploadedImages?.length > 0 ? (\r\n                            uploadedImages.map((file, index) => {\r\n                                const isVideo = file.endsWith(\".mp4\") || file.endsWith(\".mov\") || file.endsWith(\".avi\") || file.endsWith(\".webm\");\r\n\r\n                                return (\r\n                                    <Box key={index} sx={{ position: \"relative\", display: \"inline-block\", mt: 1 }}>\r\n                                        {/* Image or Video */}\r\n                                        {isVideo ? (\r\n                                            <video\r\n                                                width=\"300px\"\r\n                                                height=\"200px\"\r\n                                                controls\r\n                                                style={{ borderRadius: \"5px\", objectFit: \"cover\" }}\r\n                                            >\r\n                                                <source src={file} type=\"video/mp4\" />\r\n                                                Your browser does not support the video tag.\r\n                                            </video>\r\n                                        ) : (\r\n                                            <img\r\n                                                className=\"rounded\"\r\n                                                src={file}\r\n                                                width=\"300px\"\r\n                                                height=\"200px\"\r\n                                                alt={`media-${index}`}\r\n                                                style={{ borderRadius: \"5px\", objectFit: \"cover\" }}\r\n                                            />\r\n                                        )}\r\n\r\n                                        {/* Remove Button */}\r\n                                        <Box\r\n                                            sx={{\r\n                                                position: \"absolute\",\r\n                                                top: 5,\r\n                                                right: 5,\r\n                                            }}\r\n                                        >\r\n                                            <IconButton\r\n                                                onClick={() => handleRemoveImage(index)}\r\n                                                sx={{\r\n                                                    backgroundColor: \"rgba(0,0,0,0.6)\",\r\n                                                    color: \"#fff\",\r\n                                                    \"&:hover\": { backgroundColor: \"red\" },\r\n                                                    width: 10,\r\n                                                    height: 10,\r\n                                                    borderRadius: \"50%\",\r\n                                                    display: \"flex\",\r\n                                                    alignItems: \"center\",\r\n                                                    p: 2,\r\n                                                }}\r\n                                            >\r\n                                                <CloseIcon />\r\n                                            </IconButton>\r\n                                        </Box>\r\n                                    </Box>\r\n                                );\r\n                            })\r\n                        ) : (\r\n                            <p></p>\r\n                        )}\r\n                    </Box>\r\n\r\n\r\n\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '85%', mt: 2 }}>\r\n                        <PrimaryButton loader={loader} disabled={loader}type={'submit'} title={\"Submit\"} />\r\n                    </Box>\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateBlog;\r\n"
        }
    ]
}