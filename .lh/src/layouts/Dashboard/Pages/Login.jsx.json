{
    "sourceFile": "src/layouts/Dashboard/Pages/Login.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1743863977547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743864104981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n     const { user, setUser } = useContext(AuthContext);\r\n     const {\r\n         register,\r\n         handleSubmit,\r\n-\r\n+watch,\r\n         formState: { errors },\r\n     } = useForm();\r\n     const {\r\n         register: register3,\r\n"
                },
                {
                    "date": 1743864133477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,11 @@\n         handleSubmit,\r\n watch,\r\n         formState: { errors },\r\n     } = useForm();\r\n+\r\n+    const emailValue = watch(\"email\");\r\n+    const passwordValue = watch(\"password\");\r\n     const {\r\n         register: register3,\r\n         handleSubmit: handleSubmit3,\r\n         setValue: setValue3,\r\n@@ -265,47 +268,46 @@\n                 </Box>\r\n \r\n                 {loginState && <form onSubmit={handleSubmit(submit)}>\r\n \r\n-                    <TextField\r\n-                        label=\"Email\"\r\n-                        type=\"email\"\r\n-                        variant=\"outlined\"\r\n-                        fullWidth\r\n-                        InputLabelProps={{shrink:value}}\r\n-                        sx={{\r\n-                            borderRadius: \"12px\",\r\n-                            \".MuiOutlinedInput-root\": {\r\n-                              border: \"2px solid #e0e0e0\",\r\n-                              borderRadius: \"12px\",\r\n-                              outline: \"none\",\r\n-                              transition: \"all 0.2s ease-in-out\",\r\n-                              \"& fieldset\": { border: \"none\" },\r\n-                              \"&:hover\": {\r\n-                                border: \"2px solid #0076bf\",\r\n-                              },\r\n-                              \"&.Mui-focused\": {\r\n-                                border: \"2px solid #0076bf\",\r\n-                                \"& fieldset\": { border: \"none\" },\r\n-                                svg: {\r\n-                                  path: {\r\n-                                    fill: \"#0076bf\",\r\n-                                  },\r\n-                                },\r\n-                              },\r\n-                            },\r\n-                          \r\n-                          }}\r\n-                        {...register(\"email\", {\r\n-                            required: \"Email is required\",\r\n-                            pattern: {\r\n-                                value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\r\n-                                message: \"Email is not valid\",\r\n-                            },\r\n-                        })}\r\n-                        error={!!errors.email}\r\n-                        helperText={errors.email ? errors.email.message : \"\"}\r\n-                    />\r\n+                <TextField\r\n+        label=\"Email\"\r\n+        type=\"email\"\r\n+        variant=\"outlined\"\r\n+        fullWidth\r\n+        InputLabelProps={{ shrink: !!emailValue }}\r\n+        sx={{\r\n+          borderRadius: \"12px\",\r\n+          \".MuiOutlinedInput-root\": {\r\n+            border: \"2px solid #e0e0e0\",\r\n+            borderRadius: \"12px\",\r\n+            outline: \"none\",\r\n+            transition: \"all 0.2s ease-in-out\",\r\n+            \"& fieldset\": { border: \"none\" },\r\n+            \"&:hover\": {\r\n+              border: \"2px solid #0076bf\",\r\n+            },\r\n+            \"&.Mui-focused\": {\r\n+              border: \"2px solid #0076bf\",\r\n+              \"& fieldset\": { border: \"none\" },\r\n+              svg: {\r\n+                path: {\r\n+                  fill: \"#0076bf\",\r\n+                },\r\n+              },\r\n+            },\r\n+          },\r\n+        }}\r\n+        {...register(\"email\", {\r\n+          required: \"Email is required\",\r\n+          pattern: {\r\n+            value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\r\n+            message: \"Email is not valid\",\r\n+          },\r\n+        })}\r\n+        error={!!errors.email}\r\n+        helperText={errors.email ? errors.email.message : \"\"}\r\n+      />\r\n \r\n                     <TextField\r\n                         label=\"Password\"\r\n                         type={isVisible ? \"text\" : \"password\"}\r\n"
                },
                {
                    "date": 1743864152190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n     const { user, setUser } = useContext(AuthContext);\r\n     const {\r\n         register,\r\n         handleSubmit,\r\n-watch,\r\n+        watch,\r\n         formState: { errors },\r\n     } = useForm();\r\n \r\n     const emailValue = watch(\"email\");\r\n@@ -214,30 +214,30 @@\n     };\r\n \r\n     return (\r\n         <Box\r\n-        sx={{\r\n-            height: \"100vh\",\r\n-            display: \"flex\",\r\n-            alignItems: \"center\",\r\n-            justifyContent: \"center\",\r\n-            backgroundImage: `url(${Images?.loginBg})`, // Corrected syntax\r\n-            backgroundSize: \"cover\", // Ensures the image covers the entire background\r\n-            backgroundPosition: \"center\", // Centers the image\r\n-            position: \"relative\", // Required for absolute positioning of pseudo-element\r\n-            \"&::before\": {\r\n-                content: '\"\"',\r\n-                position: \"absolute\",\r\n-                top: 0,\r\n-                left: 0,\r\n-                width: \"100%\",\r\n-                height: \"100%\",\r\n-                backgroundColor: \"rgba(239, 246, 255, 0.5)\", // Semi-transparent overlay\r\n-                zIndex: 1,\r\n-            },\r\n-        }}\r\n-        \r\n+            sx={{\r\n+                height: \"100vh\",\r\n+                display: \"flex\",\r\n+                alignItems: \"center\",\r\n+                justifyContent: \"center\",\r\n+                backgroundImage: `url(${Images?.loginBg})`, // Corrected syntax\r\n+                backgroundSize: \"cover\", // Ensures the image covers the entire background\r\n+                backgroundPosition: \"center\", // Centers the image\r\n+                position: \"relative\", // Required for absolute positioning of pseudo-element\r\n+                \"&::before\": {\r\n+                    content: '\"\"',\r\n+                    position: \"absolute\",\r\n+                    top: 0,\r\n+                    left: 0,\r\n+                    width: \"100%\",\r\n+                    height: \"100%\",\r\n+                    backgroundColor: \"rgba(239, 246, 255, 0.5)\", // Semi-transparent overlay\r\n+                    zIndex: 1,\r\n+                },\r\n+            }}\r\n \r\n+\r\n         >\r\n             <Paper\r\n                 elevation={3}\r\n                 sx={{\r\n@@ -249,11 +249,11 @@\n                     width: { xs: \"80%\", sm: \"30%\", md: \"25%\" },\r\n                     textAlign: \"center\",\r\n                     backgroundColor: \"white\",\r\n                     boxShadow: \" rgba(0, 0, 0, 0.35) 0px 5px 15px\", // Corrected shadow\r\n-        \r\n+\r\n                 }}\r\n-                \r\n+\r\n             >\r\n                 <Box sx={{ display: 'flex', justifyContent: \"center\", mb: 4, }}>\r\n                     <CardMedia\r\n                         component={\"img\"}\r\n@@ -268,16 +268,57 @@\n                 </Box>\r\n \r\n                 {loginState && <form onSubmit={handleSubmit(submit)}>\r\n \r\n-                <TextField\r\n-        label=\"Email\"\r\n-        type=\"email\"\r\n+                    <TextField\r\n+                        label=\"Email\"\r\n+                        type=\"email\"\r\n+                        variant=\"outlined\"\r\n+                        fullWidth\r\n+                        InputLabelProps={{ shrink: !!emailValue }}\r\n+                        sx={{\r\n+                            borderRadius: \"12px\",\r\n+                            \".MuiOutlinedInput-root\": {\r\n+                                border: \"2px solid #e0e0e0\",\r\n+                                borderRadius: \"12px\",\r\n+                                outline: \"none\",\r\n+                                transition: \"all 0.2s ease-in-out\",\r\n+                                \"& fieldset\": { border: \"none\" },\r\n+                                \"&:hover\": {\r\n+                                    border: \"2px solid #0076bf\",\r\n+                                },\r\n+                                \"&.Mui-focused\": {\r\n+                                    border: \"2px solid #0076bf\",\r\n+                                    \"& fieldset\": { border: \"none\" },\r\n+                                    svg: {\r\n+                                        path: {\r\n+                                            fill: \"#0076bf\",\r\n+                                        },\r\n+                                    },\r\n+                                },\r\n+                            },\r\n+                        }}\r\n+                        {...register(\"email\", {\r\n+                            required: \"Email is required\",\r\n+                            pattern: {\r\n+                                value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\r\n+                                message: \"Email is not valid\",\r\n+                            },\r\n+                        })}\r\n+                        error={!!errors.email}\r\n+                        helperText={errors.email ? errors.email.message : \"\"}\r\n+                    />\r\n+\r\n+<TextField\r\n+        label=\"Password\"\r\n+        type={isVisible ? \"text\" : \"password\"}\r\n         variant=\"outlined\"\r\n         fullWidth\r\n-        InputLabelProps={{ shrink: !!emailValue }}\r\n+        InputLabelProps={{ shrink: !!passwordValue }}\r\n         sx={{\r\n           borderRadius: \"12px\",\r\n+          mt: 4,\r\n+          mb: 4,\r\n           \".MuiOutlinedInput-root\": {\r\n             border: \"2px solid #e0e0e0\",\r\n             borderRadius: \"12px\",\r\n             outline: \"none\",\r\n@@ -296,70 +337,31 @@\n               },\r\n             },\r\n           },\r\n         }}\r\n-        {...register(\"email\", {\r\n-          required: \"Email is required\",\r\n-          pattern: {\r\n-            value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\r\n-            message: \"Email is not valid\",\r\n-          },\r\n-        })}\r\n-        error={!!errors.email}\r\n-        helperText={errors.email ? errors.email.message : \"\"}\r\n+        {...register(\"password\", { required: \"Password is required\" })}\r\n+        error={!!errors.password}\r\n+        helperText={errors.password ? errors.password.message : \"\"}\r\n+        InputProps={{\r\n+          endAdornment: (\r\n+            <InputAdornment position=\"end\">\r\n+              <IconButton\r\n+                onClick={() => setIsVisible(!isVisible)}\r\n+                edge=\"end\"\r\n+                sx={{ \":focus\": { outline: \"none !important\" } }}\r\n+              >\r\n+                {isVisible ? (\r\n+                  <VisibilityOff\r\n+                    sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n+                  />\r\n+                ) : (\r\n+                  <Visibility sx={{ color: \"#0F172A\", fontSize: \"20px\" }} />\r\n+                )}\r\n+              </IconButton>\r\n+            </InputAdornment>\r\n+          ),\r\n+        }}\r\n       />\r\n-\r\n-                    <TextField\r\n-                        label=\"Password\"\r\n-                        type={isVisible ? \"text\" : \"password\"}\r\n-                        variant=\"outlined\"\r\n-                        fullWidth\r\n-                        {...register(\"password\", { required: \"Password is required\" })}\r\n-                        error={!!errors.password}\r\n-                        helperText={errors.password ? errors.password.message : \"\"}\r\n-                        sx={{\r\n-                            borderRadius: \"12px\",\r\n-                            mt:4,\r\n-                            mb:4,\r\n-                            \".MuiOutlinedInput-root\": {\r\n-                              border: \"2px solid #e0e0e0\",\r\n-                              borderRadius: \"12px\",\r\n-                              outline: \"none\",\r\n-                              transition: \"all 0.2s ease-in-out\",\r\n-                              \"& fieldset\": { border: \"none\" },\r\n-                              \"&:hover\": {\r\n-                                border: \"2px solid #0076bf\",\r\n-                              },\r\n-                              \"&.Mui-focused\": {\r\n-                                border: \"2px solid #0076bf\",\r\n-                                \"& fieldset\": { border: \"none\" },\r\n-                                svg: {\r\n-                                  path: {\r\n-                                    fill: \"#0076bf\",\r\n-                                  },\r\n-                                },\r\n-                              },\r\n-                            },\r\n-                           \r\n-                          }}\r\n-                        InputProps={{\r\n-                            endAdornment: (\r\n-                                <InputAdornment position=\"end\">\r\n-                                    <IconButton\r\n-                                        onClick={() => setIsVisible(!isVisible)}\r\n-                                        edge=\"end\"\r\n-                                        sx={{\r\n-                                            ':focus': {\r\n-                                                outline: 'none !important'\r\n-                                            }\r\n-                                        }}\r\n-                                    >\r\n-                                        {isVisible ? <VisibilityOff sx={{ color: \"#0F172A\", fontSize: \"20px\" }} /> : <Visibility sx={{ color: \"#0F172A\", fontSize: \"20px\" }} />}\r\n-                                    </IconButton>\r\n-                                </InputAdornment>\r\n-                            ),\r\n-                        }}\r\n-                    />\r\n                     {/* <Box sx={{ display: 'flex', justifyContent: 'flex-end', cursor: 'pointer', fontSize: '13px', mb: 2 }}>\r\n                         <span style={{ textAlign: 'right' }} onClick={() => { setLoginState(false); setEmailConfirmation(true) }}>Forget Password?</span>\r\n                     </Box> */}\r\n                     <Button\r\n"
                },
                {
                    "date": 1743864272152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,51 @@\n                         InputLabelProps={{ shrink: !!emailValue }}\r\n                         sx={{\r\n                             borderRadius: \"12px\",\r\n                             \".MuiOutlinedInput-root\": {\r\n+                              borderRadius: \"12px\",\r\n+                              transition: \"all 0.2s ease-in-out\",\r\n+                          \r\n+                              // Default state\r\n+                              \"& fieldset\": {\r\n                                 border: \"2px solid #e0e0e0\",\r\n+                              },\r\n+                          \r\n+                              // Hover state\r\n+                              \"&:hover fieldset\": {\r\n+                                border: \"2px solid #0076bf\",\r\n+                              },\r\n+                          \r\n+                              // Focused state\r\n+                              \"&.Mui-focused fieldset\": {\r\n+                                border: \"2px solid #0076bf\",\r\n+                              },\r\n+                            },\r\n+                          }}\r\n+                          \r\n+                        {...register(\"email\", {\r\n+                            required: \"Email is required\",\r\n+                            pattern: {\r\n+                                value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\r\n+                                message: \"Email is not valid\",\r\n+                            },\r\n+                        })}\r\n+                        error={!!errors.email}\r\n+                        helperText={errors.email ? errors.email.message : \"\"}\r\n+                    />\r\n+\r\n+                    <TextField\r\n+                        label=\"Password\"\r\n+                        type={isVisible ? \"text\" : \"password\"}\r\n+                        variant=\"outlined\"\r\n+                        fullWidth\r\n+                        InputLabelProps={{ shrink: !!passwordValue }}\r\n+                        sx={{\r\n+                            borderRadius: \"12px\",\r\n+                            mt: 4,\r\n+                            mb: 4,\r\n+                            \".MuiOutlinedInput-root\": {\r\n+                                border: \"2px solid #e0e0e0\",\r\n                                 borderRadius: \"12px\",\r\n                                 outline: \"none\",\r\n                                 transition: \"all 0.2s ease-in-out\",\r\n                                 \"& fieldset\": { border: \"none\" },\r\n@@ -296,72 +338,31 @@\n                                     },\r\n                                 },\r\n                             },\r\n                         }}\r\n-                        {...register(\"email\", {\r\n-                            required: \"Email is required\",\r\n-                            pattern: {\r\n-                                value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\r\n-                                message: \"Email is not valid\",\r\n-                            },\r\n-                        })}\r\n-                        error={!!errors.email}\r\n-                        helperText={errors.email ? errors.email.message : \"\"}\r\n+                        {...register(\"password\", { required: \"Password is required\" })}\r\n+                        error={!!errors.password}\r\n+                        helperText={errors.password ? errors.password.message : \"\"}\r\n+                        InputProps={{\r\n+                            endAdornment: (\r\n+                                <InputAdornment position=\"end\">\r\n+                                    <IconButton\r\n+                                        onClick={() => setIsVisible(!isVisible)}\r\n+                                        edge=\"end\"\r\n+                                        sx={{ \":focus\": { outline: \"none !important\" } }}\r\n+                                    >\r\n+                                        {isVisible ? (\r\n+                                            <VisibilityOff\r\n+                                                sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n+                                            />\r\n+                                        ) : (\r\n+                                            <Visibility sx={{ color: \"#0F172A\", fontSize: \"20px\" }} />\r\n+                                        )}\r\n+                                    </IconButton>\r\n+                                </InputAdornment>\r\n+                            ),\r\n+                        }}\r\n                     />\r\n-\r\n-<TextField\r\n-        label=\"Password\"\r\n-        type={isVisible ? \"text\" : \"password\"}\r\n-        variant=\"outlined\"\r\n-        fullWidth\r\n-        InputLabelProps={{ shrink: !!passwordValue }}\r\n-        sx={{\r\n-          borderRadius: \"12px\",\r\n-          mt: 4,\r\n-          mb: 4,\r\n-          \".MuiOutlinedInput-root\": {\r\n-            border: \"2px solid #e0e0e0\",\r\n-            borderRadius: \"12px\",\r\n-            outline: \"none\",\r\n-            transition: \"all 0.2s ease-in-out\",\r\n-            \"& fieldset\": { border: \"none\" },\r\n-            \"&:hover\": {\r\n-              border: \"2px solid #0076bf\",\r\n-            },\r\n-            \"&.Mui-focused\": {\r\n-              border: \"2px solid #0076bf\",\r\n-              \"& fieldset\": { border: \"none\" },\r\n-              svg: {\r\n-                path: {\r\n-                  fill: \"#0076bf\",\r\n-                },\r\n-              },\r\n-            },\r\n-          },\r\n-        }}\r\n-        {...register(\"password\", { required: \"Password is required\" })}\r\n-        error={!!errors.password}\r\n-        helperText={errors.password ? errors.password.message : \"\"}\r\n-        InputProps={{\r\n-          endAdornment: (\r\n-            <InputAdornment position=\"end\">\r\n-              <IconButton\r\n-                onClick={() => setIsVisible(!isVisible)}\r\n-                edge=\"end\"\r\n-                sx={{ \":focus\": { outline: \"none !important\" } }}\r\n-              >\r\n-                {isVisible ? (\r\n-                  <VisibilityOff\r\n-                    sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n-                  />\r\n-                ) : (\r\n-                  <Visibility sx={{ color: \"#0F172A\", fontSize: \"20px\" }} />\r\n-                )}\r\n-              </IconButton>\r\n-            </InputAdornment>\r\n-          ),\r\n-        }}\r\n-      />\r\n                     {/* <Box sx={{ display: 'flex', justifyContent: 'flex-end', cursor: 'pointer', fontSize: '13px', mb: 2 }}>\r\n                         <span style={{ textAlign: 'right' }} onClick={() => { setLoginState(false); setEmailConfirmation(true) }}>Forget Password?</span>\r\n                     </Box> */}\r\n                     <Button\r\n"
                },
                {
                    "date": 1743864296249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,30 +316,29 @@\n                         fullWidth\r\n                         InputLabelProps={{ shrink: !!passwordValue }}\r\n                         sx={{\r\n                             borderRadius: \"12px\",\r\n-                            mt: 4,\r\n-                            mb: 4,\r\n                             \".MuiOutlinedInput-root\": {\r\n+                              borderRadius: \"12px\",\r\n+                              transition: \"all 0.2s ease-in-out\",\r\n+                          \r\n+                              // Default state\r\n+                              \"& fieldset\": {\r\n                                 border: \"2px solid #e0e0e0\",\r\n-                                borderRadius: \"12px\",\r\n-                                outline: \"none\",\r\n-                                transition: \"all 0.2s ease-in-out\",\r\n-                                \"& fieldset\": { border: \"none\" },\r\n-                                \"&:hover\": {\r\n-                                    border: \"2px solid #0076bf\",\r\n-                                },\r\n-                                \"&.Mui-focused\": {\r\n-                                    border: \"2px solid #0076bf\",\r\n-                                    \"& fieldset\": { border: \"none\" },\r\n-                                    svg: {\r\n-                                        path: {\r\n-                                            fill: \"#0076bf\",\r\n-                                        },\r\n-                                    },\r\n-                                },\r\n+                              },\r\n+                          \r\n+                              // Hover state\r\n+                              \"&:hover fieldset\": {\r\n+                                border: \"2px solid #0076bf\",\r\n+                              },\r\n+                          \r\n+                              // Focused state\r\n+                              \"&.Mui-focused fieldset\": {\r\n+                                border: \"2px solid #0076bf\",\r\n+                              },\r\n                             },\r\n-                        }}\r\n+                          }}\r\n+                          \r\n                         {...register(\"password\", { required: \"Password is required\" })}\r\n                         error={!!errors.password}\r\n                         helperText={errors.password ? errors.password.message : \"\"}\r\n                         InputProps={{\r\n"
                },
                {
                    "date": 1743864303636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -316,29 +316,30 @@\n                         fullWidth\r\n                         InputLabelProps={{ shrink: !!passwordValue }}\r\n                         sx={{\r\n                             borderRadius: \"12px\",\r\n+                            mt: 4,\r\n+                            mb: 4,\r\n                             \".MuiOutlinedInput-root\": {\r\n-                              borderRadius: \"12px\",\r\n-                              transition: \"all 0.2s ease-in-out\",\r\n-                          \r\n-                              // Default state\r\n-                              \"& fieldset\": {\r\n                                 border: \"2px solid #e0e0e0\",\r\n-                              },\r\n-                          \r\n-                              // Hover state\r\n-                              \"&:hover fieldset\": {\r\n-                                border: \"2px solid #0076bf\",\r\n-                              },\r\n-                          \r\n-                              // Focused state\r\n-                              \"&.Mui-focused fieldset\": {\r\n-                                border: \"2px solid #0076bf\",\r\n-                              },\r\n+                                borderRadius: \"12px\",\r\n+                                outline: \"none\",\r\n+                                transition: \"all 0.2s ease-in-out\",\r\n+                                \"& fieldset\": { border: \"none\" },\r\n+                                \"&:hover\": {\r\n+                                    border: \"2px solid #0076bf\",\r\n+                                },\r\n+                                \"&.Mui-focused\": {\r\n+                                    border: \"2px solid #0076bf\",\r\n+                                    \"& fieldset\": { border: \"none\" },\r\n+                                    svg: {\r\n+                                        path: {\r\n+                                            fill: \"#0076bf\",\r\n+                                        },\r\n+                                    },\r\n+                                },\r\n                             },\r\n-                          }}\r\n-                          \r\n+                        }}\r\n                         {...register(\"password\", { required: \"Password is required\" })}\r\n                         error={!!errors.password}\r\n                         helperText={errors.password ? errors.password.message : \"\"}\r\n                         InputProps={{\r\n"
                },
                {
                    "date": 1743864319937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -314,31 +314,33 @@\n                         type={isVisible ? \"text\" : \"password\"}\r\n                         variant=\"outlined\"\r\n                         fullWidth\r\n                         InputLabelProps={{ shrink: !!passwordValue }}\r\n+                        \r\n+                          \r\n                         sx={{\r\n                             borderRadius: \"12px\",\r\n                             mt: 4,\r\n                             mb: 4,\r\n                             \".MuiOutlinedInput-root\": {\r\n-                                border: \"2px solid #e0e0e0\",\r\n                                 borderRadius: \"12px\",\r\n-                                outline: \"none\",\r\n                                 transition: \"all 0.2s ease-in-out\",\r\n-                                \"& fieldset\": { border: \"none\" },\r\n-                                \"&:hover\": {\r\n-                                    border: \"2px solid #0076bf\",\r\n+                            \r\n+                                // Default state\r\n+                                \"& fieldset\": {\r\n+                                  border: \"2px solid #e0e0e0\",\r\n                                 },\r\n-                                \"&.Mui-focused\": {\r\n-                                    border: \"2px solid #0076bf\",\r\n-                                    \"& fieldset\": { border: \"none\" },\r\n-                                    svg: {\r\n-                                        path: {\r\n-                                            fill: \"#0076bf\",\r\n-                                        },\r\n-                                    },\r\n+                            \r\n+                                // Hover state\r\n+                                \"&:hover fieldset\": {\r\n+                                  border: \"2px solid #0076bf\",\r\n                                 },\r\n-                            },\r\n+                            \r\n+                                // Focused state\r\n+                                \"&.Mui-focused fieldset\": {\r\n+                                  border: \"2px solid #0076bf\",\r\n+                                },\r\n+                              },\r\n                         }}\r\n                         {...register(\"password\", { required: \"Password is required\" })}\r\n                         error={!!errors.password}\r\n                         helperText={errors.password ? errors.password.message : \"\"}\r\n"
                },
                {
                    "date": 1744114938957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,9 +371,9 @@\n                         type={\"submit\"}\r\n                         fullWidth\r\n                         variant={\"contained\"}\r\n                         sx={{\r\n-                            background: \" #0052a8\",\r\n+                            background: \" #46aef5\",\r\n                             color: 'white',\r\n                             borderRadius: \"8px\",\r\n                             textTransform: 'capitalize',\r\n                             p: \"14px 40px\",\r\n"
                },
                {
                    "date": 1744114952171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -377,9 +377,9 @@\n                             borderRadius: \"8px\",\r\n                             textTransform: 'capitalize',\r\n                             p: \"14px 40px\",\r\n                             \"&.Mui-disabled\": {\r\n-                                background: \"#337DBD\",\r\n+                                background: \"##46aef5\",\r\n                             },\r\n                         }}\r\n                         disabled={isLoading}\r\n                     >\r\n"
                }
            ],
            "date": 1743863977547,
            "name": "Commit-0",
            "content": "\r\nimport {\r\n\r\n    Box,\r\n\r\n    CardMedia,\r\n    Button,\r\n    IconButton,\r\n    CircularProgress,\r\n    Paper,\r\n    TextField,\r\n    InputAdornment,\r\n    Typography,\r\n} from \"@mui/material\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\n\r\n\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n// import AuthServices from \"../../apis/auth/AuthServices\";\r\n\r\nimport { useContext, useEffect, useState } from \"react\";\r\n\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport OTPInput from \"react-otp-input\";\r\nimport { showErrorToast, showSuccessToast } from \"../../../components/Toaster\";\r\nimport { AuthContext } from \"../../../Context/AuthContext\";\r\nimport { Images } from \"../../../assets/images\";\r\n\r\n\r\n\r\n\r\nfunction Login() {\r\n    const [isVisible, setIsVisible] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [emailConfirmation, setEmailConfirmation] = useState(false)\r\n    const [emailError, setEmailError] = useState(false)\r\n    const [otpError, setOtpError] = useState(false)\r\n    const [otpEnable, setOtpEnable] = useState(false);\r\n    const [loginState, setLoginState] = useState(true)\r\n    const [otp, setOtp] = useState('')\r\n    const [otpToken, setOtpToken] = useState(false)\r\n    const [updatePassword, setUpdatePassword] = useState(false)\r\n    const [confirmPassword, setConfirmPassword] = useState(false)\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showPassword2, setShowPassword2] = useState(false);\r\n    const [newloader, setNewloader] = useState(false)\r\n\r\n\r\n    const { user, setUser } = useContext(AuthContext);\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n\r\n        formState: { errors },\r\n    } = useForm();\r\n    const {\r\n        register: register3,\r\n        handleSubmit: handleSubmit3,\r\n        setValue: setValue3,\r\n        getValues: getValues3,\r\n        reset: reset3,\r\n        formState: { errors: errors3 },\r\n    } = useForm();\r\n\r\n    const {\r\n        register: register4,\r\n        handleSubmit: handleSubmit4,\r\n        setValue: setValue4,\r\n        getValues: getValues4,\r\n        reset: reset4,\r\n        formState: { errors: errors4 },\r\n    } = useForm();\r\n\r\n    const [timer, setTimer] = useState(10);\r\n\r\n    useEffect(() => {\r\n        let interval;\r\n        if (timer > 0) {\r\n            interval = setInterval(() => {\r\n                setTimer((prev) => prev - 1);\r\n            }, 1000);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [timer]);\r\n\r\n\r\n    const SendOtp = async (val) => {\r\n        if (val != 'resend') {\r\n            setIsLoading(true)\r\n        }\r\n\r\n\r\n        setTimer(60);\r\n        try {\r\n            let obj = {\r\n                email: getValues3('email')\r\n            };\r\n\r\n            const data = await ApiServices.SendOtp(obj);\r\n            console.log(data);\r\n            if (data.responseCode == 206) {\r\n\r\n                setEmailConfirmation(false)\r\n                setLoginState(false)\r\n                setOtpEnable(true)\r\n                setEmailError(false)\r\n            }\r\n        } catch (error) {\r\n\r\n            setEmailError(true)\r\n        }\r\n        finally {\r\n            setIsLoading(false)\r\n            setNewloader(false)\r\n        }\r\n    }\r\n\r\n    const SubmitOTP = async (val) => {\r\n\r\n        setIsLoading(true)\r\n\r\n\r\n\r\n        try {\r\n            let obj = {\r\n                email: getValues3('email'),\r\n                otp: otp,\r\n            };\r\n\r\n            const data = await ApiServices.SendOtp(obj);\r\n            console.log(data?.data, 'tesetttt');\r\n            if (data.responseCode == 206) {\r\n\r\n                setOtpToken(data?.data?.otp_token)\r\n                setUpdatePassword(true)\r\n                setEmailConfirmation(false)\r\n                setOtpEnable(false)\r\n                setConfirmPassword(true)\r\n                // Register(sendData, data?.data?.otp_token);\r\n            }\r\n        } catch (error) {\r\n            setOtpError(true)\r\n        }\r\n        finally {\r\n            setIsLoading(false)\r\n\r\n        }\r\n    };\r\n\r\n    const UpdatePassword = async (sendData, result) => {\r\n        setIsLoading(true)\r\n        console.log(otpToken, \"otpToken2\");\r\n        try {\r\n            let obj = {\r\n                otp_token: otpToken,\r\n                email: getValues3('email'),\r\n                password: getValues4('password'),\r\n                confirm_password: getValues4('confirmPassword'),\r\n            };\r\n\r\n            const data = await ApiServices.SendOtp(obj);\r\n            console.log(data);\r\n            if (data.responseCode == 200) {\r\n                setOtp('')\r\n\r\n                reset4()\r\n                setConfirmPassword(false)\r\n                setLoginState(true)\r\n\r\n\r\n            }\r\n        } catch (error) {\r\n            setOtpError(true)\r\n        }\r\n        finally {\r\n            setIsLoading(false)\r\n        }\r\n    };\r\n    //   const { userLogin } = useAuth();\r\n    const navigate = useNavigate();\r\n\r\n    const submit = async (formData) => {\r\n        setIsLoading(true);\r\n        const obj = {\r\n            email: formData.email,\r\n            password: formData.password,\r\n        };\r\n        try {\r\n            const result = await ApiServices.Login(obj);\r\n            if (result.responseCode == 200) {\r\n                // userLogin(result.data);\r\n\r\n\r\n                setUser(result?.data);\r\n                localStorage.setItem('user', JSON.stringify(result?.data))\r\n                showSuccessToast(result.message);\r\n                navigate(\"/dashboard\");\r\n            }\r\n        } catch (error) {\r\n            showErrorToast(error);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Box\r\n        sx={{\r\n            height: \"100vh\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            backgroundImage: `url(${Images?.loginBg})`, // Corrected syntax\r\n            backgroundSize: \"cover\", // Ensures the image covers the entire background\r\n            backgroundPosition: \"center\", // Centers the image\r\n            position: \"relative\", // Required for absolute positioning of pseudo-element\r\n            \"&::before\": {\r\n                content: '\"\"',\r\n                position: \"absolute\",\r\n                top: 0,\r\n                left: 0,\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                backgroundColor: \"rgba(239, 246, 255, 0.5)\", // Semi-transparent overlay\r\n                zIndex: 1,\r\n            },\r\n        }}\r\n        \r\n\r\n        >\r\n            <Paper\r\n                elevation={3}\r\n                sx={{\r\n                    position: \"relative\",\r\n                    // border: \"2px solid #0052a8\",\r\n                    zIndex: 2, // Ensure it appears above the overlay\r\n                    padding: { xs: \"20px\", sm: \"30px\", md: \"40px\" },\r\n                    borderRadius: \"16px\",\r\n                    width: { xs: \"80%\", sm: \"30%\", md: \"25%\" },\r\n                    textAlign: \"center\",\r\n                    backgroundColor: \"white\",\r\n                    boxShadow: \" rgba(0, 0, 0, 0.35) 0px 5px 15px\", // Corrected shadow\r\n        \r\n                }}\r\n                \r\n            >\r\n                <Box sx={{ display: 'flex', justifyContent: \"center\", mb: 4, }}>\r\n                    <CardMedia\r\n                        component={\"img\"}\r\n                        src={Images.logo}\r\n                        alt={\"logo\"}\r\n                        sx={{\r\n                            width: '120px',\r\n                            borderRadius: \"50%\",\r\n                            objectFit: \"contain\",\r\n                        }}\r\n                    />\r\n                </Box>\r\n\r\n                {loginState && <form onSubmit={handleSubmit(submit)}>\r\n\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        type=\"email\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        InputLabelProps={{shrink:value}}\r\n                        sx={{\r\n                            borderRadius: \"12px\",\r\n                            \".MuiOutlinedInput-root\": {\r\n                              border: \"2px solid #e0e0e0\",\r\n                              borderRadius: \"12px\",\r\n                              outline: \"none\",\r\n                              transition: \"all 0.2s ease-in-out\",\r\n                              \"& fieldset\": { border: \"none\" },\r\n                              \"&:hover\": {\r\n                                border: \"2px solid #0076bf\",\r\n                              },\r\n                              \"&.Mui-focused\": {\r\n                                border: \"2px solid #0076bf\",\r\n                                \"& fieldset\": { border: \"none\" },\r\n                                svg: {\r\n                                  path: {\r\n                                    fill: \"#0076bf\",\r\n                                  },\r\n                                },\r\n                              },\r\n                            },\r\n                          \r\n                          }}\r\n                        {...register(\"email\", {\r\n                            required: \"Email is required\",\r\n                            pattern: {\r\n                                value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\r\n                                message: \"Email is not valid\",\r\n                            },\r\n                        })}\r\n                        error={!!errors.email}\r\n                        helperText={errors.email ? errors.email.message : \"\"}\r\n                    />\r\n\r\n                    <TextField\r\n                        label=\"Password\"\r\n                        type={isVisible ? \"text\" : \"password\"}\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        {...register(\"password\", { required: \"Password is required\" })}\r\n                        error={!!errors.password}\r\n                        helperText={errors.password ? errors.password.message : \"\"}\r\n                        sx={{\r\n                            borderRadius: \"12px\",\r\n                            mt:4,\r\n                            mb:4,\r\n                            \".MuiOutlinedInput-root\": {\r\n                              border: \"2px solid #e0e0e0\",\r\n                              borderRadius: \"12px\",\r\n                              outline: \"none\",\r\n                              transition: \"all 0.2s ease-in-out\",\r\n                              \"& fieldset\": { border: \"none\" },\r\n                              \"&:hover\": {\r\n                                border: \"2px solid #0076bf\",\r\n                              },\r\n                              \"&.Mui-focused\": {\r\n                                border: \"2px solid #0076bf\",\r\n                                \"& fieldset\": { border: \"none\" },\r\n                                svg: {\r\n                                  path: {\r\n                                    fill: \"#0076bf\",\r\n                                  },\r\n                                },\r\n                              },\r\n                            },\r\n                           \r\n                          }}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        onClick={() => setIsVisible(!isVisible)}\r\n                                        edge=\"end\"\r\n                                        sx={{\r\n                                            ':focus': {\r\n                                                outline: 'none !important'\r\n                                            }\r\n                                        }}\r\n                                    >\r\n                                        {isVisible ? <VisibilityOff sx={{ color: \"#0F172A\", fontSize: \"20px\" }} /> : <Visibility sx={{ color: \"#0F172A\", fontSize: \"20px\" }} />}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                    {/* <Box sx={{ display: 'flex', justifyContent: 'flex-end', cursor: 'pointer', fontSize: '13px', mb: 2 }}>\r\n                        <span style={{ textAlign: 'right' }} onClick={() => { setLoginState(false); setEmailConfirmation(true) }}>Forget Password?</span>\r\n                    </Box> */}\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        fullWidth\r\n                        variant={\"contained\"}\r\n                        sx={{\r\n                            background: \" #0052a8\",\r\n                            color: 'white',\r\n                            borderRadius: \"8px\",\r\n                            textTransform: 'capitalize',\r\n                            p: \"14px 40px\",\r\n                            \"&.Mui-disabled\": {\r\n                                background: \"#337DBD\",\r\n                            },\r\n                        }}\r\n                        disabled={isLoading}\r\n                    >\r\n                        {isLoading ? (\r\n                            <CircularProgress\r\n                                sx={{\r\n                                    \"&.MuiCircularProgress-root\": {\r\n                                        width: \"26px !important\",\r\n                                        height: \"26px !important\",\r\n                                    },\r\n                                    color: 'black',\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                            \"Login\"\r\n                        )}\r\n                    </Button>\r\n                </form>}\r\n\r\n                {emailConfirmation && <form onSubmit={handleSubmit3(SendOtp)}>\r\n\r\n                    <TextField\r\n                        label=\"Email\"\r\n                        type=\"email\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        sx={{\r\n                            mb: 3,\r\n                            \"& .MuiOutlinedInput-root.Mui-focused .MuiOutlinedInput-notchedOutline\":\r\n                            {\r\n                                borderColor: 'rgb(182, 182, 182)',\r\n                            },\r\n                            \"& label.Mui-focused\": {\r\n                                color: 'black',\r\n                            },\r\n                            fontSize: { xs: \"0.9rem\", sm: \"1rem\" }, // Responsive font size\r\n                        }}\r\n                        {...register3(\"email\", {\r\n                            required: \"Email is required\",\r\n                            pattern: {\r\n                                value: /^[^@ ]+@[^@ ]+\\.[^@ .]{2,}$/,\r\n                                message: \"Email is not valid\",\r\n                            },\r\n                        })}\r\n                        error={!!errors.email}\r\n                        helperText={errors.email ? errors.email.message : \"\"}\r\n                    />\r\n\r\n\r\n\r\n                    <Button\r\n                        type={\"submit\"}\r\n                        fullWidth\r\n                        variant={\"contained\"}\r\n                        sx={{\r\n                            background: \" #18A5C3\",\r\n                            color: 'white',\r\n                            borderRadius: \"8px\",\r\n                            textTransform: 'capitalize',\r\n                            p: \"14px 40px\",\r\n                            \"&.Mui-disabled\": {\r\n                                background: \"#337DBD\",\r\n                            },\r\n                        }}\r\n                        disabled={isLoading}\r\n                    >\r\n                        {isLoading ? (\r\n                            <CircularProgress\r\n                                sx={{\r\n                                    \"&.MuiCircularProgress-root\": {\r\n                                        width: \"26px !important\",\r\n                                        height: \"26px !important\",\r\n                                    },\r\n                                    color: 'black',\r\n                                }}\r\n                            />\r\n                        ) : (\r\n                            \"Submit\"\r\n                        )}\r\n                    </Button>\r\n                </form>}\r\n                {\r\n                    otpEnable && (\r\n                        <>\r\n                            <Typography\r\n                                className=\"heading-font\"\r\n                                variant=\"h5\"\r\n                                mb={2}\r\n                                sx={{\r\n                                    fontWeight: 600,\r\n                                    textAlign: \"center\",\r\n                                    fontFamily: \"Plus Jakarta Sans\",\r\n                                }}\r\n                            >\r\n                                Enter OTP\r\n                            </Typography>\r\n                            <div className=\"otp-container\">\r\n                                <OTPInput\r\n                                    value={otp}\r\n                                    onChange={setOtp}\r\n                                    numInputs={4}\r\n                                    renderSeparator={<span className=\"separator\">-</span>}\r\n                                    renderInput={(props) => (\r\n                                        <input className=\"otp-input\" {...props} />\r\n                                    )}\r\n                                />\r\n                            </div>{\" \"}\r\n                            {otpError && <span style={{ color: 'red', marginTop: '5px', fontSize: '12px' }}> &nbsp; OTP is Invalid </span>}\r\n                            <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginTop: \"10px\" }}>\r\n                                <span style={{ fontSize: \"14px\", color: \"#6B7280\" }}>\r\n                                    Resend OTP in {timer}s\r\n                                </span>\r\n                                <Button\r\n                                    variant=\"text\"\r\n                                    disabled={timer > 0}\r\n                                    onClick={() => SendOtp('resend')}\r\n                                    sx={{\r\n                                        fontSize: \"14px\",\r\n                                        textTransform: \"capitalize\",\r\n                                        color: timer > 0 ? \"#9CA3AF\" : \"#0EA5EA\",\r\n                                    }}\r\n                                >\r\n                                    Resend\r\n                                </Button>\r\n                            </div>\r\n                            <Button\r\n                                onClick={() => SubmitOTP()}\r\n                                fullWidth\r\n                                variant={\"contained\"}\r\n                                sx={{\r\n                                    background: \" #18A5C3\",\r\n                                    color: 'white',\r\n                                    borderRadius: \"8px\",\r\n                                    textTransform: 'capitalize',\r\n                                    p: \"14px 40px\",\r\n                                    \"&.Mui-disabled\": {\r\n                                        background: \"#337DBD\",\r\n                                    },\r\n                                }}\r\n                                disabled={(isLoading) || otp.length != 4}\r\n                            >\r\n                                {(isLoading) ? (\r\n                                    <CircularProgress\r\n                                        sx={{\r\n                                            \"&.MuiCircularProgress-root\": {\r\n                                                width: \"26px !important\",\r\n                                                height: \"26px !important\",\r\n                                            },\r\n                                            color: 'black',\r\n                                        }}\r\n                                    />\r\n                                ) : (\r\n                                    \"Submit\"\r\n                                )}\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                }\r\n\r\n                {confirmPassword && (\r\n                    <>\r\n                        <Box sx={{ width: \"100%\" }} component={'form'} onSubmit={handleSubmit4(UpdatePassword)}>\r\n                            <Typography\r\n                                className=\"heading-font\"\r\n                                variant=\"h5\"\r\n                                mb={2}\r\n                                sx={{\r\n                                    fontWeight: \"bold\",\r\n                                    textAlign: \"center\",\r\n                                    fontFamily: \"Plus Jakarta Sans\",\r\n\r\n                                }}\r\n                            >\r\n                                Reset Password\r\n                            </Typography>\r\n                            {/* Password Field */}\r\n                            <TextField\r\n                                fullWidth\r\n                                placeholder=\"Password\"\r\n                                variant=\"outlined\"\r\n\r\n                                type={showPassword ? \"text\" : \"password\"}\r\n                                {...register4(\"password\", {\r\n                                    required: \"Password is required\",\r\n                                })}\r\n                                error={!!errors4.password}\r\n                                helperText={\r\n                                    errors4.password ? errors4.password.message : \"\"\r\n                                }\r\n                                InputProps={{\r\n\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowPassword(!showPassword)}\r\n                                                edge=\"end\"\r\n                                                sx={{\r\n                                                    \":focus\": {\r\n                                                        outline: \"none !important\"\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {showPassword ? (\r\n                                                    <VisibilityIcon\r\n                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <VisibilityOffIcon\r\n                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n                                                    />\r\n                                                )}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                    style: {\r\n                                        color: \"#0F172A\",\r\n                                        fontSize: \"16px\",\r\n                                        borderRadius: 8, // Rounded corners\r\n                                    },\r\n                                }}\r\n                                sx={{\r\n                                    my: 1,\r\n                                    backgroundColor: \"#1E1E1E\", // Dark background color\r\n                                    \"& .MuiOutlinedInput-root\": {\r\n                                        backgroundColor: \"white\",\r\n                                        \"& fieldset\": { borderColor: \"rgb(182, 182, 182)\" }, // Blue border\r\n                                        \"&:hover fieldset\": { borderColor: \"rgb(182, 182, 182)\" },\r\n                                        \"&.Mui-focused fieldset\": {\r\n                                            borderColor: \"rgb(182, 182, 182)\",\r\n                                        },\r\n                                    },\r\n                                    \"&.MuiFormControl-fullWidth\": {\r\n                                        background: \"transparent !important\",\r\n                                        borderRadius: '10px !important'\r\n                                    },\r\n                                    \"& .MuiInputLabel-root\": { color: \"black\" },\r\n                                    \"& .MuiInputLabel-root.Mui-focused\": { color: \"black\" },\r\n                                }}\r\n                            />\r\n\r\n                            {/* Confirm Password Field */}\r\n                            <TextField\r\n                                fullWidth\r\n                                placeholder=\"Confirm Password\"\r\n\r\n                                variant=\"outlined\"\r\n                                type={showPassword2 ? \"text\" : \"password\"}\r\n                                {...register4(\"confirmPassword\", {\r\n                                    required: \"Confirm Password is required\",\r\n                                    validate: (value) =>\r\n                                        value === getValues4(\"password\") ||\r\n                                        \"Passwords do not match\",\r\n                                })}\r\n                                error={!!errors4.confirmPassword}\r\n                                helperText={\r\n                                    errors4.confirmPassword\r\n                                        ? errors4.confirmPassword.message\r\n                                        : \"\"\r\n                                }\r\n                                InputProps={{\r\n\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton\r\n                                                onClick={() => setShowPassword2(!showPassword2)}\r\n                                                edge=\"end\"\r\n                                                sx={{\r\n                                                    \":focus\": {\r\n                                                        outline: \"none !important\"\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {showPassword2 ? (\r\n                                                    <VisibilityIcon\r\n                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    <VisibilityOffIcon\r\n                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n                                                    />\r\n                                                )}\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                    style: {\r\n                                        color: \"#0F172A\",\r\n                                        fontSize: \"16px\",\r\n                                        borderRadius: 8, // Rounded corners\r\n                                    },\r\n                                }}\r\n                                sx={{\r\n                                    my: 1,\r\n                                    backgroundColor: \"#1E1E1E\", // Dark background color\r\n                                    \"& .MuiOutlinedInput-root\": {\r\n                                        backgroundColor: \"white\",\r\n                                        \"& fieldset\": { borderColor: \"rgb(182, 182, 182)\" }, // Blue border\r\n                                        \"&:hover fieldset\": { borderColor: \"rgb(182, 182, 182)\" },\r\n                                        \"&.Mui-focused fieldset\": {\r\n                                            borderColor: \"rgb(182, 182, 182)\",\r\n                                        },\r\n                                    },\r\n                                    \"&.MuiFormControl-fullWidth\": {\r\n                                        background: \"transparent !important\",\r\n                                        borderRadius: '10px !important'\r\n                                    },\r\n                                    \"& .MuiInputLabel-root\": { color: \"black\" },\r\n                                    \"& .MuiInputLabel-root.Mui-focused\": { color: \"black\" },\r\n                                }}\r\n                            />\r\n\r\n                            <Button\r\n                                type={\"submit\"}\r\n                                fullWidth\r\n                                variant={\"contained\"}\r\n                                sx={{\r\n                                    background: \" #18A5C3\",\r\n                                    color: 'white',\r\n                                    borderRadius: \"8px\",\r\n                                    mt: 2,\r\n                                    textTransform: 'capitalize',\r\n                                    p: \"14px 40px\",\r\n                                    \"&.Mui-disabled\": {\r\n                                        background: \"#337DBD\",\r\n                                    },\r\n                                }}\r\n                                disabled={isLoading}\r\n                            >\r\n                                {isLoading ? (\r\n                                    <CircularProgress\r\n                                        sx={{\r\n                                            \"&.MuiCircularProgress-root\": {\r\n                                                width: \"26px !important\",\r\n                                                height: \"26px !important\",\r\n                                            },\r\n                                            color: 'black',\r\n                                        }}\r\n                                    />\r\n                                ) : (\r\n                                    \"Submit\"\r\n                                )}\r\n                            </Button>\r\n                        </Box>\r\n                    </>\r\n                )}\r\n            </Paper>\r\n        </Box>\r\n    );\r\n}\r\n\r\nexport default Login;"
        }
    ]
}