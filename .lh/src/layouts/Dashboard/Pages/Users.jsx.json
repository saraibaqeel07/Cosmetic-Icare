{
    "sourceFile": "src/layouts/Dashboard/Pages/Users.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744118122086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744118122086,
            "name": "Commit-0",
            "content": "import { Box, Chip, Grid, IconButton, Paper, Typography } from \"@mui/material\"\r\nimport DataTable from \"../../../components/DataTable\"\r\nimport { useEffect, useState } from \"react\"\r\nimport NorthEastIcon from '@mui/icons-material/NorthEast';\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport SimpleDialog from \"../../../components/dialog\";\r\nimport SelectField from \"../../../components/select\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport InputField from \"../../../components/input\";\r\nimport ModeEditIcon from '@mui/icons-material/ModeEdit';\r\nimport { showPromiseToast } from \"../../../components/Toaster\";\r\n\r\n\r\nconst Users = () => {\r\n  const navigate = useNavigate()\r\n  const [active, setActive] = useState(false)\r\n  const [data, setData] = useState([])\r\n  const [selectedRows, setSelectedRows] = useState([]);\r\n  const [loader, setLoader] = useState(false)\r\n  const [notificationDialog, setNotificationDialog] = useState(false)\r\n  const [type, setType] = useState(null)\r\n  const {\r\n    register: register2,\r\n    handleSubmit: handleSubmit2,\r\n    setValue: setValue2,\r\n    getValues: getValues2,\r\n    reset,\r\n    formState: { errors: errors2 },\r\n\r\n  } = useForm();\r\n  const getData = async () => {\r\n    try {\r\n      let params = {\r\n        page: 1,\r\n        limit: 999\r\n      };\r\n\r\n      const data = await ApiServices.getUsers(params);\r\n\r\n\r\n      setData(data?.data?.users)\r\n\r\n\r\n    } catch (error) {\r\n      console.error(\"Error fetching location:\", error);\r\n    }\r\n  };\r\n\r\n\r\n  // Column definitions with sorting\r\n  const columns = [\r\n    {\r\n      header: \"First Name\",\r\n      accessorKey: \"first_name\",\r\n    },\r\n    {\r\n      header: \"Last Name\",\r\n      accessorKey: \"last_name\",\r\n    },\r\n    {\r\n      header: \"Phone\",\r\n      accessorKey: \"phone\",\r\n    },\r\n\r\n\r\n    {\r\n      header: \"Actions\",\r\n      cell: ({ row }) => (\r\n\r\n        <Box component={'div'} variant=\"contained\" color=\"primary\" sx={{ cursor: 'pointer' }} >\r\n          <IconButton onClick={() => { navigate(`/user-detail/${row?.original?._id}`) }}>\r\n            <NorthEastIcon sx={{ fontSize: '16px' }} />\r\n          </IconButton>\r\n        </Box>\r\n      ),\r\n    },\r\n\r\n  ]\r\n  const handleSelectionChange = (selected) => {\r\n    console.log(selected);\r\n\r\n    setSelectedRows(selected);\r\n\r\n  };\r\n  const SendNotification = async () => {\r\n    setLoader(true);\r\n    const idsArray = selectedRows?.map(item => item._id);\r\n    try {\r\n        let obj = {\r\n            name: getValues2('title'),\r\n            content: getValues2('content'),\r\n            type:type?.id,\r\n            user_ids:idsArray\r\n\r\n          \r\n        };\r\n        console.log(idsArray);\r\n\r\n        const promise = ApiServices.SendNotifications(obj);\r\n\r\n        // Handle the API response properly\r\n        const response = await promise;\r\n        console.log(response);\r\n\r\n        showPromiseToast(\r\n            promise,\r\n            \"Saving...\",\r\n            \"Added Successfully\",\r\n            \"Something Went Wrong\"\r\n        );\r\n        if (response?.responseCode === 200) {\r\n          setNotificationDialog(false)\r\n          reset()\r\n          setType(null)\r\n          setSelectedRows([])\r\n      }\r\n        \r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    } finally {\r\n        setLoader(false);\r\n    }\r\n};\r\n\r\n\r\n  useEffect(() => {\r\n    getData()\r\n  }, [])\r\n\r\n  return (\r\n    <div>\r\n      <SimpleDialog\r\n        open={notificationDialog}\r\n        onClose={() => setNotificationDialog(false)}\r\n        title={'Send Notification?'}\r\n      >\r\n        <Box component=\"form\" onSubmit={handleSubmit2(SendNotification)}>\r\n          <Grid container >\r\n          <Grid item xs={12} sm={12} mt={2}>\r\n              <InputField\r\n                label={\"Title :\"}\r\n                size={'small'}\r\n            \r\n                placeholder={\"Title\"}\r\n                error={errors2?.title?.message}\r\n                register={register2(\"title\", {\r\n                  required:\r\n                    'title is required'\r\n\r\n                })}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={12} mt={2}>\r\n              <InputField\r\n                label={\"Content :\"}\r\n                size={'small'}\r\n                rows={5}\r\n                multiline={true}\r\n                placeholder={\"Content\"}\r\n                error={errors2?.content?.message}\r\n                register={register2(\"content\", {\r\n                  required:\r\n                    'content is required'\r\n\r\n                })}\r\n              />\r\n            </Grid>\r\n\r\n            <Grid item xs={12} sm={12}>\r\n              <SelectField\r\n                size={'small'}\r\n                label={'Type :'}\r\n\r\n                options={[{ id: 'Promotion', name: 'Promotion' }, { id: 'Alert', name: 'Alert' }, { id: 'Reminder', name: 'Reminder' }, { id: 'Health', name: 'Health' }, { id: 'Tip', name: 'Tip' }, { id: 'Suggestion', name: 'Suggestion' }, { id: 'Event', name: 'Event' }]}\r\n                selected={type}\r\n                onSelect={(value) => {\r\n                  setType(value)\r\n\r\n\r\n                }}\r\n                error={errors2?.type?.message}\r\n                register={register2(\"type\", {\r\n                  required: 'Please select type.',\r\n                })}\r\n              />\r\n            </Grid>\r\n\r\n\r\n            \r\n            <Grid container sx={{ justifyContent: 'center' }}>\r\n              <Grid item xs={6} sm={6} sx={{ mt: 2, display: 'flex', justifyContent: 'space-between', gap: '25px' }}>\r\n                <PrimaryButton bgcolor={'black'} title=\"Yes,Confirm\" type=\"submit\" />\r\n                <PrimaryButton onClick={() => { setNotificationDialog(false) }} bgcolor={'#FF1F25'} title=\"No,Cancel\" />\r\n              </Grid>\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </Box>\r\n      </SimpleDialog>\r\n      <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none' }}>\r\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n\r\n\r\n          <Typography variant=\"h5\" sx={{ mb: 4, fontWeight: 500 }}>\r\n            Users\r\n          </Typography>\r\n          <PrimaryButton onClick={() => setNotificationDialog(true)} loader={loader} disabled={loader}type={'submit'} title={selectedRows?.length == 0 ? \"Send Notification To All\" : \"Send Notification To Selected Users\"} />\r\n        </Box>\r\n        {data?.length > 0 && <DataTable enableCheckbox={true} onSelectionChange={handleSelectionChange} data={data} columns={columns} />}\r\n\r\n      </Paper>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Users\r\n"
        }
    ]
}