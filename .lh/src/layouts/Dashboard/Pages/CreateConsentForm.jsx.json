{
    "sourceFile": "src/layouts/Dashboard/Pages/CreateConsentForm.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 370,
            "patches": [
                {
                    "date": 1743247669952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743247918027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,116 +1,150 @@\n-import { Box, Chip, IconButton, Paper, Typography } from \"@mui/material\"\r\n-import DataTable from \"../../../components/DataTable\"\r\n-import { useEffect, useState } from \"react\"\r\n-import NorthEastIcon from '@mui/icons-material/NorthEast';\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import ApiServices from \"../../../services/Apis\";\r\n import { PrimaryButton } from \"../../../components/buttons\";\r\n+import { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, Grid, IconButton, InputAdornment, InputLabel, Paper, TextField, Typography } from \"@mui/material\";\r\n+import InputField from \"../../../components/input\";\r\n+import { Controller, useForm } from \"react-hook-form\";\r\n import { useNavigate } from \"react-router-dom\";\r\n-import ApiServices from \"../../../services/Apis\";\r\n-import moment from \"moment\";\r\n-import LocationOnOutlinedIcon from '@mui/icons-material/LocationOnOutlined';\r\n-import DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\n-import DriveFileRenameOutlineIcon from '@mui/icons-material/DriveFileRenameOutline';\r\n-import ConfirmationDialog from \"../../../components/confirmDialog\";\r\n-import { showErrorToast, showPromiseToast } from \"../../../components/Toaster\";\r\n-import SimpleDialog from \"../../../components/dialog\";\r\n-import { Grid } from \"rsuite\";\r\n-import InputField from \"../../../components/input\";\r\n-import { useForm } from \"react-hook-form\";\r\n+import axios from \"axios\";\r\n+import { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\";\r\n+import UploadIcon from \"@mui/icons-material/Upload\";\r\n+import OTPInput from \"react-otp-input\";\r\n+import VisibilityIcon from \"@mui/icons-material/Visibility\";\r\n+import VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\n+import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n+import { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\n+import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n import SelectField from \"../../../components/select\";\r\n \r\n \r\n-const ConsentForms = () => {\r\n-    const [active, setActive] = useState(false)\r\n+const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n-    const [status, setStatus] = useState(null)\r\n-    const [data, setData] = useState([])\r\n-    const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n-    const [selectedRow, setSelectedRow] = useState(null)\r\n+    const [userData, setUserData] = useState(null)\r\n+    const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm();\r\n+    const [title, setTitle] = useState(null)\r\n+\r\n+    const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n+    const [otp, setOtp] = useState(\"\");\r\n+    const [otpError, setOtpError] = useState(false);\r\n+    const [timer, setTimer] = useState(30);\r\n+    const [isLoading, setIsLoading] = useState(false);\r\n     const [open, setOpen] = useState(false)\r\n+    const [password, setPassword] = useState(\"\");\r\n+    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n+\r\n+    const [showPassword2, setShowPassword2] = useState(false);\r\n+    const [otpToken, setOtpToken] = useState(null)\r\n+    const [showPassword, setShowPassword] = useState(false);\r\n+    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n     const {\r\n-        register: register2,\r\n-        handleSubmit: handleSubmit2,\r\n-        setValue: setValue2,\r\n-        getValues: getValues2,\r\n-        reset,\r\n-        formState: { errors: errors2 },\r\n-\r\n+        register: register4,\r\n+        handleSubmit: handleSubmit4,\r\n+        setValue: setValue4,\r\n+        getValues: getValues4,\r\n+        reset: reset4,\r\n+        formState: { errors: errors4 },\r\n     } = useForm();\r\n \r\n-    const getData = async () => {\r\n-        try {\r\n-            let params = {\r\n-                page: 1,\r\n-                limit: 999\r\n-            };\r\n+    // Simulate OTP Submission\r\n+    const handleOtpSubmit = () => {\r\n+        if (otp.length !== 4) {\r\n+            setOtpError(true);\r\n+            return;\r\n+        }\r\n+        setIsLoading(true);\r\n+        setTimeout(() => {\r\n+            setIsLoading(false);\r\n+            SubmitOTP()\r\n+            setStep(2); // Move to reset password step\r\n+        }, 2000);\r\n+    };\r\n \r\n-            const data = await ApiServices.getAfterCareDocuments(params);\r\n+    // Simulate Reset Password Submission\r\n+    const handleResetSubmit = () => {\r\n+        if (password !== confirmPassword) {\r\n+            alert(\"Passwords do not match!\");\r\n+            return;\r\n+        }\r\n+        setIsLoading(true);\r\n+        setTimeout(() => {\r\n+            setIsLoading(false);\r\n+            // Close dialog after password reset\r\n+        }, 2000);\r\n+    };\r\n+    const fileInputRef = useRef(null);\r\n \r\n+    const [loader, setLoader] = useState(false)\r\n \r\n-            setData(data?.data?.documents)\r\n+    const [imageURL, setImageURL] = useState()\r\n+    const [hovered, setHovered] = useState(false);\r\n \r\n \r\n-        } catch (error) {\r\n-            console.error(\"Error fetching location:\", error);\r\n-        }\r\n+\r\n+\r\n+    const handleImageClick = () => {\r\n+        fileInputRef.current.click();\r\n     };\r\n-    // // Dummy data\r\n-    // const data = [\r\n-    //     { id: 1, firstName: \"John\", lastName: \"Doe\", age: 30, city: \"New York\" },\r\n-    //     { id: 2, firstName: \"Jane\", lastName: \"Smith\", age: 25, city: \"Los Angeles\" },\r\n-    //     { id: 3, firstName: \"Bob\", lastName: \"Johnson\", age: 35, city: \"Chicago\" },\r\n-    //     { id: 4, firstName: \"Alice\", lastName: \"Brown\", age: 28, city: \"Houston\" },\r\n-    //     { id: 5, firstName: \"Charlie\", lastName: \"Davis\", age: 42, city: \"Phoenix\" },\r\n-    //     { id: 6, firstName: \"Eva\", lastName: \"Wilson\", age: 31, city: \"Philadelphia\" },\r\n-    //     { id: 7, firstName: \"Frank\", lastName: \"Moore\", age: 29, city: \"San Antonio\" },\r\n-    //     { id: 8, firstName: \"Grace\", lastName: \"Taylor\", age: 36, city: \"San Diego\" },\r\n-    //     { id: 9, firstName: \"Henry\", lastName: \"Anderson\", age: 41, city: \"Dallas\" },\r\n-    //     { id: 10, firstName: \"Ivy\", lastName: \"Thomas\", age: 27, city: \"San Jose\" },\r\n-    // ]\r\n \r\n-    // Column definitions with sorting\r\n-    const columns = [\r\n-        {\r\n-            header: \"Title\",\r\n-            accessorKey: \"title\",\r\n+    const handleFileChange = async (e) => {\r\n+        try {\r\n+            const file = e.target.files[0];\r\n+            if (file) {\r\n+                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+            }\r\n+            const formData = new FormData();\r\n+            formData.append(\"document\", e.target.files[0]);\r\n \r\n-        },\r\n-        {\r\n-            header: \"Content\",\r\n-            accessorKey: \"content\",\r\n+            const response = await axios.post(\r\n+                'https://cosmetic.theappkit.com/api/system/upload',\r\n+                formData,\r\n+                {\r\n+                    headers: {\r\n+                        'Content-Type': 'multipart/form-data'\r\n+                    }\r\n+                }\r\n+            );\r\n \r\n-        },\r\n-     \r\n-      \r\n-        {\r\n-            header: \"Actions\",\r\n-            cell: ({ row }) => (\r\n+            console.log(response?.data?.data?.path);\r\n \r\n-                <Box variant=\"contained\" color=\"primary\" sx={{ cursor: 'pointer', display: 'flex', gap: 2 }} >\r\n-                    <IconButton onClick={() => { navigate(`/patient-detail/${row?.original?._id}`) }}>\r\n-                        <NorthEastIcon sx={{ fontSize: '16px' }} />\r\n-                    </IconButton>\r\n-                    <IconButton onClick={() => navigate(`/update-aftercare-document/${row?.original?._id}`)}>\r\n-                        <DriveFileRenameOutlineIcon sx={{ fontSize: '16px' }} />\r\n-                    </IconButton>\r\n+            setImageURL('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n \r\n-                    <IconButton onClick={() => { setSelectedRow(row?.original); setConfirmationDialog(true) }}>\r\n-                        <DeleteOutlineIcon sx={{ fontSize: '16px' }} />\r\n-                    </IconButton>\r\n-                </Box>\r\n-            ),\r\n-        },\r\n \r\n-    ]\r\n+        } catch (error) {\r\n+            console.log(error);\r\n \r\n-    const HandleDelete = async () => {\r\n-\r\n+        }\r\n+    };\r\n+    const CreateConsentForm = async () => {\r\n+        setLoader(true);\r\n         try {\r\n             let obj = {\r\n-                id: selectedRow?._id\r\n+                title:title?.id,\r\n+                first_name: getValues('fname'),\r\n+                last_name: getValues('lname'),\r\n+                dob: getValues('selectedDate'),\r\n+                address: getValues('address'),\r\n+                email: getValues('email'),\r\n+                post_code: getValues('post'),\r\n+                phone: getValues('phone'),\r\n+                notes: getValues('notes'),\r\n+                picture: imageURL,\r\n+                kin_details: {\r\n+                    name: getValues('name'),\r\n+                    address: getValues('kinaddress'),\r\n+                    email: getValues('kinemail'),\r\n+                    phone: getValues('kinphone'),\r\n+                  },\r\n+                  general_practitioner: {\r\n+                    name: getValues('genname'),\r\n+                    address: getValues('genaddress'),\r\n+                    email: getValues('genemail'),\r\n+                    phone: getValues('genphone'),\r\n+                  },\r\n+\r\n             };\r\n \r\n-            const promise = ApiServices.DeleteAfterCareDoc(obj);\r\n+            const promise = ApiServices.CreateConsentForm(obj);\r\n \r\n             // Handle the API response properly\r\n             const response = await promise;\r\n             console.log(response);\r\n@@ -121,125 +155,794 @@\n                 \"Added Successfully\",\r\n                 \"Something Went Wrong\"\r\n             );\r\n \r\n+            // Navigate if response is successful\r\n+            if (response?.responseCode === 200) {\r\n+                console.log(response);\r\n+                setImageURL(null)\r\n+                navigate('/patients')\r\n \r\n \r\n+            }\r\n+\r\n         } catch (error) {\r\n             console.log(error);\r\n             showErrorToast(error)\r\n+        } finally {\r\n+\r\n+            setLoader(false);\r\n         }\r\n-        finally {\r\n-            getData()\r\n+    };\r\n+\r\n+    const SendOtp = async (val) => {\r\n+        if (val != 'resend') {\r\n+            setIsLoading(true)\r\n         }\r\n \r\n-    };\r\n-    const UpdateStaff = async () => {\r\n \r\n+        setTimer(60);\r\n         try {\r\n             let obj = {\r\n-                id: selectedRow?._id,\r\n-                in_active: status?.id\r\n+                email: userData?.email\r\n             };\r\n \r\n-            const promise = ApiServices.UpdateStaff(obj);\r\n+            const data = await ApiServices.SendOtp(obj);\r\n+            console.log(data);\r\n+            if (data.responseCode == 206) {\r\n+                setOtp('')\r\n+                showSuccessToast('Otp Sent Successfully')\r\n \r\n-            // Handle the API response properly\r\n-            const response = await promise;\r\n-            console.log(response);\r\n+            }\r\n \r\n-            showPromiseToast(\r\n-                promise,\r\n-                \"Saving...\",\r\n-                \"Added Successfully\",\r\n-                \"Something Went Wrong\"\r\n-            );\r\n+        } catch (error) {\r\n \r\n+            console.log(error)\r\n+        }\r\n+        finally {\r\n+            setIsLoading(false)\r\n+            setStep(1)\r\n+            setOpen(true)\r\n+\r\n+        }\r\n+    }\r\n+\r\n+    const UpdatePassword = async (sendData, result) => {\r\n+        setIsLoading(true)\r\n+        console.log(otpToken, \"otpToken2\");\r\n+        try {\r\n+            let obj = {\r\n+                otp_token: otpToken,\r\n+                email: userData?.email,\r\n+                password: getValues4('password'),\r\n+                confirm_password: getValues4('confirmPassword'),\r\n+            };\r\n+\r\n+            const data = await ApiServices.SendOtp(obj);\r\n+            console.log(data);\r\n+            if (data.responseCode == 200) {\r\n+                setOtp('')\r\n+\r\n+                reset4()\r\n+                setConfirmPassword(false)\r\n+\r\n+\r\n+\r\n+            }\r\n+        } catch (error) {\r\n+            setOtpError(true)\r\n+        }\r\n+        finally {\r\n+            setIsLoading(false)\r\n             setOpen(false)\r\n+            showSuccessToast('Password Reset Successfully')\r\n+        }\r\n+    };\r\n \r\n+    const SubmitOTP = async (val) => {\r\n+\r\n+        setIsLoading(true)\r\n+\r\n+\r\n+\r\n+        try {\r\n+            let obj = {\r\n+                email: userData?.email,\r\n+                otp: otp,\r\n+            };\r\n+\r\n+            const data = await ApiServices.SendOtp(obj);\r\n+            console.log(data?.data, 'tesetttt');\r\n+            if (data.responseCode == 206) {\r\n+                console.log(data);\r\n+                setOtpToken(data?.data?.otp_token)\r\n+\r\n+\r\n+            }\r\n         } catch (error) {\r\n-            console.log(error);\r\n+            setOtpError(true)\r\n         }\r\n         finally {\r\n-            getData()\r\n+            setIsLoading(false)\r\n+\r\n         }\r\n+    };\r\n \r\n-    };\r\n     useEffect(() => {\r\n-        getData()\r\n+        let interval;\r\n+        if (timer > 0) {\r\n+            interval = setInterval(() => {\r\n+                setTimer((prev) => prev - 1);\r\n+            }, 1000);\r\n+        } else {\r\n+            clearInterval(interval);\r\n+        }\r\n+        return () => clearInterval(interval);\r\n+    }, [timer]);\r\n \r\n-    }, [])\r\n \r\n     return (\r\n         <div>\r\n-            <SimpleDialog\r\n-                open={open}\r\n-                onClose={() => setOpen(false)}\r\n-                width={'300px'}\r\n-                title={'Update Status'}\r\n-            >\r\n-                <Box component=\"form\" onSubmit={handleSubmit2(UpdateStaff)}>\r\n-                    <Grid container >\r\n-                        <Grid item xs={12} sm={12} mt={2}>\r\n+            <Dialog open={open} onClose={() => setOpen(false)} fullWidth maxWidth=\"sm\">\r\n \r\n-                            <Typography variant=\"p\" sx={{ mt: 1, fontWeight: 500 }}>\r\n-                                Type:\r\n+                <DialogContent>\r\n+                    {step === 1 ? (\r\n+                        // OTP Verification Step\r\n+                        <Box>\r\n+                            <Typography\r\n+                                className=\"heading-font\"\r\n+                                variant=\"h5\"\r\n+                                mb={2}\r\n+                                sx={{\r\n+                                    fontWeight: \"bold\",\r\n+                                    textAlign: \"center\",\r\n+\r\n+\r\n+                                }}\r\n+                            >\r\n+                                Enter OTP\r\n                             </Typography>\r\n+                            <div className=\"otp-container\" style={{ display: \"flex\", justifyContent: \"center\", gap: \"8px\" }}>\r\n+                                <OTPInput\r\n+                                    value={otp}\r\n+                                    onChange={(otp) => {\r\n+                                        setOtp(otp);\r\n+                                        setOtpError(false);\r\n+                                    }}\r\n+                                    numInputs={4}\r\n+                                    renderSeparator={<span className=\"separator\">-</span>}\r\n+                                    renderInput={(props) => (\r\n+                                        <input\r\n+                                            className=\"otp-input\"\r\n+                                            {...props}\r\n+                                            style={{\r\n+                                                width: \"40px\",\r\n+                                                height: \"40px\",\r\n+                                                textAlign: \"center\",\r\n+                                                fontSize: \"18px\",\r\n+                                                border: \"1px solid #ccc\",\r\n+                                                borderRadius: \"5px\",\r\n+                                            }}\r\n+                                        />\r\n+                                    )}\r\n+                                />\r\n+                            </div>\r\n+                            {otpError && (\r\n+                                <span style={{ color: \"red\", marginTop: \"5px\", fontSize: \"12px\" }}>\r\n+                                    &nbsp; OTP is Invalid\r\n+                                </span>\r\n+                            )}\r\n+                            <div\r\n+                                style={{\r\n+                                    display: \"flex\",\r\n+                                    justifyContent: \"space-between\",\r\n+                                    alignItems: \"center\",\r\n+                                    marginTop: \"10px\",\r\n+                                }}\r\n+                            >\r\n+                                <span style={{ fontSize: \"14px\", color: \"#6B7280\" }}>Resend OTP in {timer}s</span>\r\n+                                <Button\r\n+                                    variant=\"text\"\r\n+                                    disabled={timer > 0}\r\n+                                    onClick={() => SendOtp('resend')}\r\n+                                    sx={{\r\n+                                        fontSize: \"14px\",\r\n+                                        textTransform: \"capitalize\",\r\n+                                        color: timer > 0 ? \"#9CA3AF\" : \"#0EA5EA\",\r\n+                                    }}\r\n+                                >\r\n+                                    Resend\r\n+                                </Button>\r\n+                            </div>\r\n+                            <Button\r\n+                                onClick={handleOtpSubmit}\r\n+                                fullWidth\r\n+                                variant=\"contained\"\r\n+                                sx={{\r\n+                                    background: \"#18A5C3\",\r\n+                                    color: \"white\",\r\n+                                    borderRadius: \"8px\",\r\n+                                    textTransform: \"capitalize\",\r\n+                                    p: \"14px 40px\",\r\n+                                    mt: 2,\r\n+                                }}\r\n+                                disabled={isLoading || otp.length !== 4}\r\n+                            >\r\n+                                {isLoading ? <CircularProgress size={24} sx={{ color: \"black\" }} /> : \"Submit\"}\r\n+                            </Button>\r\n+                        </Box>\r\n+                    ) : (\r\n+                        // Reset Password Step\r\n+                        <Box sx={{ width: \"100%\" }} component={'form'} onSubmit={handleSubmit4(UpdatePassword)}>\r\n+                            <Typography\r\n+                                className=\"heading-font\"\r\n+                                variant=\"h5\"\r\n+                                mb={2}\r\n+                                sx={{\r\n+                                    fontWeight: \"bold\",\r\n+                                    textAlign: \"center\",\r\n+\r\n+\r\n+                                }}\r\n+                            >\r\n+                                Reset Password\r\n+                            </Typography>\r\n+                            {/* Password Field */}\r\n+                            <TextField\r\n+                                fullWidth\r\n+                                placeholder=\"Password\"\r\n+                                variant=\"outlined\"\r\n+\r\n+                                type={showPassword ? \"text\" : \"password\"}\r\n+                                {...register4(\"password\", {\r\n+                                    required: \"Password is required\",\r\n+                                })}\r\n+                                error={!!errors4.password}\r\n+                                helperText={\r\n+                                    errors4.password ? errors4.password.message : \"\"\r\n+                                }\r\n+                                InputProps={{\r\n+\r\n+                                    endAdornment: (\r\n+                                        <InputAdornment position=\"end\">\r\n+                                            <IconButton\r\n+                                                onClick={() => setShowPassword(!showPassword)}\r\n+                                                edge=\"end\"\r\n+                                                sx={{\r\n+                                                    \":focus\": {\r\n+                                                        outline: \"none !important\"\r\n+                                                    }\r\n+                                                }}\r\n+                                            >\r\n+                                                {showPassword ? (\r\n+                                                    <VisibilityIcon\r\n+                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n+                                                    />\r\n+                                                ) : (\r\n+                                                    <VisibilityOffIcon\r\n+                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            </IconButton>\r\n+                                        </InputAdornment>\r\n+                                    ),\r\n+                                    style: {\r\n+                                        color: \"#0F172A\",\r\n+                                        fontSize: \"16px\",\r\n+                                        borderRadius: 8, // Rounded corners\r\n+                                    },\r\n+                                }}\r\n+                                sx={{\r\n+                                    my: 1,\r\n+                                    backgroundColor: \"#1E1E1E\", // Dark background color\r\n+                                    \"& .MuiOutlinedInput-root\": {\r\n+                                        backgroundColor: \"white\",\r\n+                                        \"& fieldset\": { borderColor: \"rgb(182, 182, 182)\" }, // Blue border\r\n+                                        \"&:hover fieldset\": { borderColor: \"rgb(182, 182, 182)\" },\r\n+                                        \"&.Mui-focused fieldset\": {\r\n+                                            borderColor: \"rgb(182, 182, 182)\",\r\n+                                        },\r\n+                                    },\r\n+                                    \"&.MuiFormControl-fullWidth\": {\r\n+                                        background: \"transparent !important\",\r\n+                                        borderRadius: '10px !important'\r\n+                                    },\r\n+                                    \"& .MuiInputLabel-root\": { color: \"black\" },\r\n+                                    \"& .MuiInputLabel-root.Mui-focused\": { color: \"black\" },\r\n+                                }}\r\n+                            />\r\n+\r\n+                            {/* Confirm Password Field */}\r\n+                            <TextField\r\n+                                fullWidth\r\n+                                placeholder=\"Confirm Password\"\r\n+\r\n+                                variant=\"outlined\"\r\n+                                type={showPassword2 ? \"text\" : \"password\"}\r\n+                                {...register4(\"confirmPassword\", {\r\n+                                    required: \"Confirm Password is required\",\r\n+                                    validate: (value) =>\r\n+                                        value === getValues4(\"password\") ||\r\n+                                        \"Passwords do not match\",\r\n+                                })}\r\n+                                error={!!errors4.confirmPassword}\r\n+                                helperText={\r\n+                                    errors4.confirmPassword\r\n+                                        ? errors4.confirmPassword.message\r\n+                                        : \"\"\r\n+                                }\r\n+                                InputProps={{\r\n+\r\n+                                    endAdornment: (\r\n+                                        <InputAdornment position=\"end\">\r\n+                                            <IconButton\r\n+                                                onClick={() => setShowPassword2(!showPassword2)}\r\n+                                                edge=\"end\"\r\n+                                                sx={{\r\n+                                                    \":focus\": {\r\n+                                                        outline: \"none !important\"\r\n+                                                    }\r\n+                                                }}\r\n+                                            >\r\n+                                                {showPassword2 ? (\r\n+                                                    <VisibilityIcon\r\n+                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n+                                                    />\r\n+                                                ) : (\r\n+                                                    <VisibilityOffIcon\r\n+                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            </IconButton>\r\n+                                        </InputAdornment>\r\n+                                    ),\r\n+                                    style: {\r\n+                                        color: \"#0F172A\",\r\n+                                        fontSize: \"16px\",\r\n+                                        borderRadius: 8, // Rounded corners\r\n+                                    },\r\n+                                }}\r\n+                                sx={{\r\n+                                    my: 1,\r\n+                                    backgroundColor: \"#1E1E1E\", // Dark background color\r\n+                                    \"& .MuiOutlinedInput-root\": {\r\n+                                        backgroundColor: \"white\",\r\n+                                        \"& fieldset\": { borderColor: \"rgb(182, 182, 182)\" }, // Blue border\r\n+                                        \"&:hover fieldset\": { borderColor: \"rgb(182, 182, 182)\" },\r\n+                                        \"&.Mui-focused fieldset\": {\r\n+                                            borderColor: \"rgb(182, 182, 182)\",\r\n+                                        },\r\n+                                    },\r\n+                                    \"&.MuiFormControl-fullWidth\": {\r\n+                                        background: \"transparent !important\",\r\n+                                        borderRadius: '10px !important'\r\n+                                    },\r\n+                                    \"& .MuiInputLabel-root\": { color: \"black\" },\r\n+                                    \"& .MuiInputLabel-root.Mui-focused\": { color: \"black\" },\r\n+                                }}\r\n+                            />\r\n+\r\n+                            <Button\r\n+                                type={\"submit\"}\r\n+                                fullWidth\r\n+                                variant={\"contained\"}\r\n+                                sx={{\r\n+                                    background: \" #18A5C3\",\r\n+                                    color: 'white',\r\n+                                    borderRadius: \"8px\",\r\n+                                    mt: 2,\r\n+                                    textTransform: 'capitalize',\r\n+                                    p: \"14px 40px\",\r\n+                                    \"&.Mui-disabled\": {\r\n+                                        background: \"#337DBD\",\r\n+                                    },\r\n+                                }}\r\n+                                disabled={isLoading}\r\n+                            >\r\n+                                {isLoading ? (\r\n+                                    <CircularProgress\r\n+                                        sx={{\r\n+                                            \"&.MuiCircularProgress-root\": {\r\n+                                                width: \"26px !important\",\r\n+                                                height: \"26px !important\",\r\n+                                            },\r\n+                                            color: 'black',\r\n+                                        }}\r\n+                                    />\r\n+                                ) : (\r\n+                                    \"Submit\"\r\n+                                )}\r\n+                            </Button>\r\n+                        </Box>\r\n+                    )}\r\n+                </DialogContent>\r\n+            </Dialog>\r\n+            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n+\r\n+\r\n+\r\n+                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateConsentForm)} >\r\n+                    <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n+                        Create New Patient\r\n+                    </Typography>\r\n+\r\n+                    <Grid container mt={4} spacing={2}>\r\n+\r\n+                        <Grid item xs={10}>\r\n+                            <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+\r\n+                                 Picture :*\r\n+                            </InputLabel>\r\n+\r\n+                            <Controller\r\n+                                name=\"image\"\r\n+                                control={control}\r\n+                                rules={{ required: \" picture is required\" }}\r\n+                                render={() => (\r\n+                                    <Box\r\n+                                        component={\"div\"}\r\n+                                        onMouseEnter={() => setHovered(true)}\r\n+                                        onMouseLeave={() => setHovered(false)}\r\n+                                        sx={{\r\n+                                            position: \"relative\",\r\n+                                            width: 75,\r\n+                                            height: 75,\r\n+                                            mt: 2,\r\n+                                        }}\r\n+                                    >\r\n+                                        <Avatar\r\n+                                            src={imageURL}\r\n+                                            alt=\"Profile\"\r\n+                                            sx={{\r\n+                                                position: \"relative\",\r\n+                                                width: \"100%\",\r\n+                                                height: \"100%\",\r\n+                                                borderRadius: \"50%\",\r\n+                                                fontSize: 24,\r\n+                                                backgroundColor: imageURL ? \"\" : \"#0EA5EA\",\r\n+                                                color: \"white\",\r\n+                                                cursor: \"pointer\",\r\n+                                                objectFit: \"cover\",\r\n+                                                textTransform: \"capitalize\",\r\n+                                            }}\r\n+                                            onClick={handleImageClick}\r\n+                                        />\r\n+\r\n+                                        {hovered && <IconButton\r\n+                                            sx={{\r\n+                                                position: \"absolute\",\r\n+                                                top: \"0\",\r\n+                                                left: \"0\",\r\n+                                                width: \"100%\",\r\n+                                                padding: \"9px 15px\",\r\n+                                                color: \"white\",\r\n+                                                backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n+                                                borderRadius: \"50%\",\r\n+                                                display: \"block\",\r\n+                                                \"&:hover\": {\r\n+                                                    backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n+                                                },\r\n+                                            }}\r\n+                                            onClick={handleImageClick}\r\n+                                        >\r\n+                                            <UploadIcon />\r\n+                                            <Box sx={{ fontSize: \"12px\" }}>Upload Image</Box>\r\n+                                        </IconButton>}\r\n+\r\n+                                        <input\r\n+                                            type=\"file\"\r\n+                                            ref={fileInputRef}\r\n+                                            style={{ display: \"none\" }}\r\n+                                            onChange={handleFileChange}\r\n+                                            accept=\"image/*\"\r\n+                                        />\r\n+                                    </Box>\r\n+                                )}\r\n+                            />\r\n+\r\n+                            {(errors.image && !imageURL) && (\r\n+                                <Typography sx={{ color: \"red\", fontSize: \"12px\", mt: 1 }}>\r\n+                                    {errors.image.message}\r\n+                                </Typography>\r\n+                            )}\r\n+                        </Grid>\r\n+                        {/* <Grid item xs={5} display={'flex'} alignItems={'flex-end'}>\r\n+              <PrimaryButton onClick={() => SendOtp()} title={\"Update Password\"} />\r\n+            </Grid> */}\r\n+                        <Grid item xs={3} mt={2}>\r\n+                        <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+\r\n+                                Title :*\r\n+                            </InputLabel>\r\n                             <SelectField\r\n                                 size={'small'}\r\n                                 newLabel={'Select Type'}\r\n                                 fullWidth={true}\r\n-                                options={[{ id: false, name: 'Active' }, { id: true, name: 'InActive' }]}\r\n-                                selected={status}\r\n+                                options={[{ id: 'Ms', name: 'Ms' }, { id: 'Miss', name: 'Miss' }, { id: 'Mrs', name: 'Mrs' }, { id: 'Mr', name: 'Mr' }]}\r\n+                                selected={title}\r\n                                 onSelect={(value) => {\r\n-                                    setStatus(value)\r\n-                                    getData(value)\r\n+                                    setTitle(value)\r\n \r\n+\r\n                                 }}\r\n-                            // error={errors2?.type?.message}\r\n-                            // register={register2(\"type\", {\r\n-                            //     required: 'Please select type.',\r\n-                            // })}\r\n+                            error={errors?.title?.message}\r\n+                            register={register(\"title\", {\r\n+                                required: 'Please select title.',\r\n+                            })}\r\n                             />\r\n \r\n                         </Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"First Name :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"First Name\"}\r\n+                            error={errors?.fname?.message}\r\n+                            register={register(\"fname\", {\r\n+                                required:\r\n+                                    \"Please enter your fname.\"\r\n \r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Last Name :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Last Name\"}\r\n+                            error={errors?.lname?.message}\r\n+                            register={register(\"lname\", {\r\n+                                required:\r\n+                                    \"Please enter your lname.\"\r\n \r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Email :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Email\"}\r\n+                            error={errors?.email?.message}\r\n+                            register={register(\"email\", {\r\n+                                required:\r\n+                                    \"Please enter your email.\"\r\n \r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}>\r\n+                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                                <Grid container spacing={2}>\r\n+                                    {/* Single Date Selection */}\r\n+                                    <Grid item xs={12}>\r\n+                                        <Box>\r\n+                                            <InputLabel sx={{\r\n+                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n+                                                fontSize: \"14px\",\r\n+                                                color: \"#333\",\r\n+                                                marginBottom: 1.5,\r\n+                                            }}>\r\n+                                                DOB :*\r\n+                                            </InputLabel>\r\n+                                            <Controller\r\n+                                                name=\"selectedDate\"\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: '12px',\r\n+                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n+                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.selectedDate && (\r\n+                                                <Typography color=\"error\">{errors.selectedDate.message}</Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n \r\n \r\n-                        <Box sx={{ display: 'flex', justifyContent: 'center' }} >\r\n \r\n-                            <PrimaryButton bgcolor={'black'} title=\"Submit\" type=\"submit\" />\r\n \r\n-                        </Box>\r\n+                                </Grid>\r\n \r\n+\r\n+                            </LocalizationProvider>\r\n+                        </Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Phone Number :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Phone Number\"}\r\n+                            error={errors?.phone?.message}\r\n+                            register={register(\"phone\", {\r\n+                                required:\r\n+                                    \"Please enter your phone.\"\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Post Code :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Post Code\"}\r\n+                            error={errors?.post?.message}\r\n+                            register={register(\"post\", {\r\n+                                required:\r\n+                                    \"Please enter your postcode.\"\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Address :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Address\"}\r\n+                            error={errors?.address?.message}\r\n+                            register={register(\"address\", {\r\n+                                required:\r\n+                                    \"Please enter your address.\"\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Notes :\"}\r\n+                            multiline\r\n+                            rows={3}\r\n+                            size={'small'}\r\n+                            placeholder={\"Notes\"}\r\n+                            error={errors?.notes?.message}\r\n+                            register={register(\"notes\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+\r\n                     </Grid>\r\n-                </Box>\r\n-            </SimpleDialog>\r\n-            <ConfirmationDialog\r\n-                open={confirmationDialog}\r\n-                onClose={() => setConfirmationDialog(false)}\r\n-                message={\"Are you sure you want to delete?\"}\r\n-                action={async () => {\r\n-                    setConfirmationDialog(false);\r\n-                    HandleDelete()\r\n+                    <Divider sx={{mt:4}} />\r\n+                    <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n+                        Next of Kin Details\r\n+                    </Typography>\r\n+                    <Grid container mt={4} spacing={2}>\r\n \r\n-                }}\r\n-            />\r\n-            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff !important', borderRadius: '12px' }}>\r\n-                <Box sx={{ p: 2 }}>\r\n-                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n-                    <Typography variant=\"h4\" sx={{ mt: 4,mb:4, fontWeight: 600 }}>\r\n-                    Aftercare Documents\r\n-                </Typography>\r\n-                        <PrimaryButton onClick={() => navigate('/create-aftercare-document')} title={\"Create\"} />\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Name :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Name\"}\r\n+                            error={errors?.name?.message}\r\n+                            register={register(\"name\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Email :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Email\"}\r\n+                            error={errors?.kinemail?.message}\r\n+                            register={register(\"kinemail\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Phone Number :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Phone Number\"}\r\n+                            error={errors?.kinphone?.message}\r\n+                            register={register(\"kinphone\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Address :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Address\"}\r\n+                            error={errors?.kinaddress?.message}\r\n+                            register={register(\"kinaddress\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+\r\n+\r\n+                    </Grid>\r\n+                    <Divider sx={{mt:4}} />\r\n+                    <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n+                        General Practitioners(GP / Doctors)\r\n+                    </Typography>\r\n+                    <Grid container mt={4} spacing={2}>\r\n+\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Name :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Name\"}\r\n+                            error={errors?.genname?.message}\r\n+                            register={register(\"genname\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Email :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Email\"}\r\n+                            error={errors?.genemail?.message}\r\n+                            register={register(\"genemail\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Phone Number :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Phone Number\"}\r\n+                            error={errors?.genphone?.message}\r\n+                            register={register(\"genphone\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Address :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Address\"}\r\n+                            error={errors?.genaddress?.message}\r\n+                            register={register(\"genaddress\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+\r\n+\r\n+                    </Grid>\r\n+                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n+                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n-                    {<DataTable data={data} columns={columns} />}\r\n                 </Box>\r\n             </Paper>\r\n-        </div>\r\n+        </div >\r\n     )\r\n }\r\n \r\n-export default ConsentForms\r\n+export default CreateConsentForm\r\n"
                },
                {
                    "date": 1743247965181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,282 +281,9 @@\n \r\n \r\n     return (\r\n         <div>\r\n-            <Dialog open={open} onClose={() => setOpen(false)} fullWidth maxWidth=\"sm\">\r\n-\r\n-                <DialogContent>\r\n-                    {step === 1 ? (\r\n-                        // OTP Verification Step\r\n-                        <Box>\r\n-                            <Typography\r\n-                                className=\"heading-font\"\r\n-                                variant=\"h5\"\r\n-                                mb={2}\r\n-                                sx={{\r\n-                                    fontWeight: \"bold\",\r\n-                                    textAlign: \"center\",\r\n-\r\n-\r\n-                                }}\r\n-                            >\r\n-                                Enter OTP\r\n-                            </Typography>\r\n-                            <div className=\"otp-container\" style={{ display: \"flex\", justifyContent: \"center\", gap: \"8px\" }}>\r\n-                                <OTPInput\r\n-                                    value={otp}\r\n-                                    onChange={(otp) => {\r\n-                                        setOtp(otp);\r\n-                                        setOtpError(false);\r\n-                                    }}\r\n-                                    numInputs={4}\r\n-                                    renderSeparator={<span className=\"separator\">-</span>}\r\n-                                    renderInput={(props) => (\r\n-                                        <input\r\n-                                            className=\"otp-input\"\r\n-                                            {...props}\r\n-                                            style={{\r\n-                                                width: \"40px\",\r\n-                                                height: \"40px\",\r\n-                                                textAlign: \"center\",\r\n-                                                fontSize: \"18px\",\r\n-                                                border: \"1px solid #ccc\",\r\n-                                                borderRadius: \"5px\",\r\n-                                            }}\r\n-                                        />\r\n-                                    )}\r\n-                                />\r\n-                            </div>\r\n-                            {otpError && (\r\n-                                <span style={{ color: \"red\", marginTop: \"5px\", fontSize: \"12px\" }}>\r\n-                                    &nbsp; OTP is Invalid\r\n-                                </span>\r\n-                            )}\r\n-                            <div\r\n-                                style={{\r\n-                                    display: \"flex\",\r\n-                                    justifyContent: \"space-between\",\r\n-                                    alignItems: \"center\",\r\n-                                    marginTop: \"10px\",\r\n-                                }}\r\n-                            >\r\n-                                <span style={{ fontSize: \"14px\", color: \"#6B7280\" }}>Resend OTP in {timer}s</span>\r\n-                                <Button\r\n-                                    variant=\"text\"\r\n-                                    disabled={timer > 0}\r\n-                                    onClick={() => SendOtp('resend')}\r\n-                                    sx={{\r\n-                                        fontSize: \"14px\",\r\n-                                        textTransform: \"capitalize\",\r\n-                                        color: timer > 0 ? \"#9CA3AF\" : \"#0EA5EA\",\r\n-                                    }}\r\n-                                >\r\n-                                    Resend\r\n-                                </Button>\r\n-                            </div>\r\n-                            <Button\r\n-                                onClick={handleOtpSubmit}\r\n-                                fullWidth\r\n-                                variant=\"contained\"\r\n-                                sx={{\r\n-                                    background: \"#18A5C3\",\r\n-                                    color: \"white\",\r\n-                                    borderRadius: \"8px\",\r\n-                                    textTransform: \"capitalize\",\r\n-                                    p: \"14px 40px\",\r\n-                                    mt: 2,\r\n-                                }}\r\n-                                disabled={isLoading || otp.length !== 4}\r\n-                            >\r\n-                                {isLoading ? <CircularProgress size={24} sx={{ color: \"black\" }} /> : \"Submit\"}\r\n-                            </Button>\r\n-                        </Box>\r\n-                    ) : (\r\n-                        // Reset Password Step\r\n-                        <Box sx={{ width: \"100%\" }} component={'form'} onSubmit={handleSubmit4(UpdatePassword)}>\r\n-                            <Typography\r\n-                                className=\"heading-font\"\r\n-                                variant=\"h5\"\r\n-                                mb={2}\r\n-                                sx={{\r\n-                                    fontWeight: \"bold\",\r\n-                                    textAlign: \"center\",\r\n-\r\n-\r\n-                                }}\r\n-                            >\r\n-                                Reset Password\r\n-                            </Typography>\r\n-                            {/* Password Field */}\r\n-                            <TextField\r\n-                                fullWidth\r\n-                                placeholder=\"Password\"\r\n-                                variant=\"outlined\"\r\n-\r\n-                                type={showPassword ? \"text\" : \"password\"}\r\n-                                {...register4(\"password\", {\r\n-                                    required: \"Password is required\",\r\n-                                })}\r\n-                                error={!!errors4.password}\r\n-                                helperText={\r\n-                                    errors4.password ? errors4.password.message : \"\"\r\n-                                }\r\n-                                InputProps={{\r\n-\r\n-                                    endAdornment: (\r\n-                                        <InputAdornment position=\"end\">\r\n-                                            <IconButton\r\n-                                                onClick={() => setShowPassword(!showPassword)}\r\n-                                                edge=\"end\"\r\n-                                                sx={{\r\n-                                                    \":focus\": {\r\n-                                                        outline: \"none !important\"\r\n-                                                    }\r\n-                                                }}\r\n-                                            >\r\n-                                                {showPassword ? (\r\n-                                                    <VisibilityIcon\r\n-                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n-                                                    />\r\n-                                                ) : (\r\n-                                                    <VisibilityOffIcon\r\n-                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            </IconButton>\r\n-                                        </InputAdornment>\r\n-                                    ),\r\n-                                    style: {\r\n-                                        color: \"#0F172A\",\r\n-                                        fontSize: \"16px\",\r\n-                                        borderRadius: 8, // Rounded corners\r\n-                                    },\r\n-                                }}\r\n-                                sx={{\r\n-                                    my: 1,\r\n-                                    backgroundColor: \"#1E1E1E\", // Dark background color\r\n-                                    \"& .MuiOutlinedInput-root\": {\r\n-                                        backgroundColor: \"white\",\r\n-                                        \"& fieldset\": { borderColor: \"rgb(182, 182, 182)\" }, // Blue border\r\n-                                        \"&:hover fieldset\": { borderColor: \"rgb(182, 182, 182)\" },\r\n-                                        \"&.Mui-focused fieldset\": {\r\n-                                            borderColor: \"rgb(182, 182, 182)\",\r\n-                                        },\r\n-                                    },\r\n-                                    \"&.MuiFormControl-fullWidth\": {\r\n-                                        background: \"transparent !important\",\r\n-                                        borderRadius: '10px !important'\r\n-                                    },\r\n-                                    \"& .MuiInputLabel-root\": { color: \"black\" },\r\n-                                    \"& .MuiInputLabel-root.Mui-focused\": { color: \"black\" },\r\n-                                }}\r\n-                            />\r\n-\r\n-                            {/* Confirm Password Field */}\r\n-                            <TextField\r\n-                                fullWidth\r\n-                                placeholder=\"Confirm Password\"\r\n-\r\n-                                variant=\"outlined\"\r\n-                                type={showPassword2 ? \"text\" : \"password\"}\r\n-                                {...register4(\"confirmPassword\", {\r\n-                                    required: \"Confirm Password is required\",\r\n-                                    validate: (value) =>\r\n-                                        value === getValues4(\"password\") ||\r\n-                                        \"Passwords do not match\",\r\n-                                })}\r\n-                                error={!!errors4.confirmPassword}\r\n-                                helperText={\r\n-                                    errors4.confirmPassword\r\n-                                        ? errors4.confirmPassword.message\r\n-                                        : \"\"\r\n-                                }\r\n-                                InputProps={{\r\n-\r\n-                                    endAdornment: (\r\n-                                        <InputAdornment position=\"end\">\r\n-                                            <IconButton\r\n-                                                onClick={() => setShowPassword2(!showPassword2)}\r\n-                                                edge=\"end\"\r\n-                                                sx={{\r\n-                                                    \":focus\": {\r\n-                                                        outline: \"none !important\"\r\n-                                                    }\r\n-                                                }}\r\n-                                            >\r\n-                                                {showPassword2 ? (\r\n-                                                    <VisibilityIcon\r\n-                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n-                                                    />\r\n-                                                ) : (\r\n-                                                    <VisibilityOffIcon\r\n-                                                        sx={{ color: \"#0F172A\", fontSize: \"20px\" }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            </IconButton>\r\n-                                        </InputAdornment>\r\n-                                    ),\r\n-                                    style: {\r\n-                                        color: \"#0F172A\",\r\n-                                        fontSize: \"16px\",\r\n-                                        borderRadius: 8, // Rounded corners\r\n-                                    },\r\n-                                }}\r\n-                                sx={{\r\n-                                    my: 1,\r\n-                                    backgroundColor: \"#1E1E1E\", // Dark background color\r\n-                                    \"& .MuiOutlinedInput-root\": {\r\n-                                        backgroundColor: \"white\",\r\n-                                        \"& fieldset\": { borderColor: \"rgb(182, 182, 182)\" }, // Blue border\r\n-                                        \"&:hover fieldset\": { borderColor: \"rgb(182, 182, 182)\" },\r\n-                                        \"&.Mui-focused fieldset\": {\r\n-                                            borderColor: \"rgb(182, 182, 182)\",\r\n-                                        },\r\n-                                    },\r\n-                                    \"&.MuiFormControl-fullWidth\": {\r\n-                                        background: \"transparent !important\",\r\n-                                        borderRadius: '10px !important'\r\n-                                    },\r\n-                                    \"& .MuiInputLabel-root\": { color: \"black\" },\r\n-                                    \"& .MuiInputLabel-root.Mui-focused\": { color: \"black\" },\r\n-                                }}\r\n-                            />\r\n-\r\n-                            <Button\r\n-                                type={\"submit\"}\r\n-                                fullWidth\r\n-                                variant={\"contained\"}\r\n-                                sx={{\r\n-                                    background: \" #18A5C3\",\r\n-                                    color: 'white',\r\n-                                    borderRadius: \"8px\",\r\n-                                    mt: 2,\r\n-                                    textTransform: 'capitalize',\r\n-                                    p: \"14px 40px\",\r\n-                                    \"&.Mui-disabled\": {\r\n-                                        background: \"#337DBD\",\r\n-                                    },\r\n-                                }}\r\n-                                disabled={isLoading}\r\n-                            >\r\n-                                {isLoading ? (\r\n-                                    <CircularProgress\r\n-                                        sx={{\r\n-                                            \"&.MuiCircularProgress-root\": {\r\n-                                                width: \"26px !important\",\r\n-                                                height: \"26px !important\",\r\n-                                            },\r\n-                                            color: 'black',\r\n-                                        }}\r\n-                                    />\r\n-                                ) : (\r\n-                                    \"Submit\"\r\n-                                )}\r\n-                            </Button>\r\n-                        </Box>\r\n-                    )}\r\n-                </DialogContent>\r\n-            </Dialog>\r\n+           \r\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n \r\n \r\n \r\n@@ -566,95 +293,9 @@\n                     </Typography>\r\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n-                        <Grid item xs={10}>\r\n-                            <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n-\r\n-                                 Picture :*\r\n-                            </InputLabel>\r\n-\r\n-                            <Controller\r\n-                                name=\"image\"\r\n-                                control={control}\r\n-                                rules={{ required: \" picture is required\" }}\r\n-                                render={() => (\r\n-                                    <Box\r\n-                                        component={\"div\"}\r\n-                                        onMouseEnter={() => setHovered(true)}\r\n-                                        onMouseLeave={() => setHovered(false)}\r\n-                                        sx={{\r\n-                                            position: \"relative\",\r\n-                                            width: 75,\r\n-                                            height: 75,\r\n-                                            mt: 2,\r\n-                                        }}\r\n-                                    >\r\n-                                        <Avatar\r\n-                                            src={imageURL}\r\n-                                            alt=\"Profile\"\r\n-                                            sx={{\r\n-                                                position: \"relative\",\r\n-                                                width: \"100%\",\r\n-                                                height: \"100%\",\r\n-                                                borderRadius: \"50%\",\r\n-                                                fontSize: 24,\r\n-                                                backgroundColor: imageURL ? \"\" : \"#0EA5EA\",\r\n-                                                color: \"white\",\r\n-                                                cursor: \"pointer\",\r\n-                                                objectFit: \"cover\",\r\n-                                                textTransform: \"capitalize\",\r\n-                                            }}\r\n-                                            onClick={handleImageClick}\r\n-                                        />\r\n-\r\n-                                        {hovered && <IconButton\r\n-                                            sx={{\r\n-                                                position: \"absolute\",\r\n-                                                top: \"0\",\r\n-                                                left: \"0\",\r\n-                                                width: \"100%\",\r\n-                                                padding: \"9px 15px\",\r\n-                                                color: \"white\",\r\n-                                                backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n-                                                borderRadius: \"50%\",\r\n-                                                display: \"block\",\r\n-                                                \"&:hover\": {\r\n-                                                    backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n-                                                },\r\n-                                            }}\r\n-                                            onClick={handleImageClick}\r\n-                                        >\r\n-                                            <UploadIcon />\r\n-                                            <Box sx={{ fontSize: \"12px\" }}>Upload Image</Box>\r\n-                                        </IconButton>}\r\n-\r\n-                                        <input\r\n-                                            type=\"file\"\r\n-                                            ref={fileInputRef}\r\n-                                            style={{ display: \"none\" }}\r\n-                                            onChange={handleFileChange}\r\n-                                            accept=\"image/*\"\r\n-                                        />\r\n-                                    </Box>\r\n-                                )}\r\n-                            />\r\n-\r\n-                            {(errors.image && !imageURL) && (\r\n-                                <Typography sx={{ color: \"red\", fontSize: \"12px\", mt: 1 }}>\r\n-                                    {errors.image.message}\r\n-                                </Typography>\r\n-                            )}\r\n-                        </Grid>\r\n-                        {/* <Grid item xs={5} display={'flex'} alignItems={'flex-end'}>\r\n-              <PrimaryButton onClick={() => SendOtp()} title={\"Update Password\"} />\r\n-            </Grid> */}\r\n+                      \r\n                         <Grid item xs={3} mt={2}>\r\n                         <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n"
                },
                {
                    "date": 1743247975878,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -309,9 +309,9 @@\n                             <SelectField\r\n                                 size={'small'}\r\n                                 newLabel={'Select Type'}\r\n                                 fullWidth={true}\r\n-                                options={[{ id: 'Ms', name: 'Ms' }, { id: 'Miss', name: 'Miss' }, { id: 'Mrs', name: 'Mrs' }, { id: 'Mr', name: 'Mr' }]}\r\n+                                options={[]}\r\n                                 selected={title}\r\n                                 onSelect={(value) => {\r\n                                     setTitle(value)\r\n \r\n"
                },
                {
                    "date": 1743247984423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,13 +303,13 @@\n                                 color: \"#333\",\r\n                                 marginBottom: \"4px\",\r\n                             }}>\r\n \r\n-                                Title :*\r\n+                                Select Form :*\r\n                             </InputLabel>\r\n                             <SelectField\r\n                                 size={'small'}\r\n-                                newLabel={'Select Type'}\r\n+                                newLabel={'Select Form'}\r\n                                 fullWidth={true}\r\n                                 options={[]}\r\n                                 selected={title}\r\n                                 onSelect={(value) => {\r\n"
                },
                {
                    "date": 1743247990972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -303,9 +303,9 @@\n                                 color: \"#333\",\r\n                                 marginBottom: \"4px\",\r\n                             }}>\r\n \r\n-                                Select Form :*\r\n+                                Select Form :\r\n                             </InputLabel>\r\n                             <SelectField\r\n                                 size={'small'}\r\n                                 newLabel={'Select Form'}\r\n@@ -318,9 +318,9 @@\n \r\n                                 }}\r\n                             error={errors?.title?.message}\r\n                             register={register(\"title\", {\r\n-                                required: 'Please select title.',\r\n+                                required: false,\r\n                             })}\r\n                             />\r\n \r\n                         </Grid>\r\n"
                },
                {
                    "date": 1743248034035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -323,8 +323,118 @@\n                             })}\r\n                             />\r\n \r\n                         </Grid>\r\n+                        <Grid item xs={3} mt={2}>\r\n+                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                                <Grid container spacing={2}>\r\n+                                    {/* Single Date Selection */}\r\n+                                    <Grid item xs={12}>\r\n+                                        <Box>\r\n+                                            <InputLabel sx={{\r\n+                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                                fontSize: \"14px\",\r\n+                                                color: \"#333\",\r\n+                                                marginBottom: 1.5,\r\n+                                            }}>\r\n+                                                DOB :*\r\n+                                            </InputLabel>\r\n+                                            <Controller\r\n+                                                name=\"selectedDate\"\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: '12px',\r\n+                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n+                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.selectedDate && (\r\n+                                                <Typography color=\"error\">{errors.selectedDate.message}</Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n+\r\n+\r\n+\r\n+\r\n+                                </Grid>\r\n+\r\n+\r\n+                            </LocalizationProvider>\r\n+                        </Grid>\r\n+                        <Grid item xs={3} mt={2}>\r\n+                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                                <Grid container spacing={2}>\r\n+                                    {/* Single Date Selection */}\r\n+                                    <Grid item xs={12}>\r\n+                                        <Box>\r\n+                                            <InputLabel sx={{\r\n+                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                                fontSize: \"14px\",\r\n+                                                color: \"#333\",\r\n+                                                marginBottom: 1.5,\r\n+                                            }}>\r\n+                                                DOB :*\r\n+                                            </InputLabel>\r\n+                                            <Controller\r\n+                                                name=\"selectedDate\"\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: '12px',\r\n+                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n+                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.selectedDate && (\r\n+                                                <Typography color=\"error\">{errors.selectedDate.message}</Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n+\r\n+\r\n+\r\n+\r\n+                                </Grid>\r\n+\r\n+\r\n+                            </LocalizationProvider>\r\n+                        </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"First Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"First Name\"}\r\n"
                },
                {
                    "date": 1743248045099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n                                                 fontSize: \"14px\",\r\n                                                 color: \"#333\",\r\n                                                 marginBottom: 1.5,\r\n                                             }}>\r\n-                                                DOB :*\r\n+                                                Traetment Date :*\r\n                                             </InputLabel>\r\n                                             <Controller\r\n                                                 name=\"selectedDate\"\r\n                                                 control={control}\r\n"
                },
                {
                    "date": 1743248053226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -336,9 +336,9 @@\n                                                 fontSize: \"14px\",\r\n                                                 color: \"#333\",\r\n                                                 marginBottom: 1.5,\r\n                                             }}>\r\n-                                                Traetment Date :*\r\n+                                                Treatment Date :*\r\n                                             </InputLabel>\r\n                                             <Controller\r\n                                                 name=\"selectedDate\"\r\n                                                 control={control}\r\n"
                },
                {
                    "date": 1743248058713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,9 +339,9 @@\n                                             }}>\r\n                                                 Treatment Date :*\r\n                                             </InputLabel>\r\n                                             <Controller\r\n-                                                name=\"selectedDate\"\r\n+                                                name=\"traetmentDate\"\r\n                                                 control={control}\r\n                                                 rules={{ required: \"Please select a date\" }}\r\n                                                 render={({ field }) => (\r\n                                                     <DatePicker\r\n"
                },
                {
                    "date": 1743248065052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -339,9 +339,9 @@\n                                             }}>\r\n                                                 Treatment Date :*\r\n                                             </InputLabel>\r\n                                             <Controller\r\n-                                                name=\"traetmentDate\"\r\n+                                                name=\"treatmentDate\"\r\n                                                 control={control}\r\n                                                 rules={{ required: \"Please select a date\" }}\r\n                                                 render={({ field }) => (\r\n                                                     <DatePicker\r\n@@ -364,10 +364,10 @@\n                                                         }}\r\n                                                     />\r\n                                                 )}\r\n                                             />\r\n-                                            {errors.selectedDate && (\r\n-                                                <Typography color=\"error\">{errors.selectedDate.message}</Typography>\r\n+                                            {errors.treatmentDate && (\r\n+                                                <Typography color=\"error\">{errors.treatmentDate.message}</Typography>\r\n                                             )}\r\n                                         </Box>\r\n                                     </Grid>\r\n \r\n"
                },
                {
                    "date": 1743248075602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -391,9 +391,9 @@\n                                                 fontSize: \"14px\",\r\n                                                 color: \"#333\",\r\n                                                 marginBottom: 1.5,\r\n                                             }}>\r\n-                                                DOB :*\r\n+                                                Consulatation Date :*\r\n                                             </InputLabel>\r\n                                             <Controller\r\n                                                 name=\"selectedDate\"\r\n                                                 control={control}\r\n"
                },
                {
                    "date": 1743248089603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -391,12 +391,12 @@\n                                                 fontSize: \"14px\",\r\n                                                 color: \"#333\",\r\n                                                 marginBottom: 1.5,\r\n                                             }}>\r\n-                                                Consulatation Date :*\r\n+                                                Consultation Date :*\r\n                                             </InputLabel>\r\n                                             <Controller\r\n-                                                name=\"selectedDate\"\r\n+                                                name=\"consultationDate\"\r\n                                                 control={control}\r\n                                                 rules={{ required: \"Please select a date\" }}\r\n                                                 render={({ field }) => (\r\n                                                     <DatePicker\r\n"
                },
                {
                    "date": 1743248137210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -419,10 +419,10 @@\n                                                         }}\r\n                                                     />\r\n                                                 )}\r\n                                             />\r\n-                                            {errors.selectedDate && (\r\n-                                                <Typography color=\"error\">{errors.selectedDate.message}</Typography>\r\n+                                            {errors.consultationDate && (\r\n+                                                <Typography color=\"error\">{errors.consultationDate.message}</Typography>\r\n                                             )}\r\n                                         </Box>\r\n                                     </Grid>\r\n \r\n@@ -434,9 +434,9 @@\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"First Name :*\"}\r\n+                            label={\"PatientFirst Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"First Name\"}\r\n                             error={errors?.fname?.message}\r\n                             register={register(\"fname\", {\r\n"
                },
                {
                    "date": 1743248142418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -434,11 +434,11 @@\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"PatientFirst Name :*\"}\r\n+                            label={\"Patient First Name :*\"}\r\n                             size={'small'}\r\n-                            placeholder={\"First Name\"}\r\n+                            placeholder={\"Patient First Name\"}\r\n                             error={errors?.fname?.message}\r\n                             register={register(\"fname\", {\r\n                                 required:\r\n                                     \"Please enter your fname.\"\r\n"
                },
                {
                    "date": 1743248154469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -445,11 +445,11 @@\n \r\n                             })}\r\n                         /></Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Last Name :*\"}\r\n+                            label={\"Patient Last Name :*\"}\r\n                             size={'small'}\r\n-                            placeholder={\"Last Name\"}\r\n+                            placeholder={\" Patient Last Name\"}\r\n                             error={errors?.lname?.message}\r\n                             register={register(\"lname\", {\r\n                                 required:\r\n                                     \"Please enter your lname.\"\r\n"
                },
                {
                    "date": 1743248170488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -456,11 +456,11 @@\n \r\n                             })}\r\n                         /></Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Email :*\"}\r\n+                            label={\"Patient Email :*\"}\r\n                             size={'small'}\r\n-                            placeholder={\"Email\"}\r\n+                            placeholder={\"PatientEmail\"}\r\n                             error={errors?.email?.message}\r\n                             register={register(\"email\", {\r\n                                 required:\r\n                                     \"Please enter your email.\"\r\n"
                },
                {
                    "date": 1743248203389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -458,16 +458,27 @@\n                         /></Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient Email :*\"}\r\n                             size={'small'}\r\n-                            placeholder={\"PatientEmail\"}\r\n+                            placeholder={\"Patient Email\"}\r\n                             error={errors?.email?.message}\r\n                             register={register(\"email\", {\r\n                                 required:\r\n                                     \"Please enter your email.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"PostCode :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Patient Email\"}\r\n+                            error={errors?.email?.message}\r\n+                            register={register(\"email\", {\r\n+                                required:\r\n+                                    \"Please enter your email.\"\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n                         <Grid item xs={3} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n                                     {/* Single Date Selection */}\r\n"
                },
                {
                    "date": 1743248212271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -467,11 +467,11 @@\n \r\n                             })}\r\n                         /></Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"PostCode :*\"}\r\n+                            label={\"Postcode :*\"}\r\n                             size={'small'}\r\n-                            placeholder={\"Patient Email\"}\r\n+                            placeholder={\"Postcode\"}\r\n                             error={errors?.email?.message}\r\n                             register={register(\"email\", {\r\n                                 required:\r\n                                     \"Please enter your email.\"\r\n"
                },
                {
                    "date": 1743248229776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -466,19 +466,9 @@\n                                     \"Please enter your email.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Postcode :*\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Postcode\"}\r\n-                            error={errors?.email?.message}\r\n-                            register={register(\"email\", {\r\n-                                required:\r\n-                                    \"Please enter your email.\"\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n+                     \r\n                         <Grid item xs={3} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n                                     {/* Single Date Selection */}\r\n"
                },
                {
                    "date": 1743248286874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,13 @@\n     const navigate = useNavigate()\r\n     const [userData, setUserData] = useState(null)\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm();\r\n     const [title, setTitle] = useState(null)\r\n+    const [patientType, setPatientType] = useState(\"existing\");\r\n \r\n+    const handleChange = (event) => {\r\n+      setPatientType(event.target.value);\r\n+    };\r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n     const [otpError, setOtpError] = useState(false);\r\n     const [timer, setTimer] = useState(30);\r\n"
                },
                {
                    "date": 1743248298297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,13 +21,9 @@\n     const navigate = useNavigate()\r\n     const [userData, setUserData] = useState(null)\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm();\r\n     const [title, setTitle] = useState(null)\r\n-    const [patientType, setPatientType] = useState(\"existing\");\r\n \r\n-    const handleChange = (event) => {\r\n-      setPatientType(event.target.value);\r\n-    };\r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n     const [otpError, setOtpError] = useState(false);\r\n     const [timer, setTimer] = useState(30);\r\n@@ -39,8 +35,13 @@\n     const [showPassword2, setShowPassword2] = useState(false);\r\n     const [otpToken, setOtpToken] = useState(null)\r\n     const [showPassword, setShowPassword] = useState(false);\r\n     const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n+    const [patientType, setPatientType] = useState(\"existing\");\r\n+\r\n+    const handleChange = (event) => {\r\n+      setPatientType(event.target.value);\r\n+    };\r\n     const {\r\n         register: register4,\r\n         handleSubmit: handleSubmit4,\r\n         setValue: setValue4,\r\n"
                },
                {
                    "date": 1743248337653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,8 +438,11 @@\n \r\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n+                        <Grid container >\r\n+\r\n+                        </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Patient First Name\"}\r\n"
                },
                {
                    "date": 1743248348330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,9 +439,9 @@\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n                         <Grid container >\r\n-\r\n+                        <Grid item xs={3} mt={2}></Grid>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n                             size={'small'}\r\n"
                },
                {
                    "date": 1743248354883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,10 +439,18 @@\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n                         <Grid container >\r\n-                        <Grid item xs={3} mt={2}></Grid>\r\n+                        <Grid item xs={3} mt={2}>\r\n+                        <FormControl component=\"fieldset\">\r\n+      <FormLabel component=\"legend\">Existing or New Patient</FormLabel>\r\n+      <RadioGroup row value={patientType} onChange={handleChange}>\r\n+        <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n+        <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n+      </RadioGroup>\r\n+    </FormControl>\r\n                         </Grid>\r\n+                        </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Patient First Name\"}\r\n"
                },
                {
                    "date": 1743248370042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import { useEffect, useRef, useState } from \"react\";\r\n import ApiServices from \"../../../services/Apis\";\r\n import { PrimaryButton } from \"../../../components/buttons\";\r\n-import { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, Grid, IconButton, InputAdornment, InputLabel, Paper, TextField, Typography } from \"@mui/material\";\r\n+import { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, FormLabel, Grid, IconButton, InputAdornment, InputLabel, Paper, Radio, RadioGroup, TextField, Typography } from \"@mui/material\";\r\n import InputField from \"../../../components/input\";\r\n import { Controller, useForm } from \"react-hook-form\";\r\n import { useNavigate } from \"react-router-dom\";\r\n import axios from \"axios\";\r\n@@ -38,9 +38,9 @@\n     const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n     const [patientType, setPatientType] = useState(\"existing\");\r\n \r\n     const handleChange = (event) => {\r\n-      setPatientType(event.target.value);\r\n+        setPatientType(event.target.value);\r\n     };\r\n     const {\r\n         register: register4,\r\n         handleSubmit: handleSubmit4,\r\n@@ -122,9 +122,9 @@\n     const CreateConsentForm = async () => {\r\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n-                title:title?.id,\r\n+                title: title?.id,\r\n                 first_name: getValues('fname'),\r\n                 last_name: getValues('lname'),\r\n                 dob: getValues('selectedDate'),\r\n                 address: getValues('address'),\r\n@@ -137,15 +137,15 @@\n                     name: getValues('name'),\r\n                     address: getValues('kinaddress'),\r\n                     email: getValues('kinemail'),\r\n                     phone: getValues('kinphone'),\r\n-                  },\r\n-                  general_practitioner: {\r\n+                },\r\n+                general_practitioner: {\r\n                     name: getValues('genname'),\r\n                     address: getValues('genaddress'),\r\n                     email: getValues('genemail'),\r\n                     phone: getValues('genphone'),\r\n-                  },\r\n+                },\r\n \r\n             };\r\n \r\n             const promise = ApiServices.CreateConsentForm(obj);\r\n@@ -286,9 +286,9 @@\n \r\n \r\n     return (\r\n         <div>\r\n-           \r\n+\r\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n \r\n \r\n \r\n@@ -298,11 +298,11 @@\n                     </Typography>\r\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n-                      \r\n+\r\n                         <Grid item xs={3} mt={2}>\r\n-                        <InputLabel sx={{\r\n+                            <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                 fontSize: \"14px\",\r\n                                 color: \"#333\",\r\n@@ -321,12 +321,12 @@\n                                     setTitle(value)\r\n \r\n \r\n                                 }}\r\n-                            error={errors?.title?.message}\r\n-                            register={register(\"title\", {\r\n-                                required: false,\r\n-                            })}\r\n+                                error={errors?.title?.message}\r\n+                                register={register(\"title\", {\r\n+                                    required: false,\r\n+                                })}\r\n                             />\r\n \r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}>\r\n@@ -439,18 +439,18 @@\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n                         <Grid container >\r\n-                        <Grid item xs={3} mt={2}>\r\n-                        <FormControl component=\"fieldset\">\r\n-      <FormLabel component=\"legend\">Existing or New Patient</FormLabel>\r\n-      <RadioGroup row value={patientType} onChange={handleChange}>\r\n-        <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n-        <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n-      </RadioGroup>\r\n-    </FormControl>\r\n+                            <Grid item xs={3} mt={2}>\r\n+                                <FormControl component=\"fieldset\">\r\n+                                    <FormLabel component=\"legend\">Existing or New Patient</FormLabel>\r\n+                                    <RadioGroup row value={patientType} onChange={handleChange}>\r\n+                                        <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n+                                        <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n+                                    </RadioGroup>\r\n+                                </FormControl>\r\n+                            </Grid>\r\n                         </Grid>\r\n-                        </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Patient First Name\"}\r\n@@ -482,9 +482,9 @@\n                                     \"Please enter your email.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                     \r\n+\r\n                         <Grid item xs={3} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n                                     {/* Single Date Selection */}\r\n@@ -587,9 +587,9 @@\n                         /></Grid>\r\n \r\n \r\n                     </Grid>\r\n-                    <Divider sx={{mt:4}} />\r\n+                    <Divider sx={{ mt: 4 }} />\r\n                     <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n                         Next of Kin Details\r\n                     </Typography>\r\n                     <Grid container mt={4} spacing={2}>\r\n@@ -645,9 +645,9 @@\n \r\n \r\n \r\n                     </Grid>\r\n-                    <Divider sx={{mt:4}} />\r\n+                    <Divider sx={{ mt: 4 }} />\r\n                     <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n                         General Practitioners(GP / Doctors)\r\n                     </Typography>\r\n                     <Grid container mt={4} spacing={2}>\r\n"
                },
                {
                    "date": 1743248383065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -438,9 +438,9 @@\n \r\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n-                        <Grid container >\r\n+                        <Grid container p={2} >\r\n                             <Grid item xs={3} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n                                     <FormLabel component=\"legend\">Existing or New Patient</FormLabel>\r\n                                     <RadioGroup row value={patientType} onChange={handleChange}>\r\n"
                },
                {
                    "date": 1743248402392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -441,9 +441,18 @@\n                         </Grid>\r\n                         <Grid container p={2} >\r\n                             <Grid item xs={3} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n-                                    <FormLabel component=\"legend\">Existing or New Patient</FormLabel>\r\n+                                <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+\r\n+                                Select Form :\r\n+                            </InputLabel>\r\n                                     <RadioGroup row value={patientType} onChange={handleChange}>\r\n                                         <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n                                         <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n                                     </RadioGroup>\r\n"
                },
                {
                    "date": 1743248408979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -441,18 +441,9 @@\n                         </Grid>\r\n                         <Grid container p={2} >\r\n                             <Grid item xs={3} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n-                                <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n-\r\n-                                Select Form :\r\n-                            </InputLabel>\r\n+                                 \r\n                                     <RadioGroup row value={patientType} onChange={handleChange}>\r\n                                         <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n                                         <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n                                     </RadioGroup>\r\n"
                },
                {
                    "date": 1743248419090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,8 +439,9 @@\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n                         <Grid container p={2} >\r\n+                            \r\n                             <Grid item xs={3} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n                                  \r\n                                     <RadioGroup row value={patientType} onChange={handleChange}>\r\n"
                },
                {
                    "date": 1743248428260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -441,8 +441,18 @@\n                         </Grid>\r\n                         <Grid container p={2} >\r\n                             \r\n                             <Grid item xs={3} mt={2}>\r\n+                            <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+\r\n+                                Select Form :\r\n+                            </InputLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n                                  \r\n                                     <RadioGroup row value={patientType} onChange={handleChange}>\r\n                                         <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n"
                },
                {
                    "date": 1743248443033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -449,9 +449,9 @@\n                                 color: \"#333\",\r\n                                 marginBottom: \"4px\",\r\n                             }}>\r\n \r\n-                                Select Form :\r\n+                                Existing or New Patient :\r\n                             </InputLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n                                  \r\n                                     <RadioGroup row value={patientType} onChange={handleChange}>\r\n"
                },
                {
                    "date": 1743248454945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -439,22 +439,22 @@\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n                         <Grid container p={2} >\r\n-                            \r\n+\r\n                             <Grid item xs={3} mt={2}>\r\n-                            <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+                                <InputLabel sx={{\r\n+                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n+                                    fontSize: \"14px\",\r\n+                                    color: \"#333\",\r\n+                                    marginBottom: \"4px\",\r\n+                                }}>\r\n \r\n-                                Existing or New Patient :\r\n-                            </InputLabel>\r\n+                                    Existing or New Patient :\r\n+                                </InputLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n-                                 \r\n+\r\n                                     <RadioGroup row value={patientType} onChange={handleChange}>\r\n                                         <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n                                         <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n                                     </RadioGroup>\r\n"
                },
                {
                    "date": 1743248460748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -459,8 +459,46 @@\n                                         <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n                             </Grid>\r\n+                            <Grid item xs={3} mt={2}>\r\n+                                <InputLabel sx={{\r\n+                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                    fontSize: \"14px\",\r\n+                                    color: \"#333\",\r\n+                                    marginBottom: \"4px\",\r\n+                                }}>\r\n+\r\n+                                    Existing or New Patient :\r\n+                                </InputLabel>\r\n+                                <FormControl component=\"fieldset\">\r\n+\r\n+                                    <RadioGroup row value={patientType} onChange={handleChange}>\r\n+                                        <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n+                                        <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n+                                    </RadioGroup>\r\n+                                </FormControl>\r\n+                            </Grid>\r\n+                            <Grid item xs={3} mt={2}>\r\n+                                <InputLabel sx={{\r\n+                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                    fontSize: \"14px\",\r\n+                                    color: \"#333\",\r\n+                                    marginBottom: \"4px\",\r\n+                                }}>\r\n+\r\n+                                    Existing or New Patient :\r\n+                                </InputLabel>\r\n+                                <FormControl component=\"fieldset\">\r\n+\r\n+                                    <RadioGroup row value={patientType} onChange={handleChange}>\r\n+                                        <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n+                                        <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n+                                    </RadioGroup>\r\n+                                </FormControl>\r\n+                            </Grid>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n                             size={'small'}\r\n"
                },
                {
                    "date": 1743248467327,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -460,25 +460,9 @@\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                                <InputLabel sx={{\r\n-                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                    fontSize: \"14px\",\r\n-                                    color: \"#333\",\r\n-                                    marginBottom: \"4px\",\r\n-                                }}>\r\n-\r\n-                                    Existing or New Patient :\r\n-                                </InputLabel>\r\n-                                <FormControl component=\"fieldset\">\r\n-\r\n-                                    <RadioGroup row value={patientType} onChange={handleChange}>\r\n-                                        <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n-                                        <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n-                                    </RadioGroup>\r\n-                                </FormControl>\r\n+                               asdas\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n                                 <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n"
                },
                {
                    "date": 1743248472641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -463,25 +463,9 @@\n                             <Grid item xs={3} mt={2}>\r\n                                asdas\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                                <InputLabel sx={{\r\n-                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                    fontSize: \"14px\",\r\n-                                    color: \"#333\",\r\n-                                    marginBottom: \"4px\",\r\n-                                }}>\r\n-\r\n-                                    Existing or New Patient :\r\n-                                </InputLabel>\r\n-                                <FormControl component=\"fieldset\">\r\n-\r\n-                                    <RadioGroup row value={patientType} onChange={handleChange}>\r\n-                                        <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n-                                        <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n-                                    </RadioGroup>\r\n-                                </FormControl>\r\n+                               klj\r\n                             </Grid>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n"
                },
                {
                    "date": 1743248487641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -460,9 +460,34 @@\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                               asdas\r\n+                            <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+\r\n+                                Select Form :\r\n+                            </InputLabel>\r\n+                            <SelectField\r\n+                                size={'small'}\r\n+                                newLabel={'Select Form'}\r\n+                                fullWidth={true}\r\n+                                options={[]}\r\n+                                selected={title}\r\n+                                onSelect={(value) => {\r\n+                                    setTitle(value)\r\n+\r\n+\r\n+                                }}\r\n+                                error={errors?.title?.message}\r\n+                                register={register(\"title\", {\r\n+                                    required: false,\r\n+                                })}\r\n+                            />\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n                                klj\r\n                             </Grid>\r\n"
                },
                {
                    "date": 1743248507628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,9 @@\n     const [otpToken, setOtpToken] = useState(null)\r\n     const [showPassword, setShowPassword] = useState(false);\r\n     const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n     const [patientType, setPatientType] = useState(\"existing\");\r\n+    const [patients, setPatients] = useState([])\r\n \r\n     const handleChange = (event) => {\r\n         setPatientType(event.target.value);\r\n     };\r\n@@ -488,9 +489,34 @@\n                                 })}\r\n                             />\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                               klj\r\n+                            <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+\r\n+                                Select Form :\r\n+                            </InputLabel>\r\n+                            <SelectField\r\n+                                size={'small'}\r\n+                                newLabel={'Select Form'}\r\n+                                fullWidth={true}\r\n+                                options={[]}\r\n+                                selected={title}\r\n+                                onSelect={(value) => {\r\n+                                    setTitle(value)\r\n+\r\n+\r\n+                                }}\r\n+                                error={errors?.title?.message}\r\n+                                register={register(\"title\", {\r\n+                                    required: false,\r\n+                                })}\r\n+                            />\r\n                             </Grid>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n"
                },
                {
                    "date": 1743248518724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,9 @@\n     const [showPassword, setShowPassword] = useState(false);\r\n     const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n     const [patientType, setPatientType] = useState(\"existing\");\r\n     const [patients, setPatients] = useState([])\r\n+    const [selectedPatient, setSelectedPatient] = useState(null)\r\n \r\n     const handleChange = (event) => {\r\n         setPatientType(event.target.value);\r\n     };\r\n"
                },
                {
                    "date": 1743248530193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,9 @@\n     const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n     const [patientType, setPatientType] = useState(\"existing\");\r\n     const [patients, setPatients] = useState([])\r\n     const [selectedPatient, setSelectedPatient] = useState(null)\r\n+    const [documents, setDocuments] = useState([])\r\n \r\n     const handleChange = (event) => {\r\n         setPatientType(event.target.value);\r\n     };\r\n"
                },
                {
                    "date": 1743248540631,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n     const [patientType, setPatientType] = useState(\"existing\");\r\n     const [patients, setPatients] = useState([])\r\n     const [selectedPatient, setSelectedPatient] = useState(null)\r\n     const [documents, setDocuments] = useState([])\r\n+    const [selectedDocument, setSelectedDocument] = useState(null)\r\n \r\n     const handleChange = (event) => {\r\n         setPatientType(event.target.value);\r\n     };\r\n"
                },
                {
                    "date": 1743248593990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,25 @@\n         }\r\n         return () => clearInterval(interval);\r\n     }, [timer]);\r\n \r\n+    const getDocuemnts = async () => {\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 999\r\n+            };\r\n \r\n+            const data = await ApiServices.getAfterCareDocuments(params);\r\n+\r\n+\r\n+            setData(data?.data?.documents)\r\n+\r\n+\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n+        }\r\n+    };\r\n     return (\r\n         <div>\r\n \r\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n"
                },
                {
                    "date": 1743248617704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,15 +297,20 @@\n \r\n             const data = await ApiServices.getAfterCareDocuments(params);\r\n \r\n \r\n-            setData(data?.data?.documents)\r\n+            setDocuments(data?.data?.documents)\r\n \r\n \r\n         } catch (error) {\r\n             console.error(\"Error fetching location:\", error);\r\n         }\r\n     };\r\n+    useEffect(() => {\r\n+     \r\n+        getDocuemnts()\r\n+    }, [])\r\n+    \r\n     return (\r\n         <div>\r\n \r\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n"
                },
                {
                    "date": 1743248630040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,9 @@\n         }\r\n         return () => clearInterval(interval);\r\n     }, [timer]);\r\n \r\n-    const getDocuemnts = async () => {\r\n+    const getDocuments = async () => {\r\n         try {\r\n             let params = {\r\n                 page: 1,\r\n                 limit: 999\r\n@@ -305,12 +305,12 @@\n             console.error(\"Error fetching location:\", error);\r\n         }\r\n     };\r\n     useEffect(() => {\r\n-     \r\n-        getDocuemnts()\r\n+\r\n+        getDocuments()\r\n     }, [])\r\n-    \r\n+\r\n     return (\r\n         <div>\r\n \r\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n@@ -485,62 +485,62 @@\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                            <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+                                <InputLabel sx={{\r\n+                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n+                                    fontSize: \"14px\",\r\n+                                    color: \"#333\",\r\n+                                    marginBottom: \"4px\",\r\n+                                }}>\r\n \r\n-                                Select Form :\r\n-                            </InputLabel>\r\n-                            <SelectField\r\n-                                size={'small'}\r\n-                                newLabel={'Select Form'}\r\n-                                fullWidth={true}\r\n-                                options={[]}\r\n-                                selected={title}\r\n-                                onSelect={(value) => {\r\n-                                    setTitle(value)\r\n+                                    Select Form :\r\n+                                </InputLabel>\r\n+                                <SelectField\r\n+                                    size={'small'}\r\n+                                    newLabel={'Select Form'}\r\n+                                    fullWidth={true}\r\n+                                    options={[]}\r\n+                                    selected={title}\r\n+                                    onSelect={(value) => {\r\n+                                        setTitle(value)\r\n \r\n \r\n-                                }}\r\n-                                error={errors?.title?.message}\r\n-                                register={register(\"title\", {\r\n-                                    required: false,\r\n-                                })}\r\n-                            />\r\n+                                    }}\r\n+                                    error={errors?.title?.message}\r\n+                                    register={register(\"title\", {\r\n+                                        required: false,\r\n+                                    })}\r\n+                                />\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                            <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+                                <InputLabel sx={{\r\n+                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n+                                    fontSize: \"14px\",\r\n+                                    color: \"#333\",\r\n+                                    marginBottom: \"4px\",\r\n+                                }}>\r\n \r\n-                                Select Form :\r\n-                            </InputLabel>\r\n-                            <SelectField\r\n-                                size={'small'}\r\n-                                newLabel={'Select Form'}\r\n-                                fullWidth={true}\r\n-                                options={[]}\r\n-                                selected={title}\r\n-                                onSelect={(value) => {\r\n-                                    setTitle(value)\r\n+                                    Select Form :\r\n+                                </InputLabel>\r\n+                                <SelectField\r\n+                                    size={'small'}\r\n+                                    newLabel={'Select Form'}\r\n+                                    fullWidth={true}\r\n+                                    options={[]}\r\n+                                    selected={title}\r\n+                                    onSelect={(value) => {\r\n+                                        setTitle(value)\r\n \r\n \r\n-                                }}\r\n-                                error={errors?.title?.message}\r\n-                                register={register(\"title\", {\r\n-                                    required: false,\r\n-                                })}\r\n-                            />\r\n+                                    }}\r\n+                                    error={errors?.title?.message}\r\n+                                    register={register(\"title\", {\r\n+                                        required: false,\r\n+                                    })}\r\n+                                />\r\n                             </Grid>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n"
                },
                {
                    "date": 1743248694761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -298,8 +298,16 @@\n             const data = await ApiServices.getAfterCareDocuments(params);\r\n \r\n \r\n             setDocuments(data?.data?.documents)\r\n+            setDocuments(\r\n+                data?.data?.documents?.map((doc) => ({\r\n+                  \r\n+                  id: new Date(doc.date).toLocaleDateString(), // Example transformation\r\n+                  upperCaseTitle: doc.title.toUpperCase(), // Another example\r\n+                }))\r\n+              );\r\n+              \r\n \r\n \r\n         } catch (error) {\r\n             console.error(\"Error fetching location:\", error);\r\n"
                },
                {
                    "date": 1743248703112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -301,9 +301,9 @@\n             setDocuments(data?.data?.documents)\r\n             setDocuments(\r\n                 data?.data?.documents?.map((doc) => ({\r\n                   \r\n-                  id: new Date(doc.date).toLocaleDateString(), // Example transformation\r\n+                  id: doc?._id, // Example transformation\r\n                   upperCaseTitle: doc.title.toUpperCase(), // Another example\r\n                 }))\r\n               );\r\n               \r\n"
                },
                {
                    "date": 1743248709627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -302,9 +302,9 @@\n             setDocuments(\r\n                 data?.data?.documents?.map((doc) => ({\r\n                   \r\n                   id: doc?._id, // Example transformation\r\n-                  upperCaseTitle: doc.title.toUpperCase(), // Another example\r\n+                  name: doc.title, // Another example\r\n                 }))\r\n               );\r\n               \r\n \r\n"
                },
                {
                    "date": 1743248739692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,9 +297,9 @@\n \r\n             const data = await ApiServices.getAfterCareDocuments(params);\r\n \r\n \r\n-            setDocuments(data?.data?.documents)\r\n+     \r\n             setDocuments(\r\n                 data?.data?.documents?.map((doc) => ({\r\n                   \r\n                   id: doc?._id, // Example transformation\r\n@@ -501,9 +501,9 @@\n                                     color: \"#333\",\r\n                                     marginBottom: \"4px\",\r\n                                 }}>\r\n \r\n-                                    Select Form :\r\n+                                    Select Patient :\r\n                                 </InputLabel>\r\n                                 <SelectField\r\n                                     size={'small'}\r\n                                     newLabel={'Select Form'}\r\n"
                },
                {
                    "date": 1743248753558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -529,9 +529,9 @@\n                                     color: \"#333\",\r\n                                     marginBottom: \"4px\",\r\n                                 }}>\r\n \r\n-                                    Select Form :\r\n+                                    Select Aftercare Document :\r\n                                 </InputLabel>\r\n                                 <SelectField\r\n                                     size={'small'}\r\n                                     newLabel={'Select Form'}\r\n"
                },
                {
                    "date": 1743248760393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -533,9 +533,9 @@\n                                     Select Aftercare Document :\r\n                                 </InputLabel>\r\n                                 <SelectField\r\n                                     size={'small'}\r\n-                                    newLabel={'Select Form'}\r\n+                                    newLabel={'Select Document'}\r\n                                     fullWidth={true}\r\n                                     options={[]}\r\n                                     selected={title}\r\n                                     onSelect={(value) => {\r\n"
                },
                {
                    "date": 1743248766431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -536,9 +536,9 @@\n                                     size={'small'}\r\n                                     newLabel={'Select Document'}\r\n                                     fullWidth={true}\r\n                                     options={[]}\r\n-                                    selected={title}\r\n+                                    selected={selectedDocument}\r\n                                     onSelect={(value) => {\r\n                                         setTitle(value)\r\n \r\n \r\n"
                },
                {
                    "date": 1743248776478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -535,12 +535,12 @@\n                                 <SelectField\r\n                                     size={'small'}\r\n                                     newLabel={'Select Document'}\r\n                                     fullWidth={true}\r\n-                                    options={[]}\r\n+                                    options={documents}\r\n                                     selected={selectedDocument}\r\n                                     onSelect={(value) => {\r\n-                                        setTitle(value)\r\n+                                        setSelectedDocument(value)\r\n \r\n \r\n                                     }}\r\n                                     error={errors?.title?.message}\r\n"
                },
                {
                    "date": 1743248828201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -508,9 +508,9 @@\n                                     size={'small'}\r\n                                     newLabel={'Select Form'}\r\n                                     fullWidth={true}\r\n                                     options={[]}\r\n-                                    selected={title}\r\n+                                    selected={selectedPatient}\r\n                                     onSelect={(value) => {\r\n                                         setTitle(value)\r\n \r\n \r\n@@ -542,10 +542,10 @@\n                                         setSelectedDocument(value)\r\n \r\n \r\n                                     }}\r\n-                                    error={errors?.title?.message}\r\n-                                    register={register(\"title\", {\r\n+                                    error={errors?.document?.message}\r\n+                                    register={register(\"document\", {\r\n                                         required: false,\r\n                                     })}\r\n                                 />\r\n                             </Grid>\r\n"
                },
                {
                    "date": 1743248837598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -510,14 +510,14 @@\n                                     fullWidth={true}\r\n                                     options={[]}\r\n                                     selected={selectedPatient}\r\n                                     onSelect={(value) => {\r\n-                                        setTitle(value)\r\n+                                        setSelectedPatient(value)\r\n \r\n \r\n                                     }}\r\n-                                    error={errors?.title?.message}\r\n-                                    register={register(\"title\", {\r\n+                                    error={errors?.patient?.message}\r\n+                                    register={register(\"patient\", {\r\n                                         required: false,\r\n                                     })}\r\n                                 />\r\n                             </Grid>\r\n"
                },
                {
                    "date": 1743248847330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -505,11 +505,11 @@\n                                     Select Patient :\r\n                                 </InputLabel>\r\n                                 <SelectField\r\n                                     size={'small'}\r\n-                                    newLabel={'Select Form'}\r\n+                                    newLabel={'Select Patient'}\r\n                                     fullWidth={true}\r\n-                                    options={[]}\r\n+                                    options={patients}\r\n                                     selected={selectedPatient}\r\n                                     onSelect={(value) => {\r\n                                         setSelectedPatient(value)\r\n \r\n"
                },
                {
                    "date": 1743248867251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,8 +312,25 @@\n         } catch (error) {\r\n             console.error(\"Error fetching location:\", error);\r\n         }\r\n     };\r\n+    const getPatients = async () => {\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 999\r\n+            };\r\n+\r\n+            const data = await ApiServices.getPatients(params);\r\n+\r\n+\r\n+            setData(data?.data?.patients)\r\n+\r\n+\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n+        }\r\n+    };\r\n     useEffect(() => {\r\n \r\n         getDocuments()\r\n     }, [])\r\n"
                },
                {
                    "date": 1743248882390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,17 +322,23 @@\n \r\n             const data = await ApiServices.getPatients(params);\r\n \r\n \r\n-            setData(data?.data?.patients)\r\n+            set(data?.data?.patients)\r\n+            setDocuments(\r\n+                data?.data?.patients?.map((doc) => ({\r\n+                  \r\n+                  id: doc?._id, // Example transformation\r\n+                  name: doc.title, // Another example\r\n+                }))\r\n+              );\r\n \r\n-\r\n         } catch (error) {\r\n             console.error(\"Error fetching location:\", error);\r\n         }\r\n     };\r\n     useEffect(() => {\r\n-\r\n+        getPatients()\r\n         getDocuments()\r\n     }, [])\r\n \r\n     return (\r\n"
                },
                {
                    "date": 1743248891172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -322,10 +322,10 @@\n \r\n             const data = await ApiServices.getPatients(params);\r\n \r\n \r\n-            set(data?.data?.patients)\r\n-            setDocuments(\r\n+            \r\n+            setPatients(\r\n                 data?.data?.patients?.map((doc) => ({\r\n                   \r\n                   id: doc?._id, // Example transformation\r\n                   name: doc.title, // Another example\r\n"
                },
                {
                    "date": 1743248936641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -327,9 +327,9 @@\n             setPatients(\r\n                 data?.data?.patients?.map((doc) => ({\r\n                   \r\n                   id: doc?._id, // Example transformation\r\n-                  name: doc.title, // Another example\r\n+                  name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n                 }))\r\n               );\r\n \r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1743248963895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -494,9 +494,9 @@\n \r\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n-                        <Grid container p={2} >\r\n+                        <Grid container p={2} spacing={2} >\r\n \r\n                             <Grid item xs={3} mt={2}>\r\n                                 <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n"
                },
                {
                    "date": 1743249003721,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -516,9 +516,9 @@\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                                <InputLabel sx={{\r\n+                               {<> <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n                                     color: \"#333\",\r\n@@ -541,9 +541,9 @@\n                                     error={errors?.patient?.message}\r\n                                     register={register(\"patient\", {\r\n                                         required: false,\r\n                                     })}\r\n-                                />\r\n+                                /></>}\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n                                 <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n"
                },
                {
                    "date": 1743249016087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -516,9 +516,9 @@\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                               {<> <InputLabel sx={{\r\n+                               {patientType == 'existing' && <> <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n                                     color: \"#333\",\r\n"
                },
                {
                    "date": 1743249036849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -544,9 +544,9 @@\n                                     })}\r\n                                 /></>}\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                                <InputLabel sx={{\r\n+                               { patientType == 'existing' && <><InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n                                     color: \"#333\",\r\n@@ -569,9 +569,9 @@\n                                     error={errors?.document?.message}\r\n                                     register={register(\"document\", {\r\n                                         required: false,\r\n                                     })}\r\n-                                />\r\n+                                /> </>}\r\n                             </Grid>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n"
                },
                {
                    "date": 1743249149565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -822,11 +822,11 @@\n                                     false\r\n \r\n                             })}\r\n                         /></Grid>\r\n+<Divider sx={{ mt: 4 }} />\r\n \r\n \r\n-\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743249169368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -822,9 +822,9 @@\n                                     false\r\n \r\n                             })}\r\n                         /></Grid>\r\n-<Divider sx={{ mt: 4 }} />\r\n+<Divider sx={{ mt: 4 ,width:'100%'}} />\r\n \r\n \r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n"
                },
                {
                    "date": 1743249182241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -822,9 +822,9 @@\n                                     false\r\n \r\n                             })}\r\n                         /></Grid>\r\n-<Divider sx={{ mt: 4 ,width:'100%'}} />\r\n+<Divider sx={{ mt: 4 ,width:'100%',p:2}} />\r\n \r\n \r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n"
                },
                {
                    "date": 1743249194543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,19 +297,19 @@\n \r\n             const data = await ApiServices.getAfterCareDocuments(params);\r\n \r\n \r\n-     \r\n+\r\n             setDocuments(\r\n                 data?.data?.documents?.map((doc) => ({\r\n-                  \r\n-                  id: doc?._id, // Example transformation\r\n-                  name: doc.title, // Another example\r\n+\r\n+                    id: doc?._id, // Example transformation\r\n+                    name: doc.title, // Another example\r\n                 }))\r\n-              );\r\n-              \r\n+            );\r\n \r\n \r\n+\r\n         } catch (error) {\r\n             console.error(\"Error fetching location:\", error);\r\n         }\r\n     };\r\n@@ -322,16 +322,16 @@\n \r\n             const data = await ApiServices.getPatients(params);\r\n \r\n \r\n-            \r\n+\r\n             setPatients(\r\n                 data?.data?.patients?.map((doc) => ({\r\n-                  \r\n-                  id: doc?._id, // Example transformation\r\n-                  name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n+\r\n+                    id: doc?._id, // Example transformation\r\n+                    name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n                 }))\r\n-              );\r\n+            );\r\n \r\n         } catch (error) {\r\n             console.error(\"Error fetching location:\", error);\r\n         }\r\n@@ -516,9 +516,9 @@\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                               {patientType == 'existing' && <> <InputLabel sx={{\r\n+                                {patientType == 'existing' && <> <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n                                     color: \"#333\",\r\n@@ -526,27 +526,27 @@\n                                 }}>\r\n \r\n                                     Select Patient :\r\n                                 </InputLabel>\r\n-                                <SelectField\r\n-                                    size={'small'}\r\n-                                    newLabel={'Select Patient'}\r\n-                                    fullWidth={true}\r\n-                                    options={patients}\r\n-                                    selected={selectedPatient}\r\n-                                    onSelect={(value) => {\r\n-                                        setSelectedPatient(value)\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        newLabel={'Select Patient'}\r\n+                                        fullWidth={true}\r\n+                                        options={patients}\r\n+                                        selected={selectedPatient}\r\n+                                        onSelect={(value) => {\r\n+                                            setSelectedPatient(value)\r\n \r\n \r\n-                                    }}\r\n-                                    error={errors?.patient?.message}\r\n-                                    register={register(\"patient\", {\r\n-                                        required: false,\r\n-                                    })}\r\n-                                /></>}\r\n+                                        }}\r\n+                                        error={errors?.patient?.message}\r\n+                                        register={register(\"patient\", {\r\n+                                            required: false,\r\n+                                        })}\r\n+                                    /></>}\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n-                               { patientType == 'existing' && <><InputLabel sx={{\r\n+                                {patientType == 'existing' && <><InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n                                     color: \"#333\",\r\n@@ -554,24 +554,24 @@\n                                 }}>\r\n \r\n                                     Select Aftercare Document :\r\n                                 </InputLabel>\r\n-                                <SelectField\r\n-                                    size={'small'}\r\n-                                    newLabel={'Select Document'}\r\n-                                    fullWidth={true}\r\n-                                    options={documents}\r\n-                                    selected={selectedDocument}\r\n-                                    onSelect={(value) => {\r\n-                                        setSelectedDocument(value)\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        newLabel={'Select Document'}\r\n+                                        fullWidth={true}\r\n+                                        options={documents}\r\n+                                        selected={selectedDocument}\r\n+                                        onSelect={(value) => {\r\n+                                            setSelectedDocument(value)\r\n \r\n \r\n-                                    }}\r\n-                                    error={errors?.document?.message}\r\n-                                    register={register(\"document\", {\r\n-                                        required: false,\r\n-                                    })}\r\n-                                /> </>}\r\n+                                        }}\r\n+                                        error={errors?.document?.message}\r\n+                                        register={register(\"document\", {\r\n+                                            required: false,\r\n+                                        })}\r\n+                                    /> </>}\r\n                             </Grid>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n@@ -822,9 +822,9 @@\n                                     false\r\n \r\n                             })}\r\n                         /></Grid>\r\n-<Divider sx={{ mt: 4 ,width:'100%',p:2}} />\r\n+                        <Divider sx={{ mt: 4 }} />\r\n \r\n \r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n"
                },
                {
                    "date": 1743249204171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -822,11 +822,12 @@\n                                     false\r\n \r\n                             })}\r\n                         /></Grid>\r\n+                        <Grid container>\r\n                         <Divider sx={{ mt: 4 }} />\r\n+                        </Grid>\r\n \r\n-\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743249210550,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -822,9 +822,9 @@\n                                     false\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid container>\r\n+                        <Grid container p={2}>\r\n                         <Divider sx={{ mt: 4 }} />\r\n                         </Grid>\r\n \r\n                     </Grid>\r\n"
                },
                {
                    "date": 1743249219988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -823,9 +823,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n                         <Grid container p={2}>\r\n-                        <Divider sx={{ mt: 4 }} />\r\n+                        <Divider sx={{ mt: 4,width:'100%' }} />\r\n                         </Grid>\r\n \r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n"
                },
                {
                    "date": 1743249236411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -822,9 +822,9 @@\n                                     false\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid container p={2}>\r\n+                        <Grid container p={1}>\r\n                         <Divider sx={{ mt: 4,width:'100%' }} />\r\n                         </Grid>\r\n \r\n                     </Grid>\r\n"
                },
                {
                    "date": 1743249318640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,19 @@\n     const [patients, setPatients] = useState([])\r\n     const [selectedPatient, setSelectedPatient] = useState(null)\r\n     const [documents, setDocuments] = useState([])\r\n     const [selectedDocument, setSelectedDocument] = useState(null)\r\n-\r\n+    const [permissions, setPermissions] = useState({\r\n+        marketing: \"\",\r\n+        offers: \"\",\r\n+      });\r\n+    \r\n+      const handleChange = (event) => {\r\n+        setPermissions({\r\n+          ...permissions,\r\n+          [event.target.name]: event.target.value,\r\n+        });\r\n+      };\r\n     const handleChange = (event) => {\r\n         setPatientType(event.target.value);\r\n     };\r\n     const {\r\n"
                },
                {
                    "date": 1743249324182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n         marketing: \"\",\r\n         offers: \"\",\r\n       });\r\n     \r\n-      const handleChange = (event) => {\r\n+      const handleChange3 = (event) => {\r\n         setPermissions({\r\n           ...permissions,\r\n           [event.target.name]: event.target.value,\r\n         });\r\n"
                },
                {
                    "date": 1743249346971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -835,9 +835,31 @@\n                         /></Grid>\r\n                         <Grid container p={1}>\r\n                         <Divider sx={{ mt: 4,width:'100%' }} />\r\n                         </Grid>\r\n+                        <Grid container spacing={2}>\r\n+      {/* Marketing Permission */}\r\n+      <Grid item xs={3} mt={2}>\r\n+        <FormControl component=\"fieldset\">\r\n+          <FormLabel component=\"legend\">Can we have permission to use your images for marketing?</FormLabel>\r\n+          <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange}>\r\n+            <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n+            <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n+          </RadioGroup>\r\n+        </FormControl>\r\n+      </Grid>\r\n \r\n+      {/* Offers & Reminders Permission */}\r\n+      <Grid item xs={3} mt={2}>\r\n+        <FormControl component=\"fieldset\">\r\n+          <FormLabel component=\"legend\">Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n+          <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange}>\r\n+            <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n+            <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n+          </RadioGroup>\r\n+        </FormControl>\r\n+      </Grid>\r\n+    </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743249357117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,16 +43,16 @@\n     const [selectedDocument, setSelectedDocument] = useState(null)\r\n     const [permissions, setPermissions] = useState({\r\n         marketing: \"\",\r\n         offers: \"\",\r\n-      });\r\n-    \r\n-      const handleChange3 = (event) => {\r\n+    });\r\n+\r\n+    const handleChange2 = (event) => {\r\n         setPermissions({\r\n-          ...permissions,\r\n-          [event.target.name]: event.target.value,\r\n+            ...permissions,\r\n+            [event.target.name]: event.target.value,\r\n         });\r\n-      };\r\n+    };\r\n     const handleChange = (event) => {\r\n         setPatientType(event.target.value);\r\n     };\r\n     const {\r\n@@ -833,33 +833,33 @@\n \r\n                             })}\r\n                         /></Grid>\r\n                         <Grid container p={1}>\r\n-                        <Divider sx={{ mt: 4,width:'100%' }} />\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n                         <Grid container spacing={2}>\r\n-      {/* Marketing Permission */}\r\n-      <Grid item xs={3} mt={2}>\r\n-        <FormControl component=\"fieldset\">\r\n-          <FormLabel component=\"legend\">Can we have permission to use your images for marketing?</FormLabel>\r\n-          <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange}>\r\n-            <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n-            <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n-          </RadioGroup>\r\n-        </FormControl>\r\n-      </Grid>\r\n+                            {/* Marketing Permission */}\r\n+                            <Grid item xs={3} mt={2}>\r\n+                                <FormControl component=\"fieldset\">\r\n+                                    <FormLabel component=\"legend\">Can we have permission to use your images for marketing?</FormLabel>\r\n+                                    <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange}>\r\n+                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n+                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n+                                    </RadioGroup>\r\n+                                </FormControl>\r\n+                            </Grid>\r\n \r\n-      {/* Offers & Reminders Permission */}\r\n-      <Grid item xs={3} mt={2}>\r\n-        <FormControl component=\"fieldset\">\r\n-          <FormLabel component=\"legend\">Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n-          <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange}>\r\n-            <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n-            <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n-          </RadioGroup>\r\n-        </FormControl>\r\n-      </Grid>\r\n-    </Grid>\r\n+                            {/* Offers & Reminders Permission */}\r\n+                            <Grid item xs={3} mt={2}>\r\n+                                <FormControl component=\"fieldset\">\r\n+                                    <FormLabel component=\"legend\">Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n+                                    <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange}>\r\n+                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n+                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n+                                    </RadioGroup>\r\n+                                </FormControl>\r\n+                            </Grid>\r\n+                        </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743249374504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -835,11 +835,11 @@\n                         /></Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Grid container spacing={2}>\r\n+                        <Grid container spacing={2} p={2}>\r\n                             {/* Marketing Permission */}\r\n-                            <Grid item xs={3} mt={2}>\r\n+                            <Grid item xs={6} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n                                     <FormLabel component=\"legend\">Can we have permission to use your images for marketing?</FormLabel>\r\n                                     <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n@@ -848,9 +848,9 @@\n                                 </FormControl>\r\n                             </Grid>\r\n \r\n                             {/* Offers & Reminders Permission */}\r\n-                            <Grid item xs={3} mt={2}>\r\n+                            <Grid item xs={6} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n                                     <FormLabel component=\"legend\">Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n                                     <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n"
                },
                {
                    "date": 1743249390612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -839,9 +839,9 @@\n                         <Grid container spacing={2} p={2}>\r\n                             {/* Marketing Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n-                                    <FormLabel component=\"legend\">Can we have permission to use your images for marketing?</FormLabel>\r\n+                                    <FormLabel component=\"legend\" sx={{color:'black'}}>Can we have permission to use your images for marketing?</FormLabel>\r\n                                     <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                         <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                     </RadioGroup>\r\n"
                },
                {
                    "date": 1743249403441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -850,9 +850,9 @@\n \r\n                             {/* Offers & Reminders Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n-                                    <FormLabel component=\"legend\">Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n+                                    <FormLabel component=\"legend\" sx={{color:'black'}}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n                                     <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                         <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                     </RadioGroup>\r\n"
                },
                {
                    "date": 1743249415901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -858,8 +858,11 @@\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n                             </Grid>\r\n                         </Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743249449203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -840,9 +840,9 @@\n                             {/* Marketing Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n                                     <FormLabel component=\"legend\" sx={{color:'black'}}>Can we have permission to use your images for marketing?</FormLabel>\r\n-                                    <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange}>\r\n+                                    <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                         <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n@@ -851,9 +851,9 @@\n                             {/* Offers & Reminders Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n                                     <FormLabel component=\"legend\" sx={{color:'black'}}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n-                                    <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange}>\r\n+                                    <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                         <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n"
                },
                {
                    "date": 1743249468649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -850,9 +850,9 @@\n \r\n                             {/* Offers & Reminders Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n                                 <FormControl component=\"fieldset\">\r\n-                                    <FormLabel component=\"legend\" sx={{color:'black'}}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n+                                    <FormLabel component=\"p\" sx={{color:'black'}}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n                                     <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                         <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                     </RadioGroup>\r\n"
                },
                {
                    "date": 1743249486679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -849,10 +849,11 @@\n                             </Grid>\r\n \r\n                             {/* Offers & Reminders Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n+                            <FormLabel component=\"p\" sx={{color:'black'}}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n-                                    <FormLabel component=\"p\" sx={{color:'black'}}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n+                                   \r\n                                     <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                         <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                     </RadioGroup>\r\n"
                },
                {
                    "date": 1743249498556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -838,10 +838,11 @@\n                         </Grid>\r\n                         <Grid container spacing={2} p={2}>\r\n                             {/* Marketing Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n+                            <FormLabel component=\"legend\" sx={{color:'black'}}>Can we have permission to use your images for marketing?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n-                                    <FormLabel component=\"legend\" sx={{color:'black'}}>Can we have permission to use your images for marketing?</FormLabel>\r\n+                                   \r\n                                     <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                         <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                     </RadioGroup>\r\n"
                },
                {
                    "date": 1743249510670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -850,9 +850,9 @@\n                             </Grid>\r\n \r\n                             {/* Offers & Reminders Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n-                            <FormLabel component=\"p\" sx={{color:'black'}}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n+                            <FormLabel component=\"legend\" sx={{color:'black'}}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n                                    \r\n                                     <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n"
                },
                {
                    "date": 1743249615928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -863,8 +863,65 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n+                        <Typography variant=\"h5\" fontWeight=\"bold\" mb={2}>\r\n+        Treatment plan section\r\n+      </Typography>\r\n+\r\n+      <Grid container spacing={2}>\r\n+        {/* Patient Concerns */}\r\n+        <Grid item xs={6} mt={2}>\r\n+          <InputField\r\n+            label=\"Patient concerns\"\r\n+            size=\"small\"\r\n+            placeholder=\"Patient concerns\"\r\n+            error={errors?.patientConcerns?.message}\r\n+            register={register(\"patientConcerns\", { required: false })}\r\n+            multiline\r\n+            rows={4}\r\n+          />\r\n+        </Grid>\r\n+\r\n+        {/* Patient Goal */}\r\n+        <Grid item xs={6} mt={2}>\r\n+          <InputField\r\n+            label=\"Patient goal\"\r\n+            size=\"small\"\r\n+            placeholder=\"Patient goal\"\r\n+            error={errors?.patientGoal?.message}\r\n+            register={register(\"patientGoal\", { required: false })}\r\n+            multiline\r\n+            rows={4}\r\n+          />\r\n+        </Grid>\r\n+\r\n+        {/* Advised Plan/Product */}\r\n+        <Grid item xs={6} mt={2}>\r\n+          <InputField\r\n+            label=\"Advised Plan/product\"\r\n+            size=\"small\"\r\n+            placeholder=\"Advised Plan/product\"\r\n+            error={errors?.advisedPlan?.message}\r\n+            register={register(\"advisedPlan\", { required: false })}\r\n+            multiline\r\n+            rows={4}\r\n+          />\r\n+        </Grid>\r\n+\r\n+        {/* Expected Result */}\r\n+        <Grid item xs={6} mt={2}>\r\n+          <InputField\r\n+            label=\"Expected Result\"\r\n+            size=\"small\"\r\n+            placeholder=\"Expected Result\"\r\n+            error={errors?.expectedResult?.message}\r\n+            register={register(\"expectedResult\", { required: false })}\r\n+            multiline\r\n+            rows={4}\r\n+          />\r\n+        </Grid>\r\n+      </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743249638301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -838,11 +838,11 @@\n                         </Grid>\r\n                         <Grid container spacing={2} p={2}>\r\n                             {/* Marketing Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n-                            <FormLabel component=\"legend\" sx={{color:'black'}}>Can we have permission to use your images for marketing?</FormLabel>\r\n+                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n-                                   \r\n+\r\n                                     <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                         <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                     </RadioGroup>\r\n@@ -850,11 +850,11 @@\n                             </Grid>\r\n \r\n                             {/* Offers & Reminders Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n-                            <FormLabel component=\"legend\" sx={{color:'black'}}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n+                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n-                                   \r\n+\r\n                                     <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n                                         <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                         <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                     </RadioGroup>\r\n@@ -864,64 +864,64 @@\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n                         <Typography variant=\"h5\" fontWeight=\"bold\" mb={2}>\r\n-        Treatment plan section\r\n-      </Typography>\r\n+                            Treatment plan section\r\n+                        </Typography>\r\n \r\n-      <Grid container spacing={2}>\r\n-        {/* Patient Concerns */}\r\n-        <Grid item xs={6} mt={2}>\r\n-          <InputField\r\n-            label=\"Patient concerns\"\r\n-            size=\"small\"\r\n-            placeholder=\"Patient concerns\"\r\n-            error={errors?.patientConcerns?.message}\r\n-            register={register(\"patientConcerns\", { required: false })}\r\n-            multiline\r\n-            rows={4}\r\n-          />\r\n-        </Grid>\r\n+                        <Grid container spacing={2} p={2}>\r\n+                            {/* Patient Concerns */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <InputField\r\n+                                    label=\"Patient concerns\"\r\n+                                    size=\"small\"\r\n+                                    placeholder=\"Patient concerns\"\r\n+                                    error={errors?.patientConcerns?.message}\r\n+                                    register={register(\"patientConcerns\", { required: false })}\r\n+                                    multiline\r\n+                                    rows={4}\r\n+                                />\r\n+                            </Grid>\r\n \r\n-        {/* Patient Goal */}\r\n-        <Grid item xs={6} mt={2}>\r\n-          <InputField\r\n-            label=\"Patient goal\"\r\n-            size=\"small\"\r\n-            placeholder=\"Patient goal\"\r\n-            error={errors?.patientGoal?.message}\r\n-            register={register(\"patientGoal\", { required: false })}\r\n-            multiline\r\n-            rows={4}\r\n-          />\r\n-        </Grid>\r\n+                            {/* Patient Goal */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <InputField\r\n+                                    label=\"Patient goal\"\r\n+                                    size=\"small\"\r\n+                                    placeholder=\"Patient goal\"\r\n+                                    error={errors?.patientGoal?.message}\r\n+                                    register={register(\"patientGoal\", { required: false })}\r\n+                                    multiline\r\n+                                    rows={4}\r\n+                                />\r\n+                            </Grid>\r\n \r\n-        {/* Advised Plan/Product */}\r\n-        <Grid item xs={6} mt={2}>\r\n-          <InputField\r\n-            label=\"Advised Plan/product\"\r\n-            size=\"small\"\r\n-            placeholder=\"Advised Plan/product\"\r\n-            error={errors?.advisedPlan?.message}\r\n-            register={register(\"advisedPlan\", { required: false })}\r\n-            multiline\r\n-            rows={4}\r\n-          />\r\n-        </Grid>\r\n+                            {/* Advised Plan/Product */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <InputField\r\n+                                    label=\"Advised Plan/product\"\r\n+                                    size=\"small\"\r\n+                                    placeholder=\"Advised Plan/product\"\r\n+                                    error={errors?.advisedPlan?.message}\r\n+                                    register={register(\"advisedPlan\", { required: false })}\r\n+                                    multiline\r\n+                                    rows={4}\r\n+                                />\r\n+                            </Grid>\r\n \r\n-        {/* Expected Result */}\r\n-        <Grid item xs={6} mt={2}>\r\n-          <InputField\r\n-            label=\"Expected Result\"\r\n-            size=\"small\"\r\n-            placeholder=\"Expected Result\"\r\n-            error={errors?.expectedResult?.message}\r\n-            register={register(\"expectedResult\", { required: false })}\r\n-            multiline\r\n-            rows={4}\r\n-          />\r\n-        </Grid>\r\n-      </Grid>\r\n+                            {/* Expected Result */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <InputField\r\n+                                    label=\"Expected Result\"\r\n+                                    size=\"small\"\r\n+                                    placeholder=\"Expected Result\"\r\n+                                    error={errors?.expectedResult?.message}\r\n+                                    register={register(\"expectedResult\", { required: false })}\r\n+                                    multiline\r\n+                                    rows={4}\r\n+                                />\r\n+                            </Grid>\r\n+                        </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743249644139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -863,9 +863,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Typography variant=\"h5\" fontWeight=\"bold\" mb={2}>\r\n+                        <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n                             Treatment plan section\r\n                         </Typography>\r\n \r\n                         <Grid container spacing={2} p={2}>\r\n"
                },
                {
                    "date": 1743249668019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -920,8 +920,11 @@\n                                     rows={4}\r\n                                 />\r\n                             </Grid>\r\n                         </Grid>\r\n+                        <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n+                        I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n+                        </Typography>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743249684814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -920,9 +920,9 @@\n                                     rows={4}\r\n                                 />\r\n                             </Grid>\r\n                         </Grid>\r\n-                        <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n+                        <Typography variant=\"p\" fontWeight={500} mb={2} p={2}>\r\n                         I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n                         </Typography>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n"
                },
                {
                    "date": 1743249769728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,26 @@\n     const [patients, setPatients] = useState([])\r\n     const [selectedPatient, setSelectedPatient] = useState(null)\r\n     const [documents, setDocuments] = useState([])\r\n     const [selectedDocument, setSelectedDocument] = useState(null)\r\n+    const sigCanvas = useRef(null);\r\n+    const [signature, setSignature] = useState(null);\r\n+  \r\n+    // Handle Save Signature\r\n+    const handleSave = () => {\r\n+      if (sigCanvas.current) {\r\n+        const dataURL = sigCanvas.current.toDataURL();\r\n+        setSignature(dataURL);\r\n+      }\r\n+    };\r\n+  \r\n+    // Handle Clear Signature\r\n+    const handleClear = () => {\r\n+      if (sigCanvas.current) {\r\n+        sigCanvas.current.clear();\r\n+        setSignature(null);\r\n+      }\r\n+    };\r\n     const [permissions, setPermissions] = useState({\r\n         marketing: \"\",\r\n         offers: \"\",\r\n     });\r\n"
                },
                {
                    "date": 1743249802230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -941,8 +941,60 @@\n                         </Grid>\r\n                         <Typography variant=\"p\" fontWeight={500} mb={2} p={2}>\r\n                         I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n                         </Typography>\r\n+                        <Grid container spacing={2} alignItems=\"center\">\r\n+      {/* Date Field */}\r\n+      <Grid item xs={6} mt={2}>\r\n+        <Typography>Date:</Typography>\r\n+        <Typography\r\n+          sx={{\r\n+            backgroundColor: \"#f5f5f5\",\r\n+            padding: \"10px\",\r\n+            borderRadius: \"4px\",\r\n+            textAlign: \"center\",\r\n+          }}\r\n+        >\r\n+          {new Date().toLocaleDateString(\"en-GB\")}\r\n+        </Typography>\r\n+      </Grid>\r\n+\r\n+      {/* Signature Canvas */}\r\n+      <Grid item xs={6} mt={2}>\r\n+        <Typography>Patient Signature:</Typography>\r\n+        <SignatureCanvas\r\n+          ref={sigCanvas}\r\n+          penColor=\"black\"\r\n+          canvasProps={{\r\n+            width: 300,\r\n+            height: 150,\r\n+            className: \"sigCanvas\",\r\n+            style: { border: \"1px dashed black\" },\r\n+          }}\r\n+        />\r\n+        <Grid container spacing={1} mt={1}>\r\n+          <Grid item>\r\n+            <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n+              Save Signature\r\n+            </Button>\r\n+          </Grid>\r\n+          <Grid item>\r\n+            <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n+              Erase Patient Signature\r\n+            </Button>\r\n+          </Grid>\r\n+        </Grid>\r\n+\r\n+        {/* Show saved signature */}\r\n+        {signature && (\r\n+          <img\r\n+            src={signature}\r\n+            alt=\"Saved Signature\"\r\n+            style={{ marginTop: \"10px\", border: \"1px solid #ddd\", width: \"300px\" }}\r\n+          />\r\n+        )}\r\n+      </Grid>\r\n+    </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743249817586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n import { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\n import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n import SelectField from \"../../../components/select\";\r\n+import SignatureCanvas from \"react-signature-canvas\";\r\n \r\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n"
                },
                {
                    "date": 1743249844892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -979,9 +979,9 @@\n             </Button>\r\n           </Grid>\r\n           <Grid item>\r\n             <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n-              Erase Patient Signature\r\n+              Clear Signature\r\n             </Button>\r\n           </Grid>\r\n         </Grid>\r\n \r\n"
                },
                {
                    "date": 1743249851718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,23 +43,23 @@\n     const [documents, setDocuments] = useState([])\r\n     const [selectedDocument, setSelectedDocument] = useState(null)\r\n     const sigCanvas = useRef(null);\r\n     const [signature, setSignature] = useState(null);\r\n-  \r\n+\r\n     // Handle Save Signature\r\n     const handleSave = () => {\r\n-      if (sigCanvas.current) {\r\n-        const dataURL = sigCanvas.current.toDataURL();\r\n-        setSignature(dataURL);\r\n-      }\r\n+        if (sigCanvas.current) {\r\n+            const dataURL = sigCanvas.current.toDataURL();\r\n+            setSignature(dataURL);\r\n+        }\r\n     };\r\n-  \r\n+\r\n     // Handle Clear Signature\r\n     const handleClear = () => {\r\n-      if (sigCanvas.current) {\r\n-        sigCanvas.current.clear();\r\n-        setSignature(null);\r\n-      }\r\n+        if (sigCanvas.current) {\r\n+            sigCanvas.current.clear();\r\n+            setSignature(null);\r\n+        }\r\n     };\r\n     const [permissions, setPermissions] = useState({\r\n         marketing: \"\",\r\n         offers: \"\",\r\n@@ -940,62 +940,63 @@\n                                 />\r\n                             </Grid>\r\n                         </Grid>\r\n                         <Typography variant=\"p\" fontWeight={500} mb={2} p={2}>\r\n-                        I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n+                            I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n                         </Typography>\r\n                         <Grid container spacing={2} alignItems=\"center\">\r\n-      {/* Date Field */}\r\n-      <Grid item xs={6} mt={2}>\r\n-        <Typography>Date:</Typography>\r\n-        <Typography\r\n-          sx={{\r\n-            backgroundColor: \"#f5f5f5\",\r\n-            padding: \"10px\",\r\n-            borderRadius: \"4px\",\r\n-            textAlign: \"center\",\r\n-          }}\r\n-        >\r\n-          {new Date().toLocaleDateString(\"en-GB\")}\r\n-        </Typography>\r\n-      </Grid>\r\n+                            {/* Date Field */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <Typography>Date:</Typography>\r\n+                                <Typography\r\n+                                    sx={{\r\n+                                        backgroundColor: \"#f5f5f5\",\r\n+                                        padding: \"10px\",\r\n+                                        borderRadius: \"4px\",\r\n+                                        textAlign: \"center\",\r\n+                                    }}\r\n+                                >\r\n+                                    {new Date().toLocaleDateString(\"en-GB\")}\r\n+                                </Typography>\r\n+                            </Grid>\r\n \r\n-      {/* Signature Canvas */}\r\n-      <Grid item xs={6} mt={2}>\r\n-        <Typography>Patient Signature:</Typography>\r\n-        <SignatureCanvas\r\n-          ref={sigCanvas}\r\n-          penColor=\"black\"\r\n-          canvasProps={{\r\n-            width: 300,\r\n-            height: 150,\r\n-            className: \"sigCanvas\",\r\n-            style: { border: \"1px dashed black\" },\r\n-          }}\r\n-        />\r\n-        <Grid container spacing={1} mt={1}>\r\n-          <Grid item>\r\n-            <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n-              Save Signature\r\n-            </Button>\r\n-          </Grid>\r\n-          <Grid item>\r\n-            <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n-              Clear Signature\r\n-            </Button>\r\n-          </Grid>\r\n-        </Grid>\r\n+                            {/* Signature Canvas */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <Typography>Patient Signature:</Typography>\r\n+                                <SignatureCanvas\r\n+                                    ref={sigCanvas}\r\n+                                    penColor=\"black\"\r\n+                                    canvasProps={{\r\n+                                        width: 300,\r\n+                                        height: 150,\r\n+                                        className: \"sigCanvas\",\r\n+                                        style: { border: \"1px dashed black\" },\r\n+                                    }}\r\n+                                />\r\n+                                <Grid container spacing={1} mt={1}>\r\n+                                <Grid item>\r\n+                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n+                                            Clear Signature\r\n+                                        </Button>\r\n+                                    </Grid>\r\n+                                    <Grid item>\r\n+                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n+                                            Save Signature\r\n+                                        </Button>\r\n+                                    </Grid>\r\n+                                   \r\n+                                </Grid>\r\n \r\n-        {/* Show saved signature */}\r\n-        {signature && (\r\n-          <img\r\n-            src={signature}\r\n-            alt=\"Saved Signature\"\r\n-            style={{ marginTop: \"10px\", border: \"1px solid #ddd\", width: \"300px\" }}\r\n-          />\r\n-        )}\r\n-      </Grid>\r\n-    </Grid>\r\n+                                {/* Show saved signature */}\r\n+                                {signature && (\r\n+                                    <img\r\n+                                        src={signature}\r\n+                                        alt=\"Saved Signature\"\r\n+                                        style={{ marginTop: \"10px\", border: \"1px solid #ddd\", width: \"300px\" }}\r\n+                                    />\r\n+                                )}\r\n+                            </Grid>\r\n+                        </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743249890274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -985,16 +985,9 @@\n                                     </Grid>\r\n                                    \r\n                                 </Grid>\r\n \r\n-                                {/* Show saved signature */}\r\n-                                {signature && (\r\n-                                    <img\r\n-                                        src={signature}\r\n-                                        alt=\"Saved Signature\"\r\n-                                        style={{ marginTop: \"10px\", border: \"1px solid #ddd\", width: \"300px\" }}\r\n-                                    />\r\n-                                )}\r\n+                               \r\n                             </Grid>\r\n                         </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n"
                },
                {
                    "date": 1743249899662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -945,19 +945,61 @@\n                         </Typography>\r\n                         <Grid container spacing={2} alignItems=\"center\">\r\n                             {/* Date Field */}\r\n                             <Grid item xs={6} mt={2}>\r\n-                                <Typography>Date:</Typography>\r\n-                                <Typography\r\n-                                    sx={{\r\n-                                        backgroundColor: \"#f5f5f5\",\r\n-                                        padding: \"10px\",\r\n-                                        borderRadius: \"4px\",\r\n-                                        textAlign: \"center\",\r\n-                                    }}\r\n-                                >\r\n-                                    {new Date().toLocaleDateString(\"en-GB\")}\r\n-                                </Typography>\r\n+                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                                <Grid container spacing={2}>\r\n+                                    {/* Single Date Selection */}\r\n+                                    <Grid item xs={12}>\r\n+                                        <Box>\r\n+                                            <InputLabel sx={{\r\n+                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                                fontSize: \"14px\",\r\n+                                                color: \"#333\",\r\n+                                                marginBottom: 1.5,\r\n+                                            }}>\r\n+                                                Treatment Date :*\r\n+                                            </InputLabel>\r\n+                                            <Controller\r\n+                                                name=\"treatmentDate\"\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: '12px',\r\n+                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n+                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.treatmentDate && (\r\n+                                                <Typography color=\"error\">{errors.treatmentDate.message}</Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n+\r\n+\r\n+\r\n+\r\n+                                </Grid>\r\n+\r\n+\r\n+                            </LocalizationProvider>\r\n                             </Grid>\r\n \r\n                             {/* Signature Canvas */}\r\n                             <Grid item xs={6} mt={2}>\r\n"
                },
                {
                    "date": 1743249907980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -957,9 +957,9 @@\n                                                 fontSize: \"14px\",\r\n                                                 color: \"#333\",\r\n                                                 marginBottom: 1.5,\r\n                                             }}>\r\n-                                                Treatment Date :*\r\n+                                                Patient Date :*\r\n                                             </InputLabel>\r\n                                             <Controller\r\n                                                 name=\"treatmentDate\"\r\n                                                 control={control}\r\n"
                },
                {
                    "date": 1743249916702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -960,9 +960,9 @@\n                                             }}>\r\n                                                 Patient Date :*\r\n                                             </InputLabel>\r\n                                             <Controller\r\n-                                                name=\"treatmentDate\"\r\n+                                                name=\"patientDate\"\r\n                                                 control={control}\r\n                                                 rules={{ required: \"Please select a date\" }}\r\n                                                 render={({ field }) => (\r\n                                                     <DatePicker\r\n@@ -985,10 +985,10 @@\n                                                         }}\r\n                                                     />\r\n                                                 )}\r\n                                             />\r\n-                                            {errors.treatmentDate && (\r\n-                                                <Typography color=\"error\">{errors.treatmentDate.message}</Typography>\r\n+                                            {errors.patientDate && (\r\n+                                                <Typography color=\"error\">{errors.patientDate.message}</Typography>\r\n                                             )}\r\n                                         </Box>\r\n                                     </Grid>\r\n \r\n"
                },
                {
                    "date": 1743249932549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -942,9 +942,9 @@\n                         </Grid>\r\n                         <Typography variant=\"p\" fontWeight={500} mb={2} p={2}>\r\n                             I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n                         </Typography>\r\n-                        <Grid container spacing={2} alignItems=\"center\">\r\n+                        <Grid container spacing={2} p={2}>\r\n                             {/* Date Field */}\r\n                             <Grid item xs={6} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n"
                },
                {
                    "date": 1743249939576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -942,9 +942,9 @@\n                         </Grid>\r\n                         <Typography variant=\"p\" fontWeight={500} mb={2} p={2}>\r\n                             I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n                         </Typography>\r\n-                        <Grid container spacing={2} p={2}>\r\n+                        <Grid container spacing={2} alignItems=\"center\">\r\n                             {/* Date Field */}\r\n                             <Grid item xs={6} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n"
                },
                {
                    "date": 1743249951185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -942,9 +942,9 @@\n                         </Grid>\r\n                         <Typography variant=\"p\" fontWeight={500} mb={2} p={2}>\r\n                             I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n                         </Typography>\r\n-                        <Grid container spacing={2} alignItems=\"center\">\r\n+                        <Grid container spacing={5} p={2} alignItems=\"center\">\r\n                             {/* Date Field */}\r\n                             <Grid item xs={6} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n"
                },
                {
                    "date": 1743250098661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,12 +45,39 @@\n     const sigCanvas = useRef(null);\r\n     const [signature, setSignature] = useState(null);\r\n \r\n     // Handle Save Signature\r\n-    const handleSave = () => {\r\n+    const handleSave = async () => {\r\n         if (sigCanvas.current) {\r\n             const dataURL = sigCanvas.current.toDataURL();\r\n             setSignature(dataURL);\r\n+             try {\r\n+                        const file = e.target.files[0];\r\n+                        if (file) {\r\n+                            setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+                        }\r\n+                        const formData = new FormData();\r\n+                        formData.append(\"document\", e.target.files[0]);\r\n+            \r\n+                        const response = await axios.post(\r\n+                            'https://cosmetic.theappkit.com/api/system/upload',\r\n+                            formData,\r\n+                            {\r\n+                                headers: {\r\n+                                    'Content-Type': 'multipart/form-data'\r\n+                                }\r\n+                            }\r\n+                        );\r\n+            \r\n+                        console.log(response?.data?.data?.path);\r\n+            \r\n+                        setImageURL('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+            \r\n+            \r\n+                    } catch (error) {\r\n+                        console.log(error);\r\n+            \r\n+                    }\r\n         }\r\n     };\r\n \r\n     // Handle Clear Signature\r\n"
                },
                {
                    "date": 1743250114616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,17 +47,17 @@\n \r\n     // Handle Save Signature\r\n     const handleSave = async () => {\r\n         if (sigCanvas.current) {\r\n-            const dataURL = sigCanvas.current.toDataURL();\r\n+            const dataURL = await sigCanvas.current.toDataURL();\r\n             setSignature(dataURL);\r\n              try {\r\n-                        const file = e.target.files[0];\r\n+                        const file = dataURL;\r\n                         if (file) {\r\n                             setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n                         }\r\n                         const formData = new FormData();\r\n-                        formData.append(\"document\", e.target.files[0]);\r\n+                        formData.append(\"document\", dataURL);\r\n             \r\n                         const response = await axios.post(\r\n                             'https://cosmetic.theappkit.com/api/system/upload',\r\n                             formData,\r\n"
                },
                {
                    "date": 1743250130618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n                         );\r\n             \r\n                         console.log(response?.data?.data?.path);\r\n             \r\n-                        setImageURL('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+                        setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n             \r\n             \r\n                     } catch (error) {\r\n                         console.log(error);\r\n"
                },
                {
                    "date": 1743250203755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n import { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\n import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n import SelectField from \"../../../components/select\";\r\n import SignatureCanvas from \"react-signature-canvas\";\r\n+import moment from \"moment\";\r\n \r\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n@@ -56,8 +57,11 @@\n                             setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n                         }\r\n                         const formData = new FormData();\r\n                         formData.append(\"document\", dataURL);\r\n+                        let obj ={\r\n+                            name: moment().unix() + \"_Back.png\"\r\n+                        }\r\n             \r\n                         const response = await axios.post(\r\n                             'https://cosmetic.theappkit.com/api/system/upload',\r\n                             formData,\r\n"
                },
                {
                    "date": 1743250219183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n                         }\r\n                         const formData = new FormData();\r\n                         formData.append(\"document\", dataURL);\r\n                         let obj ={\r\n+                            document:dataURL,\r\n                             name: moment().unix() + \"_Back.png\"\r\n                         }\r\n             \r\n                         const response = await axios.post(\r\n"
                },
                {
                    "date": 1743250226923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,14 +64,9 @@\n                         }\r\n             \r\n                         const response = await axios.post(\r\n                             'https://cosmetic.theappkit.com/api/system/upload',\r\n-                            formData,\r\n-                            {\r\n-                                headers: {\r\n-                                    'Content-Type': 'multipart/form-data'\r\n-                                }\r\n-                            }\r\n+                            obj\r\n                         );\r\n             \r\n                         console.log(response?.data?.data?.path);\r\n             \r\n"
                },
                {
                    "date": 1743250237713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,13 +59,13 @@\n                         const formData = new FormData();\r\n                         formData.append(\"document\", dataURL);\r\n                         let obj ={\r\n                             document:dataURL,\r\n-                            name: moment().unix() + \"_Back.png\"\r\n+                            name: moment().unix() + \"_Sign.png\"\r\n                         }\r\n             \r\n                         const response = await axios.post(\r\n-                            'https://cosmetic.theappkit.com/api/system/upload',\r\n+                            'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n                             obj\r\n                         );\r\n             \r\n                         console.log(response?.data?.data?.path);\r\n"
                },
                {
                    "date": 1743250307281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n                         }\r\n                         const formData = new FormData();\r\n                         formData.append(\"document\", dataURL);\r\n                         let obj ={\r\n-                            document:dataURL,\r\n+                            document:dataUrl.split(\";base64,\")[1],\r\n                             name: moment().unix() + \"_Sign.png\"\r\n                         }\r\n             \r\n                         const response = await axios.post(\r\n"
                },
                {
                    "date": 1743250313535,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,12 +55,11 @@\n                         const file = dataURL;\r\n                         if (file) {\r\n                             setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n                         }\r\n-                        const formData = new FormData();\r\n-                        formData.append(\"document\", dataURL);\r\n+                   \r\n                         let obj ={\r\n-                            document:dataUrl.split(\";base64,\")[1],\r\n+                            document:dataURL.split(\";base64,\")[1],\r\n                             name: moment().unix() + \"_Sign.png\"\r\n                         }\r\n             \r\n                         const response = await axios.post(\r\n"
                },
                {
                    "date": 1743250331178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,11 +55,12 @@\n                         const file = dataURL;\r\n                         if (file) {\r\n                             setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n                         }\r\n-                   \r\n+                        const formData = new FormData();\r\n+                        formData.append(\"document\", dataURL);\r\n                         let obj ={\r\n-                            document:dataURL.split(\";base64,\")[1],\r\n+                            document:dataURL,\r\n                             name: moment().unix() + \"_Sign.png\"\r\n                         }\r\n             \r\n                         const response = await axios.post(\r\n"
                },
                {
                    "date": 1743250340171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,34 +50,33 @@\n     const handleSave = async () => {\r\n         if (sigCanvas.current) {\r\n             const dataURL = await sigCanvas.current.toDataURL();\r\n             setSignature(dataURL);\r\n-             try {\r\n-                        const file = dataURL;\r\n-                        if (file) {\r\n-                            setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n-                        }\r\n-                        const formData = new FormData();\r\n-                        formData.append(\"document\", dataURL);\r\n-                        let obj ={\r\n-                            document:dataURL,\r\n-                            name: moment().unix() + \"_Sign.png\"\r\n-                        }\r\n-            \r\n-                        const response = await axios.post(\r\n-                            'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n-                            obj\r\n-                        );\r\n-            \r\n-                        console.log(response?.data?.data?.path);\r\n-            \r\n-                        setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n-            \r\n-            \r\n-                    } catch (error) {\r\n-                        console.log(error);\r\n-            \r\n-                    }\r\n+            try {\r\n+                const file = dataURL;\r\n+                if (file) {\r\n+                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+                }\r\n+\r\n+                let obj = {\r\n+                    document: dataURL,\r\n+                    name: moment().unix() + \"_Sign.png\"\r\n+                }\r\n+\r\n+                const response = await axios.post(\r\n+                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n+                    obj\r\n+                );\r\n+\r\n+                console.log(response?.data?.data?.path);\r\n+\r\n+                setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+\r\n+\r\n+            } catch (error) {\r\n+                console.log(error);\r\n+\r\n+            }\r\n         }\r\n     };\r\n \r\n     // Handle Clear Signature\r\n@@ -972,61 +971,61 @@\n                         </Typography>\r\n                         <Grid container spacing={5} p={2} alignItems=\"center\">\r\n                             {/* Date Field */}\r\n                             <Grid item xs={6} mt={2}>\r\n-                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                                <Grid container spacing={2}>\r\n-                                    {/* Single Date Selection */}\r\n-                                    <Grid item xs={12}>\r\n-                                        <Box>\r\n-                                            <InputLabel sx={{\r\n-                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+                                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                                    <Grid container spacing={2}>\r\n+                                        {/* Single Date Selection */}\r\n+                                        <Grid item xs={12}>\r\n+                                            <Box>\r\n+                                                <InputLabel sx={{\r\n+                                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n-                                                fontSize: \"14px\",\r\n-                                                color: \"#333\",\r\n-                                                marginBottom: 1.5,\r\n-                                            }}>\r\n-                                                Patient Date :*\r\n-                                            </InputLabel>\r\n-                                            <Controller\r\n-                                                name=\"patientDate\"\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: '12px',\r\n-                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n-                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n+                                                    fontSize: \"14px\",\r\n+                                                    color: \"#333\",\r\n+                                                    marginBottom: 1.5,\r\n+                                                }}>\r\n+                                                    Patient Date :*\r\n+                                                </InputLabel>\r\n+                                                <Controller\r\n+                                                    name=\"patientDate\"\r\n+                                                    control={control}\r\n+                                                    rules={{ required: \"Please select a date\" }}\r\n+                                                    render={({ field }) => (\r\n+                                                        <DatePicker\r\n+                                                            {...field}\r\n+                                                            value={field.value || null}\r\n+                                                            onChange={(newValue) => field.onChange(newValue)}\r\n+                                                            slotProps={{\r\n+                                                                textField: {\r\n+                                                                    size: \"small\",\r\n+                                                                    fullWidth: true,\r\n+                                                                    sx: {\r\n+                                                                        \"& .MuiOutlinedInput-root\": {\r\n+                                                                            borderRadius: '12px',\r\n+                                                                            \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n+                                                                            \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n+                                                                            \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n+                                                                        },\r\n                                                                     },\r\n                                                                 },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n+                                                            }}\r\n+                                                        />\r\n+                                                    )}\r\n+                                                />\r\n+                                                {errors.patientDate && (\r\n+                                                    <Typography color=\"error\">{errors.patientDate.message}</Typography>\r\n                                                 )}\r\n-                                            />\r\n-                                            {errors.patientDate && (\r\n-                                                <Typography color=\"error\">{errors.patientDate.message}</Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n+                                            </Box>\r\n+                                        </Grid>\r\n \r\n \r\n \r\n \r\n-                                </Grid>\r\n+                                    </Grid>\r\n \r\n \r\n-                            </LocalizationProvider>\r\n+                                </LocalizationProvider>\r\n                             </Grid>\r\n \r\n                             {/* Signature Canvas */}\r\n                             <Grid item xs={6} mt={2}>\r\n@@ -1041,9 +1040,9 @@\n                                         style: { border: \"1px dashed black\" },\r\n                                     }}\r\n                                 />\r\n                                 <Grid container spacing={1} mt={1}>\r\n-                                <Grid item>\r\n+                                    <Grid item>\r\n                                         <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n                                             Clear Signature\r\n                                         </Button>\r\n                                     </Grid>\r\n@@ -1051,12 +1050,12 @@\n                                         <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n                                             Save Signature\r\n                                         </Button>\r\n                                     </Grid>\r\n-                                   \r\n+\r\n                                 </Grid>\r\n \r\n-                               \r\n+\r\n                             </Grid>\r\n                         </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n"
                },
                {
                    "date": 1743250395635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n                 }\r\n \r\n                 let obj = {\r\n                     document: dataURL,\r\n-                    name: moment().unix() + \"_Sign.png\"\r\n+                    filename: moment().unix() + \"_Sign.png\"\r\n                 }\r\n \r\n                 const response = await axios.post(\r\n                     'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n"
                },
                {
                    "date": 1743250444316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1056,8 +1056,11 @@\n \r\n \r\n                             </Grid>\r\n                         </Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743250556893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,13 @@\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n     const [userData, setUserData] = useState(null)\r\n-    const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm();\r\n+    const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n+        defaultValues: {\r\n+          records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n+        },\r\n+      });\r\n     const [title, setTitle] = useState(null)\r\n \r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n"
                },
                {
                    "date": 1743250568184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import ApiServices from \"../../../services/Apis\";\r\n import { PrimaryButton } from \"../../../components/buttons\";\r\n import { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, FormLabel, Grid, IconButton, InputAdornment, InputLabel, Paper, Radio, RadioGroup, TextField, Typography } from \"@mui/material\";\r\n import InputField from \"../../../components/input\";\r\n-import { Controller, useForm } from \"react-hook-form\";\r\n+import { Controller, useFieldArray, useForm } from \"react-hook-form\";\r\n import { useNavigate } from \"react-router-dom\";\r\n import axios from \"axios\";\r\n import { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\";\r\n import UploadIcon from \"@mui/icons-material/Upload\";\r\n@@ -26,8 +26,13 @@\n         defaultValues: {\r\n           records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n         },\r\n       });\r\n+      \r\n+  const { fields, append } = useFieldArray({\r\n+    control,\r\n+    name: \"records\",\r\n+  });\r\n     const [title, setTitle] = useState(null)\r\n \r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n"
                },
                {
                    "date": 1743250646318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,16 +23,16 @@\n     const navigate = useNavigate()\r\n     const [userData, setUserData] = useState(null)\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n         defaultValues: {\r\n-          records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n+            records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n         },\r\n-      });\r\n-      \r\n-  const { fields, append } = useFieldArray({\r\n-    control,\r\n-    name: \"records\",\r\n-  });\r\n+    });\r\n+\r\n+    const { fields, append } = useFieldArray({\r\n+        control,\r\n+        name: \"records\",\r\n+    });\r\n     const [title, setTitle] = useState(null)\r\n \r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n@@ -1068,8 +1068,63 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n+                        <Typography variant=\"h6\">Treatment Record Section</Typography>\r\n+\r\n+                        {fields.map((item, index) => (\r\n+                            <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+                                {/* Date Field */}\r\n+                                <Grid item xs={4}>\r\n+                                    <InputField\r\n+                                        label=\"Date\"\r\n+                                        type=\"date\"\r\n+                                        size=\"small\"\r\n+                                        {...register(`records.${index}.date`)}\r\n+                                    />\r\n+                                </Grid>\r\n+\r\n+                                {/* Amount Field */}\r\n+                                <Grid item xs={4}>\r\n+                                    <InputField\r\n+                                        label=\"Amount\"\r\n+                                        placeholder=\"Order Amount\"\r\n+                                        size=\"small\"\r\n+                                        {...register(`records.${index}.amount`)}\r\n+                                    />\r\n+                                </Grid>\r\n+\r\n+                                {/* Remove Button (only for additional fields) */}\r\n+                                <Grid item xs={4}>\r\n+                                    {index > 0 && (\r\n+                                        <IconButton color=\"error\" onClick={() => remove(index)}>\r\n+                                            <DeleteIcon />\r\n+                                        </IconButton>\r\n+                                    )}\r\n+                                </Grid>\r\n+\r\n+                                {/* Description Field */}\r\n+                                <Grid item xs={12}>\r\n+                                    <InputField\r\n+                                        label=\"Description\"\r\n+                                        multiline\r\n+                                        rows={3}\r\n+                                        placeholder=\"Description\"\r\n+                                        {...register(`records.${index}.description`)}\r\n+                                    />\r\n+                                </Grid>\r\n+                            </Grid>\r\n+                        ))}\r\n+\r\n+                        {/* Add More Button */}\r\n+                        <Button\r\n+                            variant=\"contained\"\r\n+                            color=\"primary\"\r\n+                            onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n+                            sx={{ mt: 2 }}\r\n+                        >\r\n+                            Add More\r\n+                        </Button>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743250657664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n         },\r\n     });\r\n \r\n-    const { fields, append } = useFieldArray({\r\n+    const { fields, appendm,remove } = useFieldArray({\r\n         control,\r\n         name: \"records\",\r\n     });\r\n     const [title, setTitle] = useState(null)\r\n"
                },
                {
                    "date": 1743250674737,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n import SelectField from \"../../../components/select\";\r\n import SignatureCanvas from \"react-signature-canvas\";\r\n import moment from \"moment\";\r\n+import DeleteIcon from \"@mui/icons-material/Delete\";\r\n \r\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n"
                },
                {
                    "date": 1743250698990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n         },\r\n     });\r\n \r\n-    const { fields, appendm,remove } = useFieldArray({\r\n+    const { fields, append,remove } = useFieldArray({\r\n         control,\r\n         name: \"records\",\r\n     });\r\n     const [title, setTitle] = useState(null)\r\n"
                },
                {
                    "date": 1743250750236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1074,9 +1074,9 @@\n \r\n                         {fields.map((item, index) => (\r\n                             <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n                                 {/* Date Field */}\r\n-                                <Grid item xs={4}>\r\n+                                <Grid item xs={3}>\r\n                                     <InputField\r\n                                         label=\"Date\"\r\n                                         type=\"date\"\r\n                                         size=\"small\"\r\n@@ -1084,9 +1084,9 @@\n                                     />\r\n                                 </Grid>\r\n \r\n                                 {/* Amount Field */}\r\n-                                <Grid item xs={4}>\r\n+                                <Grid item xs={3}>\r\n                                     <InputField\r\n                                         label=\"Amount\"\r\n                                         placeholder=\"Order Amount\"\r\n                                         size=\"small\"\r\n@@ -1103,9 +1103,9 @@\n                                     )}\r\n                                 </Grid>\r\n \r\n                                 {/* Description Field */}\r\n-                                <Grid item xs={12}>\r\n+                                <Grid item xs={6}>\r\n                                     <InputField\r\n                                         label=\"Description\"\r\n                                         multiline\r\n                                         rows={3}\r\n"
                },
                {
                    "date": 1743250768269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1093,27 +1093,28 @@\n                                         {...register(`records.${index}.amount`)}\r\n                                     />\r\n                                 </Grid>\r\n \r\n-                                {/* Remove Button (only for additional fields) */}\r\n-                                <Grid item xs={4}>\r\n-                                    {index > 0 && (\r\n-                                        <IconButton color=\"error\" onClick={() => remove(index)}>\r\n-                                            <DeleteIcon />\r\n-                                        </IconButton>\r\n-                                    )}\r\n-                                </Grid>\r\n+                               \r\n \r\n                                 {/* Description Field */}\r\n-                                <Grid item xs={6}>\r\n+                                <Grid item xs={5}>\r\n                                     <InputField\r\n                                         label=\"Description\"\r\n                                         multiline\r\n                                         rows={3}\r\n                                         placeholder=\"Description\"\r\n                                         {...register(`records.${index}.description`)}\r\n                                     />\r\n                                 </Grid>\r\n+                                 {/* Remove Button (only for additional fields) */}\r\n+                                 <Grid item xs={4}>\r\n+                                    {index > 0 && (\r\n+                                        <IconButton color=\"error\" onClick={() => remove(index)}>\r\n+                                            <DeleteIcon />\r\n+                                        </IconButton>\r\n+                                    )}\r\n+                                </Grid>\r\n                             </Grid>\r\n                         ))}\r\n \r\n                         {/* Add More Button */}\r\n"
                },
                {
                    "date": 1743250777265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1106,9 +1106,9 @@\n                                         {...register(`records.${index}.description`)}\r\n                                     />\r\n                                 </Grid>\r\n                                  {/* Remove Button (only for additional fields) */}\r\n-                                 <Grid item xs={4}>\r\n+                                 <Grid item xs={1}>\r\n                                     {index > 0 && (\r\n                                         <IconButton color=\"error\" onClick={() => remove(index)}>\r\n                                             <DeleteIcon />\r\n                                         </IconButton>\r\n"
                },
                {
                    "date": 1743250783599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1096,9 +1096,9 @@\n \r\n                                \r\n \r\n                                 {/* Description Field */}\r\n-                                <Grid item xs={5}>\r\n+                                <Grid item xs={4}>\r\n                                     <InputField\r\n                                         label=\"Description\"\r\n                                         multiline\r\n                                         rows={3}\r\n"
                },
                {
                    "date": 1743250798259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1072,9 +1072,9 @@\n                         </Grid>\r\n                         <Typography variant=\"h6\">Treatment Record Section</Typography>\r\n \r\n                         {fields.map((item, index) => (\r\n-                            <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+                            <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n                                 {/* Date Field */}\r\n                                 <Grid item xs={3}>\r\n                                     <InputField\r\n                                         label=\"Date\"\r\n"
                },
                {
                    "date": 1743250803649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1069,9 +1069,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Typography variant=\"h6\">Treatment Record Section</Typography>\r\n+                        <Typography variant=\"h5\" p={2}>Treatment Record Section</Typography>\r\n \r\n                         {fields.map((item, index) => (\r\n                             <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n                                 {/* Date Field */}\r\n"
                },
                {
                    "date": 1743250817084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1069,9 +1069,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Typography variant=\"h5\" p={2}>Treatment Record Section</Typography>\r\n+                        <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n                         {fields.map((item, index) => (\r\n                             <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n                                 {/* Date Field */}\r\n"
                },
                {
                    "date": 1743250931768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1071,53 +1071,105 @@\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n                         <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n-                        {fields.map((item, index) => (\r\n-                            <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n-                                {/* Date Field */}\r\n-                                <Grid item xs={3}>\r\n-                                    <InputField\r\n-                                        label=\"Date\"\r\n-                                        type=\"date\"\r\n-                                        size=\"small\"\r\n-                                        {...register(`records.${index}.date`)}\r\n-                                    />\r\n-                                </Grid>\r\n+                        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+        {fields.map((item, index) => (\r\n+          <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+            \r\n+            {/* Patient Date Selection */}\r\n+            <Grid item xs={4}>\r\n+              <Box>\r\n+                <InputLabel\r\n+                  sx={{\r\n+                    textTransform: \"capitalize\",\r\n+                    textAlign: \"left\",\r\n+                    fontWeight: 700,\r\n+                    fontSize: \"14px\",\r\n+                    color: \"#333\",\r\n+                    marginBottom: 1.5,\r\n+                  }}\r\n+                >\r\n+                  Patient Date :*\r\n+                </InputLabel>\r\n \r\n-                                {/* Amount Field */}\r\n-                                <Grid item xs={3}>\r\n-                                    <InputField\r\n-                                        label=\"Amount\"\r\n-                                        placeholder=\"Order Amount\"\r\n-                                        size=\"small\"\r\n-                                        {...register(`records.${index}.amount`)}\r\n-                                    />\r\n-                                </Grid>\r\n+                <Controller\r\n+                  name={`records.${index}.patientDate`}\r\n+                  control={control}\r\n+                  rules={{ required: \"Please select a date\" }}\r\n+                  render={({ field }) => (\r\n+                    <DatePicker\r\n+                      {...field}\r\n+                      value={field.value || null}\r\n+                      onChange={(newValue) => field.onChange(newValue)}\r\n+                      slotProps={{\r\n+                        textField: {\r\n+                          size: \"small\",\r\n+                          fullWidth: true,\r\n+                          sx: {\r\n+                            \"& .MuiOutlinedInput-root\": {\r\n+                              borderRadius: \"12px\",\r\n+                              \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n+                              \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n+                              \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n+                            },\r\n+                          },\r\n+                        },\r\n+                      }}\r\n+                    />\r\n+                  )}\r\n+                />\r\n+                {errors.records?.[index]?.patientDate && (\r\n+                  <Typography color=\"error\">\r\n+                    {errors.records[index].patientDate.message}\r\n+                  </Typography>\r\n+                )}\r\n+              </Box>\r\n+            </Grid>\r\n \r\n-                               \r\n+            {/* Amount Field */}\r\n+            <Grid item xs={4}>\r\n+              <InputField\r\n+                label=\"Amount\"\r\n+                placeholder=\"Order Amount\"\r\n+                size=\"small\"\r\n+                {...register(`records.${index}.amount`)}\r\n+              />\r\n+            </Grid>\r\n \r\n-                                {/* Description Field */}\r\n-                                <Grid item xs={4}>\r\n-                                    <InputField\r\n-                                        label=\"Description\"\r\n-                                        multiline\r\n-                                        rows={3}\r\n-                                        placeholder=\"Description\"\r\n-                                        {...register(`records.${index}.description`)}\r\n-                                    />\r\n-                                </Grid>\r\n-                                 {/* Remove Button (only for additional fields) */}\r\n-                                 <Grid item xs={1}>\r\n-                                    {index > 0 && (\r\n-                                        <IconButton color=\"error\" onClick={() => remove(index)}>\r\n-                                            <DeleteIcon />\r\n-                                        </IconButton>\r\n-                                    )}\r\n-                                </Grid>\r\n-                            </Grid>\r\n-                        ))}\r\n+            {/* Remove Button (only for additional fields) */}\r\n+            <Grid item xs={4}>\r\n+              {index > 0 && (\r\n+                <IconButton color=\"error\" onClick={() => remove(index)}>\r\n+                  <DeleteIcon />\r\n+                </IconButton>\r\n+              )}\r\n+            </Grid>\r\n \r\n+            {/* Description Field */}\r\n+            <Grid item xs={12}>\r\n+              <InputField\r\n+                label=\"Description\"\r\n+                multiline\r\n+                rows={3}\r\n+                placeholder=\"Description\"\r\n+                {...register(`records.${index}.description`)}\r\n+              />\r\n+            </Grid>\r\n+          </Grid>\r\n+        ))}\r\n+      </LocalizationProvider>\r\n+\r\n+      {/* Add More Button */}\r\n+      <Button\r\n+        variant=\"contained\"\r\n+        color=\"primary\"\r\n+        onClick={() => append({ patientDate: null, amount: \"\", description: \"\" })}\r\n+        sx={{ mt: 2 }}\r\n+      >\r\n+        Add More\r\n+      </Button>\r\n+\r\n                         {/* Add More Button */}\r\n                         <Button\r\n                             variant=\"contained\"\r\n                             color=\"primary\"\r\n"
                },
                {
                    "date": 1743250940043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1158,17 +1158,9 @@\n           </Grid>\r\n         ))}\r\n       </LocalizationProvider>\r\n \r\n-      {/* Add More Button */}\r\n-      <Button\r\n-        variant=\"contained\"\r\n-        color=\"primary\"\r\n-        onClick={() => append({ patientDate: null, amount: \"\", description: \"\" })}\r\n-        sx={{ mt: 2 }}\r\n-      >\r\n-        Add More\r\n-      </Button>\r\n+    \r\n \r\n                         {/* Add More Button */}\r\n                         <Button\r\n                             variant=\"contained\"\r\n"
                },
                {
                    "date": 1743250995420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n         },\r\n     });\r\n \r\n-    const { fields, append,remove } = useFieldArray({\r\n+    const { fields, append, remove } = useFieldArray({\r\n         control,\r\n         name: \"records\",\r\n     });\r\n     const [title, setTitle] = useState(null)\r\n@@ -1072,96 +1072,96 @@\n                         </Grid>\r\n                         <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-        {fields.map((item, index) => (\r\n-          <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n-            \r\n-            {/* Patient Date Selection */}\r\n-            <Grid item xs={4}>\r\n-              <Box>\r\n-                <InputLabel\r\n-                  sx={{\r\n-                    textTransform: \"capitalize\",\r\n-                    textAlign: \"left\",\r\n-                    fontWeight: 700,\r\n-                    fontSize: \"14px\",\r\n-                    color: \"#333\",\r\n-                    marginBottom: 1.5,\r\n-                  }}\r\n-                >\r\n-                  Patient Date :*\r\n-                </InputLabel>\r\n+                            {fields.map((item, index) => (\r\n+                                <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n \r\n-                <Controller\r\n-                  name={`records.${index}.patientDate`}\r\n-                  control={control}\r\n-                  rules={{ required: \"Please select a date\" }}\r\n-                  render={({ field }) => (\r\n-                    <DatePicker\r\n-                      {...field}\r\n-                      value={field.value || null}\r\n-                      onChange={(newValue) => field.onChange(newValue)}\r\n-                      slotProps={{\r\n-                        textField: {\r\n-                          size: \"small\",\r\n-                          fullWidth: true,\r\n-                          sx: {\r\n-                            \"& .MuiOutlinedInput-root\": {\r\n-                              borderRadius: \"12px\",\r\n-                              \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n-                              \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n-                              \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n-                            },\r\n-                          },\r\n-                        },\r\n-                      }}\r\n-                    />\r\n-                  )}\r\n-                />\r\n-                {errors.records?.[index]?.patientDate && (\r\n-                  <Typography color=\"error\">\r\n-                    {errors.records[index].patientDate.message}\r\n-                  </Typography>\r\n-                )}\r\n-              </Box>\r\n-            </Grid>\r\n+                                    {/* Patient Date Selection */}\r\n+                                    <Grid item xs={4}>\r\n+                                        <Box>\r\n+                                            <InputLabel\r\n+                                                sx={{\r\n+                                                    textTransform: \"capitalize\",\r\n+                                                    textAlign: \"left\",\r\n+                                                    fontWeight: 700,\r\n+                                                    fontSize: \"14px\",\r\n+                                                    color: \"#333\",\r\n+                                                    marginBottom: 1.5,\r\n+                                                }}\r\n+                                            >\r\n+                                                Patient Date :*\r\n+                                            </InputLabel>\r\n \r\n-            {/* Amount Field */}\r\n-            <Grid item xs={4}>\r\n-              <InputField\r\n-                label=\"Amount\"\r\n-                placeholder=\"Order Amount\"\r\n-                size=\"small\"\r\n-                {...register(`records.${index}.amount`)}\r\n-              />\r\n-            </Grid>\r\n+                                            <Controller\r\n+                                                name={`records.${index}.date`}\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: \"12px\",\r\n+                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n+                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.records?.[index]?.patientDate && (\r\n+                                                <Typography color=\"error\">\r\n+                                                    {errors.records[index].patientDate.message}\r\n+                                                </Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n \r\n-            {/* Remove Button (only for additional fields) */}\r\n-            <Grid item xs={4}>\r\n-              {index > 0 && (\r\n-                <IconButton color=\"error\" onClick={() => remove(index)}>\r\n-                  <DeleteIcon />\r\n-                </IconButton>\r\n-              )}\r\n-            </Grid>\r\n+                                    {/* Amount Field */}\r\n+                                    <Grid item xs={4}>\r\n+                                        <InputField\r\n+                                            label=\"Amount\"\r\n+                                            placeholder=\"Order Amount\"\r\n+                                            size=\"small\"\r\n+                                            {...register(`records.${index}.amount`)}\r\n+                                        />\r\n+                                    </Grid>\r\n \r\n-            {/* Description Field */}\r\n-            <Grid item xs={12}>\r\n-              <InputField\r\n-                label=\"Description\"\r\n-                multiline\r\n-                rows={3}\r\n-                placeholder=\"Description\"\r\n-                {...register(`records.${index}.description`)}\r\n-              />\r\n-            </Grid>\r\n-          </Grid>\r\n-        ))}\r\n-      </LocalizationProvider>\r\n+                                    {/* Remove Button (only for additional fields) */}\r\n+                                    <Grid item xs={4}>\r\n+                                        {index > 0 && (\r\n+                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n+                                                <DeleteIcon />\r\n+                                            </IconButton>\r\n+                                        )}\r\n+                                    </Grid>\r\n \r\n-    \r\n+                                    {/* Description Field */}\r\n+                                    <Grid item xs={12}>\r\n+                                        <InputField\r\n+                                            label=\"Description\"\r\n+                                            multiline\r\n+                                            rows={3}\r\n+                                            placeholder=\"Description\"\r\n+                                            {...register(`records.${index}.description`)}\r\n+                                        />\r\n+                                    </Grid>\r\n+                                </Grid>\r\n+                            ))}\r\n+                        </LocalizationProvider>\r\n \r\n+\r\n+\r\n                         {/* Add More Button */}\r\n                         <Button\r\n                             variant=\"contained\"\r\n                             color=\"primary\"\r\n"
                },
                {
                    "date": 1743251005548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1088,9 +1088,9 @@\n                                                     color: \"#333\",\r\n                                                     marginBottom: 1.5,\r\n                                                 }}\r\n                                             >\r\n-                                                Patient Date :*\r\n+                                                 Date :*\r\n                                             </InputLabel>\r\n \r\n                                             <Controller\r\n                                                 name={`records.${index}.date`}\r\n@@ -1117,11 +1117,11 @@\n                                                         }}\r\n                                                     />\r\n                                                 )}\r\n                                             />\r\n-                                            {errors.records?.[index]?.patientDate && (\r\n+                                            {errors.records?.[index]?.date && (\r\n                                                 <Typography color=\"error\">\r\n-                                                    {errors.records[index].patientDate.message}\r\n+                                                    {errors.records[index].date.message}\r\n                                                 </Typography>\r\n                                             )}\r\n                                         </Box>\r\n                                     </Grid>\r\n"
                },
                {
                    "date": 1743251033620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1165,9 +1165,9 @@\n                         <Button\r\n                             variant=\"contained\"\r\n                             color=\"primary\"\r\n                             onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n-                            sx={{ mt: 2 }}\r\n+                            sx={{ mt: 2,textTransform:'capitalize' }}\r\n                         >\r\n                             Add More\r\n                         </Button>\r\n                     </Grid>\r\n"
                },
                {
                    "date": 1743251052062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1073,9 +1073,9 @@\n                         <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {fields.map((item, index) => (\r\n-                                <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n \r\n                                     {/* Patient Date Selection */}\r\n                                     <Grid item xs={4}>\r\n                                         <Box>\r\n"
                },
                {
                    "date": 1743251068839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1076,9 +1076,9 @@\n                             {fields.map((item, index) => (\r\n                                 <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n \r\n                                     {/* Patient Date Selection */}\r\n-                                    <Grid item xs={4}>\r\n+                                    <Grid item xs={3}>\r\n                                         <Box>\r\n                                             <InputLabel\r\n                                                 sx={{\r\n                                                     textTransform: \"capitalize\",\r\n@@ -1126,25 +1126,18 @@\n                                         </Box>\r\n                                     </Grid>\r\n \r\n                                     {/* Amount Field */}\r\n-                                    <Grid item xs={4}>\r\n+                                    <Grid item xs={3}>\r\n                                         <InputField\r\n                                             label=\"Amount\"\r\n                                             placeholder=\"Order Amount\"\r\n                                             size=\"small\"\r\n                                             {...register(`records.${index}.amount`)}\r\n                                         />\r\n                                     </Grid>\r\n \r\n-                                    {/* Remove Button (only for additional fields) */}\r\n-                                    <Grid item xs={4}>\r\n-                                        {index > 0 && (\r\n-                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n-                                                <DeleteIcon />\r\n-                                            </IconButton>\r\n-                                        )}\r\n-                                    </Grid>\r\n+                                   \r\n \r\n                                     {/* Description Field */}\r\n                                     <Grid item xs={12}>\r\n                                         <InputField\r\n@@ -1154,8 +1147,16 @@\n                                             placeholder=\"Description\"\r\n                                             {...register(`records.${index}.description`)}\r\n                                         />\r\n                                     </Grid>\r\n+                                     {/* Remove Button (only for additional fields) */}\r\n+                                     <Grid item xs={1}>\r\n+                                        {index > 0 && (\r\n+                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n+                                                <DeleteIcon />\r\n+                                            </IconButton>\r\n+                                        )}\r\n+                                    </Grid>\r\n                                 </Grid>\r\n                             ))}\r\n                         </LocalizationProvider>\r\n \r\n"
                },
                {
                    "date": 1743251093751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1126,9 +1126,9 @@\n                                         </Box>\r\n                                     </Grid>\r\n \r\n                                     {/* Amount Field */}\r\n-                                    <Grid item xs={3}>\r\n+                                    <Grid item xs={3} mt={2}>\r\n                                         <InputField\r\n                                             label=\"Amount\"\r\n                                             placeholder=\"Order Amount\"\r\n                                             size=\"small\"\r\n@@ -1138,9 +1138,9 @@\n \r\n                                    \r\n \r\n                                     {/* Description Field */}\r\n-                                    <Grid item xs={12}>\r\n+                                    <Grid item xs={4}>\r\n                                         <InputField\r\n                                             label=\"Description\"\r\n                                             multiline\r\n                                             rows={3}\r\n"
                },
                {
                    "date": 1743251114212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1170,8 +1170,12 @@\n                             sx={{ mt: 2,textTransform:'capitalize' }}\r\n                         >\r\n                             Add More\r\n                         </Button>\r\n+\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743251238035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1174,8 +1174,142 @@\n \r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n+                        <Grid item xs={12} sm={5}>\r\n+    <InputLabel sx={{\r\n+        textTransform: \"capitalize\", mt: 2,\r\n+        textAlign: \"left\",\r\n+        fontWeight: 600,\r\n+        fontSize: \"14px\",\r\n+        color: \"#333\",\r\n+        marginBottom: \"4px\",\r\n+    }}>\r\n+        Upload Batch Images :*\r\n+    </InputLabel>\r\n+\r\n+    <Controller\r\n+        name=\"media\"\r\n+        control={control}\r\n+        rules={{\r\n+            required: \"At least one image file is required\",\r\n+            validate: (value) => {\r\n+                if (!value || value.length === 0) {\r\n+                    return \"At least one image file is required\";\r\n+                }\r\n+                for (let i = 0; i < value.length; i++) {\r\n+                    if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n+                        return \"Each file must be smaller than 10MB\";\r\n+                    }\r\n+                    if (!value[i].type.startsWith(\"image/\")) {\r\n+                        return \"Only image files are allowed\";\r\n+                    }\r\n+                }\r\n+                return true;\r\n+            },\r\n+        }}\r\n+        render={({ field: { onChange } }) => (\r\n+            <>\r\n+                <Box\r\n+                    sx={{\r\n+                        borderRadius: \"8px\",\r\n+                        padding: \"20px\",\r\n+                        textAlign: \"center\",\r\n+                        cursor: \"pointer\",\r\n+                        backgroundColor: \"#f9f9f9\",\r\n+                        height: '135px',\r\n+                        \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n+                    }}\r\n+                    onClick={() => document.getElementById(\"upload-media\").click()}\r\n+                >\r\n+                    {!imageLoader ? (\r\n+                        <>\r\n+                            <input\r\n+                                type=\"file\"\r\n+                                accept=\"image/*\"\r\n+                                multiple\r\n+                                style={{ display: \"none\" }}\r\n+                                id=\"upload-media\"\r\n+                                onChange={(e) => {\r\n+                                    const files = Array.from(e.target.files);\r\n+                                    onChange(files); // Update react-hook-form\r\n+                                    handleFileChange2(e); // Handle upload logic\r\n+                                }}\r\n+                            />\r\n+                            <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n+                            <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n+                                Drag & drop or click to upload images\r\n+                            </Typography>\r\n+                            <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n+                                Allowed: Images (Max 10MB per file)\r\n+                            </Typography>\r\n+                        </>\r\n+                    ) : (\r\n+                        <CircularProgress size={90} />\r\n+                    )}\r\n+                </Box>\r\n+\r\n+                {errors.media && (\r\n+                    <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n+                        {errors.media.message}\r\n+                    </Typography>\r\n+                )}\r\n+            </>\r\n+        )}\r\n+    />\r\n+</Grid>\r\n+\r\n+<Grid container p={2}>\r\n+    {uploadedImages?.length > 0 && (\r\n+        <Grid item xs={12}>\r\n+            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n+                Uploaded Images :\r\n+            </InputLabel>\r\n+        </Grid>\r\n+    )}\r\n+    <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n+        {uploadedImages?.length > 0 &&\r\n+            uploadedImages.map((file, index) => (\r\n+                <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n+                    <img\r\n+                        src={file}\r\n+                        alt=\"Uploaded Preview\"\r\n+                        style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n+                    />\r\n+                    <Typography\r\n+                        variant=\"caption\"\r\n+                        sx={{\r\n+                            display: \"block\",\r\n+                            mt: 1,\r\n+                            maxWidth: \"150px\",\r\n+                            whiteSpace: \"nowrap\",\r\n+                            overflow: \"hidden\",\r\n+                            textOverflow: \"ellipsis\",\r\n+                        }}\r\n+                    >\r\n+                        {file.split(\"/\").pop()}\r\n+                    </Typography>\r\n+                    <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n+                        <IconButton\r\n+                            onClick={() => handleRemoveImage(index)}\r\n+                            sx={{\r\n+                                backgroundColor: \"rgba(0,0,0,0.6)\",\r\n+                                color: \"#fff\",\r\n+                                \"&:hover\": { backgroundColor: \"red\" },\r\n+                                width: 20,\r\n+                                height: 20,\r\n+                                borderRadius: \"50%\",\r\n+                                p: 0.5,\r\n+                            }}\r\n+                        >\r\n+                            <CloseIcon fontSize=\"small\" />\r\n+                        </IconButton>\r\n+                    </Box>\r\n+                </Box>\r\n+            ))}\r\n+    </Box>\r\n+</Grid>\r\n+\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743251252350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1088,9 +1088,9 @@\n                                                     color: \"#333\",\r\n                                                     marginBottom: 1.5,\r\n                                                 }}\r\n                                             >\r\n-                                                 Date :*\r\n+                                                Date :*\r\n                                             </InputLabel>\r\n \r\n                                             <Controller\r\n                                                 name={`records.${index}.date`}\r\n@@ -1135,10 +1135,10 @@\n                                             {...register(`records.${index}.amount`)}\r\n                                         />\r\n                                     </Grid>\r\n \r\n-                                   \r\n \r\n+\r\n                                     {/* Description Field */}\r\n                                     <Grid item xs={4}>\r\n                                         <InputField\r\n                                             label=\"Description\"\r\n@@ -1147,10 +1147,10 @@\n                                             placeholder=\"Description\"\r\n                                             {...register(`records.${index}.description`)}\r\n                                         />\r\n                                     </Grid>\r\n-                                     {/* Remove Button (only for additional fields) */}\r\n-                                     <Grid item xs={1}>\r\n+                                    {/* Remove Button (only for additional fields) */}\r\n+                                    <Grid item xs={1}>\r\n                                         {index > 0 && (\r\n                                             <IconButton color=\"error\" onClick={() => remove(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n@@ -1166,150 +1166,150 @@\n                         <Button\r\n                             variant=\"contained\"\r\n                             color=\"primary\"\r\n                             onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n-                            sx={{ mt: 2,textTransform:'capitalize' }}\r\n+                            sx={{ mt: 2, textTransform: 'capitalize' }}\r\n                         >\r\n                             Add More\r\n                         </Button>\r\n \r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n                         <Grid item xs={12} sm={5}>\r\n-    <InputLabel sx={{\r\n-        textTransform: \"capitalize\", mt: 2,\r\n-        textAlign: \"left\",\r\n-        fontWeight: 600,\r\n-        fontSize: \"14px\",\r\n-        color: \"#333\",\r\n-        marginBottom: \"4px\",\r\n-    }}>\r\n-        Upload Batch Images :*\r\n-    </InputLabel>\r\n+                            <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", mt: 2,\r\n+                                textAlign: \"left\",\r\n+                                fontWeight: 600,\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+                                Upload Batch Images :*\r\n+                            </InputLabel>\r\n \r\n-    <Controller\r\n-        name=\"media\"\r\n-        control={control}\r\n-        rules={{\r\n-            required: \"At least one image file is required\",\r\n-            validate: (value) => {\r\n-                if (!value || value.length === 0) {\r\n-                    return \"At least one image file is required\";\r\n-                }\r\n-                for (let i = 0; i < value.length; i++) {\r\n-                    if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n-                        return \"Each file must be smaller than 10MB\";\r\n-                    }\r\n-                    if (!value[i].type.startsWith(\"image/\")) {\r\n-                        return \"Only image files are allowed\";\r\n-                    }\r\n-                }\r\n-                return true;\r\n-            },\r\n-        }}\r\n-        render={({ field: { onChange } }) => (\r\n-            <>\r\n-                <Box\r\n-                    sx={{\r\n-                        borderRadius: \"8px\",\r\n-                        padding: \"20px\",\r\n-                        textAlign: \"center\",\r\n-                        cursor: \"pointer\",\r\n-                        backgroundColor: \"#f9f9f9\",\r\n-                        height: '135px',\r\n-                        \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n-                    }}\r\n-                    onClick={() => document.getElementById(\"upload-media\").click()}\r\n-                >\r\n-                    {!imageLoader ? (\r\n-                        <>\r\n-                            <input\r\n-                                type=\"file\"\r\n-                                accept=\"image/*\"\r\n-                                multiple\r\n-                                style={{ display: \"none\" }}\r\n-                                id=\"upload-media\"\r\n-                                onChange={(e) => {\r\n-                                    const files = Array.from(e.target.files);\r\n-                                    onChange(files); // Update react-hook-form\r\n-                                    handleFileChange2(e); // Handle upload logic\r\n+                            <Controller\r\n+                                name=\"media\"\r\n+                                control={control}\r\n+                                rules={{\r\n+                                    required: \"At least one image file is required\",\r\n+                                    validate: (value) => {\r\n+                                        if (!value || value.length === 0) {\r\n+                                            return \"At least one image file is required\";\r\n+                                        }\r\n+                                        for (let i = 0; i < value.length; i++) {\r\n+                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n+                                                return \"Each file must be smaller than 10MB\";\r\n+                                            }\r\n+                                            if (!value[i].type.startsWith(\"image/\")) {\r\n+                                                return \"Only image files are allowed\";\r\n+                                            }\r\n+                                        }\r\n+                                        return true;\r\n+                                    },\r\n                                 }}\r\n+                                render={({ field: { onChange } }) => (\r\n+                                    <>\r\n+                                        <Box\r\n+                                            sx={{\r\n+                                                borderRadius: \"8px\",\r\n+                                                padding: \"20px\",\r\n+                                                textAlign: \"center\",\r\n+                                                cursor: \"pointer\",\r\n+                                                backgroundColor: \"#f9f9f9\",\r\n+                                                height: '135px',\r\n+                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n+                                            }}\r\n+                                            onClick={() => document.getElementById(\"upload-media\").click()}\r\n+                                        >\r\n+                                            {!imageLoader ? (\r\n+                                                <>\r\n+                                                    <input\r\n+                                                        type=\"file\"\r\n+                                                        accept=\"image/*\"\r\n+                                                        multiple\r\n+                                                        style={{ display: \"none\" }}\r\n+                                                        id=\"upload-media\"\r\n+                                                        onChange={(e) => {\r\n+                                                            const files = Array.from(e.target.files);\r\n+                                                            onChange(files); // Update react-hook-form\r\n+                                                            handleFileChange2(e); // Handle upload logic\r\n+                                                        }}\r\n+                                                    />\r\n+                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n+                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n+                                                        Drag & drop or click to upload images\r\n+                                                    </Typography>\r\n+                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n+                                                        Allowed: Images (Max 10MB per file)\r\n+                                                    </Typography>\r\n+                                                </>\r\n+                                            ) : (\r\n+                                                <CircularProgress size={90} />\r\n+                                            )}\r\n+                                        </Box>\r\n+\r\n+                                        {errors.media && (\r\n+                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n+                                                {errors.media.message}\r\n+                                            </Typography>\r\n+                                        )}\r\n+                                    </>\r\n+                                )}\r\n                             />\r\n-                            <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n-                            <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n-                                Drag & drop or click to upload images\r\n-                            </Typography>\r\n-                            <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n-                                Allowed: Images (Max 10MB per file)\r\n-                            </Typography>\r\n-                        </>\r\n-                    ) : (\r\n-                        <CircularProgress size={90} />\r\n-                    )}\r\n-                </Box>\r\n+                        </Grid>\r\n \r\n-                {errors.media && (\r\n-                    <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n-                        {errors.media.message}\r\n-                    </Typography>\r\n-                )}\r\n-            </>\r\n-        )}\r\n-    />\r\n-</Grid>\r\n+                        <Grid container p={2}>\r\n+                            {uploadedImages?.length > 0 && (\r\n+                                <Grid item xs={12}>\r\n+                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n+                                        Uploaded Images :\r\n+                                    </InputLabel>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n+                                {uploadedImages?.length > 0 &&\r\n+                                    uploadedImages.map((file, index) => (\r\n+                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n+                                            <img\r\n+                                                src={file}\r\n+                                                alt=\"Uploaded Preview\"\r\n+                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n+                                            />\r\n+                                            <Typography\r\n+                                                variant=\"caption\"\r\n+                                                sx={{\r\n+                                                    display: \"block\",\r\n+                                                    mt: 1,\r\n+                                                    maxWidth: \"150px\",\r\n+                                                    whiteSpace: \"nowrap\",\r\n+                                                    overflow: \"hidden\",\r\n+                                                    textOverflow: \"ellipsis\",\r\n+                                                }}\r\n+                                            >\r\n+                                                {file.split(\"/\").pop()}\r\n+                                            </Typography>\r\n+                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n+                                                <IconButton\r\n+                                                    onClick={() => handleRemoveImage(index)}\r\n+                                                    sx={{\r\n+                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n+                                                        color: \"#fff\",\r\n+                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n+                                                        width: 20,\r\n+                                                        height: 20,\r\n+                                                        borderRadius: \"50%\",\r\n+                                                        p: 0.5,\r\n+                                                    }}\r\n+                                                >\r\n+                                                    <CloseIcon fontSize=\"small\" />\r\n+                                                </IconButton>\r\n+                                            </Box>\r\n+                                        </Box>\r\n+                                    ))}\r\n+                            </Box>\r\n+                        </Grid>\r\n \r\n-<Grid container p={2}>\r\n-    {uploadedImages?.length > 0 && (\r\n-        <Grid item xs={12}>\r\n-            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n-                Uploaded Images :\r\n-            </InputLabel>\r\n-        </Grid>\r\n-    )}\r\n-    <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n-        {uploadedImages?.length > 0 &&\r\n-            uploadedImages.map((file, index) => (\r\n-                <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n-                    <img\r\n-                        src={file}\r\n-                        alt=\"Uploaded Preview\"\r\n-                        style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n-                    />\r\n-                    <Typography\r\n-                        variant=\"caption\"\r\n-                        sx={{\r\n-                            display: \"block\",\r\n-                            mt: 1,\r\n-                            maxWidth: \"150px\",\r\n-                            whiteSpace: \"nowrap\",\r\n-                            overflow: \"hidden\",\r\n-                            textOverflow: \"ellipsis\",\r\n-                        }}\r\n-                    >\r\n-                        {file.split(\"/\").pop()}\r\n-                    </Typography>\r\n-                    <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n-                        <IconButton\r\n-                            onClick={() => handleRemoveImage(index)}\r\n-                            sx={{\r\n-                                backgroundColor: \"rgba(0,0,0,0.6)\",\r\n-                                color: \"#fff\",\r\n-                                \"&:hover\": { backgroundColor: \"red\" },\r\n-                                width: 20,\r\n-                                height: 20,\r\n-                                borderRadius: \"50%\",\r\n-                                p: 0.5,\r\n-                            }}\r\n-                        >\r\n-                            <CloseIcon fontSize=\"small\" />\r\n-                        </IconButton>\r\n-                    </Box>\r\n-                </Box>\r\n-            ))}\r\n-    </Box>\r\n-</Grid>\r\n-\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743251288977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -340,8 +340,54 @@\n \r\n         }\r\n     };\r\n \r\n+    const handleFileChange2 = async (e) => {\r\n+        setUploadedAfterImages([]); \r\n+        setImageLoaderAfter(true);\r\n+    \r\n+        try {\r\n+            const files = e.target.files;\r\n+            if (!files || files.length === 0) return; // Exit if no files are selected\r\n+    \r\n+            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n+    \r\n+            const uploadedNewAfterImages = [];\r\n+    \r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const formData = new FormData();\r\n+                formData.append(\"document\", files[i]);\r\n+    \r\n+                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n+    \r\n+                const response = await axios.post(\r\n+                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n+                    formData,\r\n+                    {\r\n+                        headers: {\r\n+                            \"Content-Type\": \"multipart/form-data\",\r\n+                        },\r\n+                    }\r\n+                );\r\n+    \r\n+                const imagePath = response?.data?.data?.path;\r\n+                if (imagePath) {\r\n+                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n+                    uploadedNewAfterImages.push(fullImageUrl);\r\n+                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n+                }\r\n+            }\r\n+    \r\n+            setUploadedAfterImages(uploadedNewAfterImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewAfterImages);\r\n+        } catch (error) {\r\n+            console.error(\"Error uploading files:\", error);\r\n+        } finally {\r\n+            setImageLoaderAfter(false);\r\n+        }\r\n+    };\r\n+    \r\n+\r\n     useEffect(() => {\r\n         let interval;\r\n         if (timer > 0) {\r\n             interval = setInterval(() => {\r\n"
                },
                {
                    "date": 1743251302451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -341,9 +341,9 @@\n         }\r\n     };\r\n \r\n     const handleFileChange2 = async (e) => {\r\n-        setUploadedAfterImages([]); \r\n+        setUplaodedImages([]); \r\n         setImageLoaderAfter(true);\r\n     \r\n         try {\r\n             const files = e.target.files;\r\n"
                },
                {
                    "date": 1743251310909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -342,9 +342,9 @@\n     };\r\n \r\n     const handleFileChange2 = async (e) => {\r\n         setUplaodedImages([]); \r\n-        setImageLoaderAfter(true);\r\n+        setImageLoader(true);\r\n     \r\n         try {\r\n             const files = e.target.files;\r\n             if (!files || files.length === 0) return; // Exit if no files are selected\r\n"
                },
                {
                    "date": 1743251319413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,9 +350,9 @@\n             if (!files || files.length === 0) return; // Exit if no files are selected\r\n     \r\n             setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n     \r\n-            const uploadedNewAfterImages = [];\r\n+            const uploadedNewBatchImages = [];\r\n     \r\n             for (let i = 0; i < files.length; i++) {\r\n                 const formData = new FormData();\r\n                 formData.append(\"document\", files[i]);\r\n"
                },
                {
                    "date": 1743251329077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -371,15 +371,15 @@\n     \r\n                 const imagePath = response?.data?.data?.path;\r\n                 if (imagePath) {\r\n                     const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n-                    uploadedNewAfterImages.push(fullImageUrl);\r\n+                    uploadedNewBatchImages.push(fullImageUrl);\r\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n     \r\n-            setUploadedAfterImages(uploadedNewAfterImages); // Update state with uploaded image URLs\r\n-            console.log(\"All Uploaded Images:\", uploadedNewAfterImages);\r\n+            setUploadedAfterImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n         } catch (error) {\r\n             console.error(\"Error uploading files:\", error);\r\n         } finally {\r\n             setImageLoaderAfter(false);\r\n"
                },
                {
                    "date": 1743251353525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n     const [documents, setDocuments] = useState([])\r\n     const [selectedDocument, setSelectedDocument] = useState(null)\r\n     const sigCanvas = useRef(null);\r\n     const [signature, setSignature] = useState(null);\r\n+    const [uploadedImages, setUploadedImages] = useState([])\r\n \r\n     // Handle Save Signature\r\n     const handleSave = async () => {\r\n         if (sigCanvas.current) {\r\n@@ -376,9 +377,9 @@\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n     \r\n-            setUploadedAfterImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n+            setUploadedImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n             console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n         } catch (error) {\r\n             console.error(\"Error uploading files:\", error);\r\n         } finally {\r\n"
                },
                {
                    "date": 1743251364889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,8 +55,9 @@\n     const [selectedDocument, setSelectedDocument] = useState(null)\r\n     const sigCanvas = useRef(null);\r\n     const [signature, setSignature] = useState(null);\r\n     const [uploadedImages, setUploadedImages] = useState([])\r\n+    const [imageLoader, setImageLoader] = useState(false)\r\n \r\n     // Handle Save Signature\r\n     const handleSave = async () => {\r\n         if (sigCanvas.current) {\r\n"
                },
                {
                    "date": 1743251449417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n import SelectField from \"../../../components/select\";\r\n import SignatureCanvas from \"react-signature-canvas\";\r\n import moment from \"moment\";\r\n import DeleteIcon from \"@mui/icons-material/Delete\";\r\n+import UploadFileIcon from '@mui/icons-material/UploadFile';\r\n \r\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n"
                },
                {
                    "date": 1743251484440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -388,9 +388,11 @@\n             setImageLoaderAfter(false);\r\n         }\r\n     };\r\n     \r\n-\r\n+    const handleRemoveImage = (index) => {\r\n+        setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n+    };\r\n     useEffect(() => {\r\n         let interval;\r\n         if (timer > 0) {\r\n             interval = setInterval(() => {\r\n"
                },
                {
                    "date": 1743251492494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -344,9 +344,9 @@\n         }\r\n     };\r\n \r\n     const handleFileChange2 = async (e) => {\r\n-        setUplaodedImages([]); \r\n+        setUploadedImages([]); \r\n         setImageLoader(true);\r\n     \r\n         try {\r\n             const files = e.target.files;\r\n"
                },
                {
                    "date": 1743251537010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -384,9 +384,9 @@\n             console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n         } catch (error) {\r\n             console.error(\"Error uploading files:\", error);\r\n         } finally {\r\n-            setImageLoaderAfter(false);\r\n+            setImageLoader(false);\r\n         }\r\n     };\r\n     \r\n     const handleRemoveImage = (index) => {\r\n"
                },
                {
                    "date": 1743251576630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n import SignatureCanvas from \"react-signature-canvas\";\r\n import moment from \"moment\";\r\n import DeleteIcon from \"@mui/icons-material/Delete\";\r\n import UploadFileIcon from '@mui/icons-material/UploadFile';\r\n+import CloseIcon from '@mui/icons-material/Close';\r\n \r\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n"
                },
                {
                    "date": 1743251628888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1313,9 +1313,9 @@\n                         <Grid container p={2}>\r\n                             {uploadedImages?.length > 0 && (\r\n                                 <Grid item xs={12}>\r\n                                     <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n-                                        Uploaded Images :\r\n+                                        Uploaded Batch Images :\r\n                                     </InputLabel>\r\n                                 </Grid>\r\n                             )}\r\n                             <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n"
                },
                {
                    "date": 1743251653816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1218,9 +1218,9 @@\n                         <Button\r\n                             variant=\"contained\"\r\n                             color=\"primary\"\r\n                             onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n-                            sx={{ mt: 2, textTransform: 'capitalize' }}\r\n+                            sx={{ mt: 2, textTransform: 'capitalize',p:2 }}\r\n                         >\r\n                             Add More\r\n                         </Button>\r\n \r\n"
                },
                {
                    "date": 1743251666210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1359,9 +1359,145 @@\n                                         </Box>\r\n                                     ))}\r\n                             </Box>\r\n                         </Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n+                        <Grid item xs={12} sm={5}>\r\n+                            <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", mt: 2,\r\n+                                textAlign: \"left\",\r\n+                                fontWeight: 600,\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+                                Upload Batch Images :*\r\n+                            </InputLabel>\r\n \r\n+                            <Controller\r\n+                                name=\"media\"\r\n+                                control={control}\r\n+                                rules={{\r\n+                                    required: \"At least one image file is required\",\r\n+                                    validate: (value) => {\r\n+                                        if (!value || value.length === 0) {\r\n+                                            return \"At least one image file is required\";\r\n+                                        }\r\n+                                        for (let i = 0; i < value.length; i++) {\r\n+                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n+                                                return \"Each file must be smaller than 10MB\";\r\n+                                            }\r\n+                                            if (!value[i].type.startsWith(\"image/\")) {\r\n+                                                return \"Only image files are allowed\";\r\n+                                            }\r\n+                                        }\r\n+                                        return true;\r\n+                                    },\r\n+                                }}\r\n+                                render={({ field: { onChange } }) => (\r\n+                                    <>\r\n+                                        <Box\r\n+                                            sx={{\r\n+                                                borderRadius: \"8px\",\r\n+                                                padding: \"20px\",\r\n+                                                textAlign: \"center\",\r\n+                                                cursor: \"pointer\",\r\n+                                                backgroundColor: \"#f9f9f9\",\r\n+                                                height: '135px',\r\n+                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n+                                            }}\r\n+                                            onClick={() => document.getElementById(\"upload-media\").click()}\r\n+                                        >\r\n+                                            {!imageLoader ? (\r\n+                                                <>\r\n+                                                    <input\r\n+                                                        type=\"file\"\r\n+                                                        accept=\"image/*\"\r\n+                                                        multiple\r\n+                                                        style={{ display: \"none\" }}\r\n+                                                        id=\"upload-media\"\r\n+                                                        onChange={(e) => {\r\n+                                                            const files = Array.from(e.target.files);\r\n+                                                            onChange(files); // Update react-hook-form\r\n+                                                            handleFileChange2(e); // Handle upload logic\r\n+                                                        }}\r\n+                                                    />\r\n+                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n+                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n+                                                        Drag & drop or click to upload images\r\n+                                                    </Typography>\r\n+                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n+                                                        Allowed: Images (Max 10MB per file)\r\n+                                                    </Typography>\r\n+                                                </>\r\n+                                            ) : (\r\n+                                                <CircularProgress size={90} />\r\n+                                            )}\r\n+                                        </Box>\r\n+\r\n+                                        {errors.media && (\r\n+                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n+                                                {errors.media.message}\r\n+                                            </Typography>\r\n+                                        )}\r\n+                                    </>\r\n+                                )}\r\n+                            />\r\n+                        </Grid>\r\n+\r\n+                        <Grid container p={2}>\r\n+                            {uploadedImages?.length > 0 && (\r\n+                                <Grid item xs={12}>\r\n+                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n+                                        Uploaded Batch Images :\r\n+                                    </InputLabel>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n+                                {uploadedImages?.length > 0 &&\r\n+                                    uploadedImages.map((file, index) => (\r\n+                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n+                                            <img\r\n+                                                src={file}\r\n+                                                alt=\"Uploaded Preview\"\r\n+                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n+                                            />\r\n+                                            <Typography\r\n+                                                variant=\"caption\"\r\n+                                                sx={{\r\n+                                                    display: \"block\",\r\n+                                                    mt: 1,\r\n+                                                    maxWidth: \"150px\",\r\n+                                                    whiteSpace: \"nowrap\",\r\n+                                                    overflow: \"hidden\",\r\n+                                                    textOverflow: \"ellipsis\",\r\n+                                                }}\r\n+                                            >\r\n+                                                {file.split(\"/\").pop()}\r\n+                                            </Typography>\r\n+                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n+                                                <IconButton\r\n+                                                    onClick={() => handleRemoveImage(index)}\r\n+                                                    sx={{\r\n+                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n+                                                        color: \"#fff\",\r\n+                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n+                                                        width: 20,\r\n+                                                        height: 20,\r\n+                                                        borderRadius: \"50%\",\r\n+                                                        p: 0.5,\r\n+                                                    }}\r\n+                                                >\r\n+                                                    <CloseIcon fontSize=\"small\" />\r\n+                                                </IconButton>\r\n+                                            </Box>\r\n+                                        </Box>\r\n+                                    ))}\r\n+                            </Box>\r\n+                        </Grid>\r\n+\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743251686437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1218,9 +1218,9 @@\n                         <Button\r\n                             variant=\"contained\"\r\n                             color=\"primary\"\r\n                             onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n-                            sx={{ mt: 2, textTransform: 'capitalize',p:2 }}\r\n+                            sx={{ mt: 2, textTransform: 'capitalize' }}\r\n                         >\r\n                             Add More\r\n                         </Button>\r\n \r\n"
                },
                {
                    "date": 1743251706834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1213,18 +1213,18 @@\n                         </LocalizationProvider>\r\n \r\n \r\n \r\n-                        {/* Add More Button */}\r\n+                       <Grid>\r\n                         <Button\r\n                             variant=\"contained\"\r\n                             color=\"primary\"\r\n                             onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n                             sx={{ mt: 2, textTransform: 'capitalize' }}\r\n                         >\r\n                             Add More\r\n                         </Button>\r\n-\r\n+                        </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n                         <Grid item xs={12} sm={5}>\r\n"
                },
                {
                    "date": 1743251725606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1213,9 +1213,9 @@\n                         </LocalizationProvider>\r\n \r\n \r\n \r\n-                       <Grid>\r\n+                       <Grid container p={2}>\r\n                         <Button\r\n                             variant=\"contained\"\r\n                             color=\"primary\"\r\n                             onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n@@ -1371,9 +1371,9 @@\n                                 fontSize: \"14px\",\r\n                                 color: \"#333\",\r\n                                 marginBottom: \"4px\",\r\n                             }}>\r\n-                                Upload Batch Images :*\r\n+                                Upload Before Images :*\r\n                             </InputLabel>\r\n \r\n                             <Controller\r\n                                 name=\"media\"\r\n"
                },
                {
                    "date": 1743251735199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1375,9 +1375,9 @@\n                                 Upload Before Images :*\r\n                             </InputLabel>\r\n \r\n                             <Controller\r\n-                                name=\"media\"\r\n+                                name=\"media2\"\r\n                                 control={control}\r\n                                 rules={{\r\n                                     required: \"At least one image file is required\",\r\n                                     validate: (value) => {\r\n@@ -1406,9 +1406,9 @@\n                                                 backgroundColor: \"#f9f9f9\",\r\n                                                 height: '135px',\r\n                                                 \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                             }}\r\n-                                            onClick={() => document.getElementById(\"upload-media\").click()}\r\n+                                            onClick={() => document.getElementById(\"upload-media2\").click()}\r\n                                         >\r\n                                             {!imageLoader ? (\r\n                                                 <>\r\n                                                     <input\r\n"
                },
                {
                    "date": 1743251741855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1408,9 +1408,9 @@\n                                                 \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                             }}\r\n                                             onClick={() => document.getElementById(\"upload-media2\").click()}\r\n                                         >\r\n-                                            {!imageLoader ? (\r\n+                                            {!imageLoaderAfter ? (\r\n                                                 <>\r\n                                                     <input\r\n                                                         type=\"file\"\r\n                                                         accept=\"image/*\"\r\n@@ -1419,9 +1419,9 @@\n                                                         id=\"upload-media\"\r\n                                                         onChange={(e) => {\r\n                                                             const files = Array.from(e.target.files);\r\n                                                             onChange(files); // Update react-hook-form\r\n-                                                            handleFileChange2(e); // Handle upload logic\r\n+                                                            handleFileChange3(e); // Handle upload logic\r\n                                                         }}\r\n                                                     />\r\n                                                     <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n                                                     <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n"
                },
                {
                    "date": 1743251748297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1435,11 +1435,11 @@\n                                                 <CircularProgress size={90} />\r\n                                             )}\r\n                                         </Box>\r\n \r\n-                                        {errors.media && (\r\n+                                        {errors.media2 && (\r\n                                             <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n-                                                {errors.media.message}\r\n+                                                {errors.media2.message}\r\n                                             </Typography>\r\n                                         )}\r\n                                     </>\r\n                                 )}\r\n"
                },
                {
                    "date": 1743251758598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1446,17 +1446,17 @@\n                             />\r\n                         </Grid>\r\n \r\n                         <Grid container p={2}>\r\n-                            {uploadedImages?.length > 0 && (\r\n+                            {uploadedImagesBefore?.length > 0 && (\r\n                                 <Grid item xs={12}>\r\n                                     <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n                                         Uploaded Batch Images :\r\n                                     </InputLabel>\r\n                                 </Grid>\r\n                             )}\r\n                             <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n-                                {uploadedImages?.length > 0 &&\r\n+                                {uploadedImagesBefore?.length > 0 &&\r\n                                     uploadedImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n                                                 src={file}\r\n"
                },
                {
                    "date": 1743251767369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1455,9 +1455,9 @@\n                                 </Grid>\r\n                             )}\r\n                             <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n                                 {uploadedImagesBefore?.length > 0 &&\r\n-                                    uploadedImages.map((file, index) => (\r\n+                                    uploadedImagesBefore.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n                                                 src={file}\r\n                                                 alt=\"Uploaded Preview\"\r\n@@ -1477,9 +1477,9 @@\n                                                 {file.split(\"/\").pop()}\r\n                                             </Typography>\r\n                                             <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n                                                 <IconButton\r\n-                                                    onClick={() => handleRemoveImage(index)}\r\n+                                                    onClick={() => handleRemoveImage2(index)}\r\n                                                     sx={{\r\n                                                         backgroundColor: \"rgba(0,0,0,0.6)\",\r\n                                                         color: \"#fff\",\r\n                                                         \"&:hover\": { backgroundColor: \"red\" },\r\n"
                },
                {
                    "date": 1743251788511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -392,8 +392,57 @@\n     \r\n     const handleRemoveImage = (index) => {\r\n         setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n+\r\n+    const handleFileChange2 = async (e) => {\r\n+        setUploadedImages([]); \r\n+        setImageLoader(true);\r\n+    \r\n+        try {\r\n+            const files = e.target.files;\r\n+            if (!files || files.length === 0) return; // Exit if no files are selected\r\n+    \r\n+            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n+    \r\n+            const uploadedNewBatchImages = [];\r\n+    \r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const formData = new FormData();\r\n+                formData.append(\"document\", files[i]);\r\n+    \r\n+                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n+    \r\n+                const response = await axios.post(\r\n+                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n+                    formData,\r\n+                    {\r\n+                        headers: {\r\n+                            \"Content-Type\": \"multipart/form-data\",\r\n+                        },\r\n+                    }\r\n+                );\r\n+    \r\n+                const imagePath = response?.data?.data?.path;\r\n+                if (imagePath) {\r\n+                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n+                    uploadedNewBatchImages.push(fullImageUrl);\r\n+                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n+                }\r\n+            }\r\n+    \r\n+            setUploadedImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n+        } catch (error) {\r\n+            console.error(\"Error uploading files:\", error);\r\n+        } finally {\r\n+            setImageLoader(false);\r\n+        }\r\n+    };\r\n+    \r\n+    const handleRemoveImage2 = (index) => {\r\n+        setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n+    };\r\n     useEffect(() => {\r\n         let interval;\r\n         if (timer > 0) {\r\n             interval = setInterval(() => {\r\n"
                },
                {
                    "date": 1743251815527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n     const sigCanvas = useRef(null);\r\n     const [signature, setSignature] = useState(null);\r\n     const [uploadedImages, setUploadedImages] = useState([])\r\n     const [imageLoader, setImageLoader] = useState(false)\r\n+    const [beforeImages, setBeforeImages] = useState([])\r\n \r\n     // Handle Save Signature\r\n     const handleSave = async () => {\r\n         if (sigCanvas.current) {\r\n"
                },
                {
                    "date": 1743251826116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n     const [signature, setSignature] = useState(null);\r\n     const [uploadedImages, setUploadedImages] = useState([])\r\n     const [imageLoader, setImageLoader] = useState(false)\r\n     const [beforeImages, setBeforeImages] = useState([])\r\n+    const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n \r\n     // Handle Save Signature\r\n     const handleSave = async () => {\r\n         if (sigCanvas.current) {\r\n"
                },
                {
                    "date": 1743251832868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -395,9 +395,9 @@\n     const handleRemoveImage = (index) => {\r\n         setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n \r\n-    const handleFileChange2 = async (e) => {\r\n+    const handleFileChange3 = async (e) => {\r\n         setUploadedImages([]); \r\n         setImageLoader(true);\r\n     \r\n         try {\r\n"
                },
                {
                    "date": 1743251838428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -396,10 +396,10 @@\n         setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n \r\n     const handleFileChange3 = async (e) => {\r\n-        setUploadedImages([]); \r\n-        setImageLoader(true);\r\n+        setBeforeImages([]); \r\n+        setImageLoaderBefore(true);\r\n     \r\n         try {\r\n             const files = e.target.files;\r\n             if (!files || files.length === 0) return; // Exit if no files are selected\r\n"
                },
                {
                    "date": 1743251845755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,9 +405,9 @@\n             if (!files || files.length === 0) return; // Exit if no files are selected\r\n     \r\n             setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n     \r\n-            const uploadedNewBatchImages = [];\r\n+            const uploadedNewBeforeImages = [];\r\n     \r\n             for (let i = 0; i < files.length; i++) {\r\n                 const formData = new FormData();\r\n                 formData.append(\"document\", files[i]);\r\n"
                },
                {
                    "date": 1743251858899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -426,15 +426,15 @@\n     \r\n                 const imagePath = response?.data?.data?.path;\r\n                 if (imagePath) {\r\n                     const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n-                    uploadedNewBatchImages.push(fullImageUrl);\r\n+                    uploadedNewBeforeImages.push(fullImageUrl);\r\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n     \r\n-            setUploadedImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n-            console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n+            setBeforeImages(uploadedNewBeforeImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewBeforeImages);\r\n         } catch (error) {\r\n             console.error(\"Error uploading files:\", error);\r\n         } finally {\r\n             setImageLoader(false);\r\n"
                },
                {
                    "date": 1743251869048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -436,9 +436,9 @@\n             console.log(\"All Uploaded Images:\", uploadedNewBeforeImages);\r\n         } catch (error) {\r\n             console.error(\"Error uploading files:\", error);\r\n         } finally {\r\n-            setImageLoader(false);\r\n+            setImageLoaderBefore(false);\r\n         }\r\n     };\r\n     \r\n     const handleRemoveImage2 = (index) => {\r\n"
                },
                {
                    "date": 1743251880674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -441,9 +441,9 @@\n         }\r\n     };\r\n     \r\n     const handleRemoveImage2 = (index) => {\r\n-        setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n+        setImageLoaderBefore(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n     useEffect(() => {\r\n         let interval;\r\n         if (timer > 0) {\r\n"
                },
                {
                    "date": 1743251886621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -441,9 +441,9 @@\n         }\r\n     };\r\n     \r\n     const handleRemoveImage2 = (index) => {\r\n-        setImageLoaderBefore(prevImages => prevImages.filter((_, i) => i !== index));\r\n+        setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n     useEffect(() => {\r\n         let interval;\r\n         if (timer > 0) {\r\n"
                },
                {
                    "date": 1743251935487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1497,18 +1497,18 @@\n                             />\r\n                         </Grid>\r\n \r\n                         <Grid container p={2}>\r\n-                            {uploadedImagesBefore?.length > 0 && (\r\n+                            {beforeImages?.length > 0 && (\r\n                                 <Grid item xs={12}>\r\n                                     <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n                                         Uploaded Batch Images :\r\n                                     </InputLabel>\r\n                                 </Grid>\r\n                             )}\r\n                             <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n-                                {uploadedImagesBefore?.length > 0 &&\r\n-                                    uploadedImagesBefore.map((file, index) => (\r\n+                                {beforeImages?.length > 0 &&\r\n+                                    beforeImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n                                                 src={file}\r\n                                                 alt=\"Uploaded Preview\"\r\n"
                },
                {
                    "date": 1743251953804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1459,9 +1459,9 @@\n                                                 \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                             }}\r\n                                             onClick={() => document.getElementById(\"upload-media2\").click()}\r\n                                         >\r\n-                                            {!imageLoaderAfter ? (\r\n+                                            {!imageLoaderBefore ? (\r\n                                                 <>\r\n                                                     <input\r\n                                                         type=\"file\"\r\n                                                         accept=\"image/*\"\r\n"
                },
                {
                    "date": 1743251960115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1466,9 +1466,9 @@\n                                                         type=\"file\"\r\n                                                         accept=\"image/*\"\r\n                                                         multiple\r\n                                                         style={{ display: \"none\" }}\r\n-                                                        id=\"upload-media\"\r\n+                                                        id=\"upload-media2\"\r\n                                                         onChange={(e) => {\r\n                                                             const files = Array.from(e.target.files);\r\n                                                             onChange(files); // Update react-hook-form\r\n                                                             handleFileChange3(e); // Handle upload logic\r\n"
                },
                {
                    "date": 1743251994056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1500,9 +1500,9 @@\n                         <Grid container p={2}>\r\n                             {beforeImages?.length > 0 && (\r\n                                 <Grid item xs={12}>\r\n                                     <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n-                                        Uploaded Batch Images :\r\n+                                        Uploaded Before Images :\r\n                                     </InputLabel>\r\n                                 </Grid>\r\n                             )}\r\n                             <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n"
                },
                {
                    "date": 1743252031841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,1696 @@\n+import { useEffect, useRef, useState } from \"react\";\r\n+import ApiServices from \"../../../services/Apis\";\r\n+import { PrimaryButton } from \"../../../components/buttons\";\r\n+import { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, FormLabel, Grid, IconButton, InputAdornment, InputLabel, Paper, Radio, RadioGroup, TextField, Typography } from \"@mui/material\";\r\n+import InputField from \"../../../components/input\";\r\n+import { Controller, useFieldArray, useForm } from \"react-hook-form\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+import axios from \"axios\";\r\n+import { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\";\r\n+import UploadIcon from \"@mui/icons-material/Upload\";\r\n+import OTPInput from \"react-otp-input\";\r\n+import VisibilityIcon from \"@mui/icons-material/Visibility\";\r\n+import VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\n+import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n+import { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\n+import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n+import SelectField from \"../../../components/select\";\r\n+import SignatureCanvas from \"react-signature-canvas\";\r\n+import moment from \"moment\";\r\n+import DeleteIcon from \"@mui/icons-material/Delete\";\r\n+import UploadFileIcon from '@mui/icons-material/UploadFile';\r\n+import CloseIcon from '@mui/icons-material/Close';\r\n+\r\n+\r\n+const CreateConsentForm = () => {\r\n+    const navigate = useNavigate()\r\n+    const [userData, setUserData] = useState(null)\r\n+    const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n+        defaultValues: {\r\n+            records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n+        },\r\n+    });\r\n+\r\n+    const { fields, append, remove } = useFieldArray({\r\n+        control,\r\n+        name: \"records\",\r\n+    });\r\n+    const [title, setTitle] = useState(null)\r\n+\r\n+    const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n+    const [otp, setOtp] = useState(\"\");\r\n+    const [otpError, setOtpError] = useState(false);\r\n+    const [timer, setTimer] = useState(30);\r\n+    const [isLoading, setIsLoading] = useState(false);\r\n+    const [open, setOpen] = useState(false)\r\n+    const [password, setPassword] = useState(\"\");\r\n+    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n+\r\n+    const [showPassword2, setShowPassword2] = useState(false);\r\n+    const [otpToken, setOtpToken] = useState(null)\r\n+    const [showPassword, setShowPassword] = useState(false);\r\n+    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n+    const [patientType, setPatientType] = useState(\"existing\");\r\n+    const [patients, setPatients] = useState([])\r\n+    const [selectedPatient, setSelectedPatient] = useState(null)\r\n+    const [documents, setDocuments] = useState([])\r\n+    const [selectedDocument, setSelectedDocument] = useState(null)\r\n+    const sigCanvas = useRef(null);\r\n+    const [signature, setSignature] = useState(null);\r\n+    const [uploadedImages, setUploadedImages] = useState([])\r\n+    const [imageLoader, setImageLoader] = useState(false)\r\n+    const [beforeImages, setBeforeImages] = useState([])\r\n+    const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n+\r\n+    // Handle Save Signature\r\n+    const handleSave = async () => {\r\n+        if (sigCanvas.current) {\r\n+            const dataURL = await sigCanvas.current.toDataURL();\r\n+            setSignature(dataURL);\r\n+            try {\r\n+                const file = dataURL;\r\n+                if (file) {\r\n+                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+                }\r\n+\r\n+                let obj = {\r\n+                    document: dataURL,\r\n+                    filename: moment().unix() + \"_Sign.png\"\r\n+                }\r\n+\r\n+                const response = await axios.post(\r\n+                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n+                    obj\r\n+                );\r\n+\r\n+                console.log(response?.data?.data?.path);\r\n+\r\n+                setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+\r\n+\r\n+            } catch (error) {\r\n+                console.log(error);\r\n+\r\n+            }\r\n+        }\r\n+    };\r\n+\r\n+    // Handle Clear Signature\r\n+    const handleClear = () => {\r\n+        if (sigCanvas.current) {\r\n+            sigCanvas.current.clear();\r\n+            setSignature(null);\r\n+        }\r\n+    };\r\n+    const [permissions, setPermissions] = useState({\r\n+        marketing: \"\",\r\n+        offers: \"\",\r\n+    });\r\n+\r\n+    const handleChange2 = (event) => {\r\n+        setPermissions({\r\n+            ...permissions,\r\n+            [event.target.name]: event.target.value,\r\n+        });\r\n+    };\r\n+    const handleChange = (event) => {\r\n+        setPatientType(event.target.value);\r\n+    };\r\n+    const {\r\n+        register: register4,\r\n+        handleSubmit: handleSubmit4,\r\n+        setValue: setValue4,\r\n+        getValues: getValues4,\r\n+        reset: reset4,\r\n+        formState: { errors: errors4 },\r\n+    } = useForm();\r\n+\r\n+    // Simulate OTP Submission\r\n+    const handleOtpSubmit = () => {\r\n+        if (otp.length !== 4) {\r\n+            setOtpError(true);\r\n+            return;\r\n+        }\r\n+        setIsLoading(true);\r\n+        setTimeout(() => {\r\n+            setIsLoading(false);\r\n+            SubmitOTP()\r\n+            setStep(2); // Move to reset password step\r\n+        }, 2000);\r\n+    };\r\n+\r\n+    // Simulate Reset Password Submission\r\n+    const handleResetSubmit = () => {\r\n+        if (password !== confirmPassword) {\r\n+            alert(\"Passwords do not match!\");\r\n+            return;\r\n+        }\r\n+        setIsLoading(true);\r\n+        setTimeout(() => {\r\n+            setIsLoading(false);\r\n+            // Close dialog after password reset\r\n+        }, 2000);\r\n+    };\r\n+    const fileInputRef = useRef(null);\r\n+\r\n+    const [loader, setLoader] = useState(false)\r\n+\r\n+    const [imageURL, setImageURL] = useState()\r\n+    const [hovered, setHovered] = useState(false);\r\n+\r\n+\r\n+\r\n+\r\n+    const handleImageClick = () => {\r\n+        fileInputRef.current.click();\r\n+    };\r\n+\r\n+    const handleFileChange = async (e) => {\r\n+        try {\r\n+            const file = e.target.files[0];\r\n+            if (file) {\r\n+                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+            }\r\n+            const formData = new FormData();\r\n+            formData.append(\"document\", e.target.files[0]);\r\n+\r\n+            const response = await axios.post(\r\n+                'https://cosmetic.theappkit.com/api/system/upload',\r\n+                formData,\r\n+                {\r\n+                    headers: {\r\n+                        'Content-Type': 'multipart/form-data'\r\n+                    }\r\n+                }\r\n+            );\r\n+\r\n+            console.log(response?.data?.data?.path);\r\n+\r\n+            setImageURL('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+\r\n+\r\n+        } catch (error) {\r\n+            console.log(error);\r\n+\r\n+        }\r\n+    };\r\n+    const CreateConsentForm = async () => {\r\n+        setLoader(true);\r\n+        try {\r\n+            let obj = {\r\n+                title: title?.id,\r\n+                first_name: getValues('fname'),\r\n+                last_name: getValues('lname'),\r\n+                dob: getValues('selectedDate'),\r\n+                address: getValues('address'),\r\n+                email: getValues('email'),\r\n+                post_code: getValues('post'),\r\n+                phone: getValues('phone'),\r\n+                notes: getValues('notes'),\r\n+                picture: imageURL,\r\n+                kin_details: {\r\n+                    name: getValues('name'),\r\n+                    address: getValues('kinaddress'),\r\n+                    email: getValues('kinemail'),\r\n+                    phone: getValues('kinphone'),\r\n+                },\r\n+                general_practitioner: {\r\n+                    name: getValues('genname'),\r\n+                    address: getValues('genaddress'),\r\n+                    email: getValues('genemail'),\r\n+                    phone: getValues('genphone'),\r\n+                },\r\n+\r\n+            };\r\n+\r\n+            const promise = ApiServices.CreateConsentForm(obj);\r\n+\r\n+            // Handle the API response properly\r\n+            const response = await promise;\r\n+            console.log(response);\r\n+\r\n+            showPromiseToast(\r\n+                promise,\r\n+                \"Saving...\",\r\n+                \"Added Successfully\",\r\n+                \"Something Went Wrong\"\r\n+            );\r\n+\r\n+            // Navigate if response is successful\r\n+            if (response?.responseCode === 200) {\r\n+                console.log(response);\r\n+                setImageURL(null)\r\n+                navigate('/patients')\r\n+\r\n+\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            console.log(error);\r\n+            showErrorToast(error)\r\n+        } finally {\r\n+\r\n+            setLoader(false);\r\n+        }\r\n+    };\r\n+\r\n+    const SendOtp = async (val) => {\r\n+        if (val != 'resend') {\r\n+            setIsLoading(true)\r\n+        }\r\n+\r\n+\r\n+        setTimer(60);\r\n+        try {\r\n+            let obj = {\r\n+                email: userData?.email\r\n+            };\r\n+\r\n+            const data = await ApiServices.SendOtp(obj);\r\n+            console.log(data);\r\n+            if (data.responseCode == 206) {\r\n+                setOtp('')\r\n+                showSuccessToast('Otp Sent Successfully')\r\n+\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+\r\n+            console.log(error)\r\n+        }\r\n+        finally {\r\n+            setIsLoading(false)\r\n+            setStep(1)\r\n+            setOpen(true)\r\n+\r\n+        }\r\n+    }\r\n+\r\n+    const UpdatePassword = async (sendData, result) => {\r\n+        setIsLoading(true)\r\n+        console.log(otpToken, \"otpToken2\");\r\n+        try {\r\n+            let obj = {\r\n+                otp_token: otpToken,\r\n+                email: userData?.email,\r\n+                password: getValues4('password'),\r\n+                confirm_password: getValues4('confirmPassword'),\r\n+            };\r\n+\r\n+            const data = await ApiServices.SendOtp(obj);\r\n+            console.log(data);\r\n+            if (data.responseCode == 200) {\r\n+                setOtp('')\r\n+\r\n+                reset4()\r\n+                setConfirmPassword(false)\r\n+\r\n+\r\n+\r\n+            }\r\n+        } catch (error) {\r\n+            setOtpError(true)\r\n+        }\r\n+        finally {\r\n+            setIsLoading(false)\r\n+            setOpen(false)\r\n+            showSuccessToast('Password Reset Successfully')\r\n+        }\r\n+    };\r\n+\r\n+    const SubmitOTP = async (val) => {\r\n+\r\n+        setIsLoading(true)\r\n+\r\n+\r\n+\r\n+        try {\r\n+            let obj = {\r\n+                email: userData?.email,\r\n+                otp: otp,\r\n+            };\r\n+\r\n+            const data = await ApiServices.SendOtp(obj);\r\n+            console.log(data?.data, 'tesetttt');\r\n+            if (data.responseCode == 206) {\r\n+                console.log(data);\r\n+                setOtpToken(data?.data?.otp_token)\r\n+\r\n+\r\n+            }\r\n+        } catch (error) {\r\n+            setOtpError(true)\r\n+        }\r\n+        finally {\r\n+            setIsLoading(false)\r\n+\r\n+        }\r\n+    };\r\n+\r\n+    const handleFileChange2 = async (e) => {\r\n+        setUploadedImages([]); \r\n+        setImageLoader(true);\r\n+    \r\n+        try {\r\n+            const files = e.target.files;\r\n+            if (!files || files.length === 0) return; // Exit if no files are selected\r\n+    \r\n+            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n+    \r\n+            const uploadedNewBatchImages = [];\r\n+    \r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const formData = new FormData();\r\n+                formData.append(\"document\", files[i]);\r\n+    \r\n+                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n+    \r\n+                const response = await axios.post(\r\n+                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n+                    formData,\r\n+                    {\r\n+                        headers: {\r\n+                            \"Content-Type\": \"multipart/form-data\",\r\n+                        },\r\n+                    }\r\n+                );\r\n+    \r\n+                const imagePath = response?.data?.data?.path;\r\n+                if (imagePath) {\r\n+                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n+                    uploadedNewBatchImages.push(fullImageUrl);\r\n+                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n+                }\r\n+            }\r\n+    \r\n+            setUploadedImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n+        } catch (error) {\r\n+            console.error(\"Error uploading files:\", error);\r\n+        } finally {\r\n+            setImageLoader(false);\r\n+        }\r\n+    };\r\n+    \r\n+    const handleRemoveImage = (index) => {\r\n+        setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n+    };\r\n+\r\n+    const handleFileChange3 = async (e) => {\r\n+        setBeforeImages([]); \r\n+        setImageLoaderBefore(true);\r\n+    \r\n+        try {\r\n+            const files = e.target.files;\r\n+            if (!files || files.length === 0) return; // Exit if no files are selected\r\n+    \r\n+            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n+    \r\n+            const uploadedNewBeforeImages = [];\r\n+    \r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const formData = new FormData();\r\n+                formData.append(\"document\", files[i]);\r\n+    \r\n+                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n+    \r\n+                const response = await axios.post(\r\n+                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n+                    formData,\r\n+                    {\r\n+                        headers: {\r\n+                            \"Content-Type\": \"multipart/form-data\",\r\n+                        },\r\n+                    }\r\n+                );\r\n+    \r\n+                const imagePath = response?.data?.data?.path;\r\n+                if (imagePath) {\r\n+                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n+                    uploadedNewBeforeImages.push(fullImageUrl);\r\n+                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n+                }\r\n+            }\r\n+    \r\n+            setBeforeImages(uploadedNewBeforeImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewBeforeImages);\r\n+        } catch (error) {\r\n+            console.error(\"Error uploading files:\", error);\r\n+        } finally {\r\n+            setImageLoaderBefore(false);\r\n+        }\r\n+    };\r\n+    \r\n+    const handleRemoveImage2 = (index) => {\r\n+        setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n+    };\r\n+    useEffect(() => {\r\n+        let interval;\r\n+        if (timer > 0) {\r\n+            interval = setInterval(() => {\r\n+                setTimer((prev) => prev - 1);\r\n+            }, 1000);\r\n+        } else {\r\n+            clearInterval(interval);\r\n+        }\r\n+        return () => clearInterval(interval);\r\n+    }, [timer]);\r\n+\r\n+    const getDocuments = async () => {\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 999\r\n+            };\r\n+\r\n+            const data = await ApiServices.getAfterCareDocuments(params);\r\n+\r\n+\r\n+\r\n+            setDocuments(\r\n+                data?.data?.documents?.map((doc) => ({\r\n+\r\n+                    id: doc?._id, // Example transformation\r\n+                    name: doc.title, // Another example\r\n+                }))\r\n+            );\r\n+\r\n+\r\n+\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n+        }\r\n+    };\r\n+    const getPatients = async () => {\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 999\r\n+            };\r\n+\r\n+            const data = await ApiServices.getPatients(params);\r\n+\r\n+\r\n+\r\n+            setPatients(\r\n+                data?.data?.patients?.map((doc) => ({\r\n+\r\n+                    id: doc?._id, // Example transformation\r\n+                    name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n+                }))\r\n+            );\r\n+\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n+        }\r\n+    };\r\n+    useEffect(() => {\r\n+        getPatients()\r\n+        getDocuments()\r\n+    }, [])\r\n+\r\n+    return (\r\n+        <div>\r\n+\r\n+            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n+\r\n+\r\n+\r\n+                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateConsentForm)} >\r\n+                    <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n+                        Create New Patient\r\n+                    </Typography>\r\n+\r\n+                    <Grid container mt={4} spacing={2}>\r\n+\r\n+\r\n+                        <Grid item xs={3} mt={2}>\r\n+                            <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+\r\n+                                Select Form :\r\n+                            </InputLabel>\r\n+                            <SelectField\r\n+                                size={'small'}\r\n+                                newLabel={'Select Form'}\r\n+                                fullWidth={true}\r\n+                                options={[]}\r\n+                                selected={title}\r\n+                                onSelect={(value) => {\r\n+                                    setTitle(value)\r\n+\r\n+\r\n+                                }}\r\n+                                error={errors?.title?.message}\r\n+                                register={register(\"title\", {\r\n+                                    required: false,\r\n+                                })}\r\n+                            />\r\n+\r\n+                        </Grid>\r\n+                        <Grid item xs={3} mt={2}>\r\n+                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                                <Grid container spacing={2}>\r\n+                                    {/* Single Date Selection */}\r\n+                                    <Grid item xs={12}>\r\n+                                        <Box>\r\n+                                            <InputLabel sx={{\r\n+                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                                fontSize: \"14px\",\r\n+                                                color: \"#333\",\r\n+                                                marginBottom: 1.5,\r\n+                                            }}>\r\n+                                                Treatment Date :*\r\n+                                            </InputLabel>\r\n+                                            <Controller\r\n+                                                name=\"treatmentDate\"\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: '12px',\r\n+                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n+                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.treatmentDate && (\r\n+                                                <Typography color=\"error\">{errors.treatmentDate.message}</Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n+\r\n+\r\n+\r\n+\r\n+                                </Grid>\r\n+\r\n+\r\n+                            </LocalizationProvider>\r\n+                        </Grid>\r\n+                        <Grid item xs={3} mt={2}>\r\n+                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                                <Grid container spacing={2}>\r\n+                                    {/* Single Date Selection */}\r\n+                                    <Grid item xs={12}>\r\n+                                        <Box>\r\n+                                            <InputLabel sx={{\r\n+                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                                fontSize: \"14px\",\r\n+                                                color: \"#333\",\r\n+                                                marginBottom: 1.5,\r\n+                                            }}>\r\n+                                                Consultation Date :*\r\n+                                            </InputLabel>\r\n+                                            <Controller\r\n+                                                name=\"consultationDate\"\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: '12px',\r\n+                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n+                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.consultationDate && (\r\n+                                                <Typography color=\"error\">{errors.consultationDate.message}</Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n+\r\n+\r\n+\r\n+\r\n+                                </Grid>\r\n+\r\n+\r\n+                            </LocalizationProvider>\r\n+                        </Grid>\r\n+                        <Grid container p={2} spacing={2} >\r\n+\r\n+                            <Grid item xs={3} mt={2}>\r\n+                                <InputLabel sx={{\r\n+                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                    fontSize: \"14px\",\r\n+                                    color: \"#333\",\r\n+                                    marginBottom: \"4px\",\r\n+                                }}>\r\n+\r\n+                                    Existing or New Patient :\r\n+                                </InputLabel>\r\n+                                <FormControl component=\"fieldset\">\r\n+\r\n+                                    <RadioGroup row value={patientType} onChange={handleChange}>\r\n+                                        <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n+                                        <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n+                                    </RadioGroup>\r\n+                                </FormControl>\r\n+                            </Grid>\r\n+                            <Grid item xs={3} mt={2}>\r\n+                                {patientType == 'existing' && <> <InputLabel sx={{\r\n+                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                    fontSize: \"14px\",\r\n+                                    color: \"#333\",\r\n+                                    marginBottom: \"4px\",\r\n+                                }}>\r\n+\r\n+                                    Select Patient :\r\n+                                </InputLabel>\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        newLabel={'Select Patient'}\r\n+                                        fullWidth={true}\r\n+                                        options={patients}\r\n+                                        selected={selectedPatient}\r\n+                                        onSelect={(value) => {\r\n+                                            setSelectedPatient(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors?.patient?.message}\r\n+                                        register={register(\"patient\", {\r\n+                                            required: false,\r\n+                                        })}\r\n+                                    /></>}\r\n+                            </Grid>\r\n+                            <Grid item xs={3} mt={2}>\r\n+                                {patientType == 'existing' && <><InputLabel sx={{\r\n+                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                    fontSize: \"14px\",\r\n+                                    color: \"#333\",\r\n+                                    marginBottom: \"4px\",\r\n+                                }}>\r\n+\r\n+                                    Select Aftercare Document :\r\n+                                </InputLabel>\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        newLabel={'Select Document'}\r\n+                                        fullWidth={true}\r\n+                                        options={documents}\r\n+                                        selected={selectedDocument}\r\n+                                        onSelect={(value) => {\r\n+                                            setSelectedDocument(value)\r\n+\r\n+\r\n+                                        }}\r\n+                                        error={errors?.document?.message}\r\n+                                        register={register(\"document\", {\r\n+                                            required: false,\r\n+                                        })}\r\n+                                    /> </>}\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Patient First Name :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Patient First Name\"}\r\n+                            error={errors?.fname?.message}\r\n+                            register={register(\"fname\", {\r\n+                                required:\r\n+                                    \"Please enter your fname.\"\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Patient Last Name :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\" Patient Last Name\"}\r\n+                            error={errors?.lname?.message}\r\n+                            register={register(\"lname\", {\r\n+                                required:\r\n+                                    \"Please enter your lname.\"\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Patient Email :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Patient Email\"}\r\n+                            error={errors?.email?.message}\r\n+                            register={register(\"email\", {\r\n+                                required:\r\n+                                    \"Please enter your email.\"\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}>\r\n+                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                                <Grid container spacing={2}>\r\n+                                    {/* Single Date Selection */}\r\n+                                    <Grid item xs={12}>\r\n+                                        <Box>\r\n+                                            <InputLabel sx={{\r\n+                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                                fontSize: \"14px\",\r\n+                                                color: \"#333\",\r\n+                                                marginBottom: 1.5,\r\n+                                            }}>\r\n+                                                DOB :*\r\n+                                            </InputLabel>\r\n+                                            <Controller\r\n+                                                name=\"selectedDate\"\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: '12px',\r\n+                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n+                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.selectedDate && (\r\n+                                                <Typography color=\"error\">{errors.selectedDate.message}</Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n+\r\n+\r\n+\r\n+\r\n+                                </Grid>\r\n+\r\n+\r\n+                            </LocalizationProvider>\r\n+                        </Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Phone Number :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Phone Number\"}\r\n+                            error={errors?.phone?.message}\r\n+                            register={register(\"phone\", {\r\n+                                required:\r\n+                                    \"Please enter your phone.\"\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Post Code :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Post Code\"}\r\n+                            error={errors?.post?.message}\r\n+                            register={register(\"post\", {\r\n+                                required:\r\n+                                    \"Please enter your postcode.\"\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Address :*\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Address\"}\r\n+                            error={errors?.address?.message}\r\n+                            register={register(\"address\", {\r\n+                                required:\r\n+                                    \"Please enter your address.\"\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Notes :\"}\r\n+                            multiline\r\n+                            rows={3}\r\n+                            size={'small'}\r\n+                            placeholder={\"Notes\"}\r\n+                            error={errors?.notes?.message}\r\n+                            register={register(\"notes\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+\r\n+                    </Grid>\r\n+                    <Divider sx={{ mt: 4 }} />\r\n+                    <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n+                        Next of Kin Details\r\n+                    </Typography>\r\n+                    <Grid container mt={4} spacing={2}>\r\n+\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Name :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Name\"}\r\n+                            error={errors?.name?.message}\r\n+                            register={register(\"name\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Email :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Email\"}\r\n+                            error={errors?.kinemail?.message}\r\n+                            register={register(\"kinemail\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Phone Number :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Phone Number\"}\r\n+                            error={errors?.kinphone?.message}\r\n+                            register={register(\"kinphone\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Address :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Address\"}\r\n+                            error={errors?.kinaddress?.message}\r\n+                            register={register(\"kinaddress\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+\r\n+\r\n+                    </Grid>\r\n+                    <Divider sx={{ mt: 4 }} />\r\n+                    <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n+                        General Practitioners(GP / Doctors)\r\n+                    </Typography>\r\n+                    <Grid container mt={4} spacing={2}>\r\n+\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Name :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Name\"}\r\n+                            error={errors?.genname?.message}\r\n+                            register={register(\"genname\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Email :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Email\"}\r\n+                            error={errors?.genemail?.message}\r\n+                            register={register(\"genemail\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Phone Number :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Phone Number\"}\r\n+                            error={errors?.genphone?.message}\r\n+                            register={register(\"genphone\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Address :\"}\r\n+                            size={'small'}\r\n+                            placeholder={\"Address\"}\r\n+                            error={errors?.genaddress?.message}\r\n+                            register={register(\"genaddress\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n+                        <Grid container spacing={2} p={2}>\r\n+                            {/* Marketing Permission */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n+                                <FormControl component=\"fieldset\">\r\n+\r\n+                                    <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n+                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n+                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n+                                    </RadioGroup>\r\n+                                </FormControl>\r\n+                            </Grid>\r\n+\r\n+                            {/* Offers & Reminders Permission */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n+                                <FormControl component=\"fieldset\">\r\n+\r\n+                                    <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n+                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n+                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n+                                    </RadioGroup>\r\n+                                </FormControl>\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n+                        <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n+                            Treatment plan section\r\n+                        </Typography>\r\n+\r\n+                        <Grid container spacing={2} p={2}>\r\n+                            {/* Patient Concerns */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <InputField\r\n+                                    label=\"Patient concerns\"\r\n+                                    size=\"small\"\r\n+                                    placeholder=\"Patient concerns\"\r\n+                                    error={errors?.patientConcerns?.message}\r\n+                                    register={register(\"patientConcerns\", { required: false })}\r\n+                                    multiline\r\n+                                    rows={4}\r\n+                                />\r\n+                            </Grid>\r\n+\r\n+                            {/* Patient Goal */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <InputField\r\n+                                    label=\"Patient goal\"\r\n+                                    size=\"small\"\r\n+                                    placeholder=\"Patient goal\"\r\n+                                    error={errors?.patientGoal?.message}\r\n+                                    register={register(\"patientGoal\", { required: false })}\r\n+                                    multiline\r\n+                                    rows={4}\r\n+                                />\r\n+                            </Grid>\r\n+\r\n+                            {/* Advised Plan/Product */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <InputField\r\n+                                    label=\"Advised Plan/product\"\r\n+                                    size=\"small\"\r\n+                                    placeholder=\"Advised Plan/product\"\r\n+                                    error={errors?.advisedPlan?.message}\r\n+                                    register={register(\"advisedPlan\", { required: false })}\r\n+                                    multiline\r\n+                                    rows={4}\r\n+                                />\r\n+                            </Grid>\r\n+\r\n+                            {/* Expected Result */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <InputField\r\n+                                    label=\"Expected Result\"\r\n+                                    size=\"small\"\r\n+                                    placeholder=\"Expected Result\"\r\n+                                    error={errors?.expectedResult?.message}\r\n+                                    register={register(\"expectedResult\", { required: false })}\r\n+                                    multiline\r\n+                                    rows={4}\r\n+                                />\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                        <Typography variant=\"p\" fontWeight={500} mb={2} p={2}>\r\n+                            I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n+                        </Typography>\r\n+                        <Grid container spacing={5} p={2} alignItems=\"center\">\r\n+                            {/* Date Field */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                                    <Grid container spacing={2}>\r\n+                                        {/* Single Date Selection */}\r\n+                                        <Grid item xs={12}>\r\n+                                            <Box>\r\n+                                                <InputLabel sx={{\r\n+                                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+\r\n+                                                    fontSize: \"14px\",\r\n+                                                    color: \"#333\",\r\n+                                                    marginBottom: 1.5,\r\n+                                                }}>\r\n+                                                    Patient Date :*\r\n+                                                </InputLabel>\r\n+                                                <Controller\r\n+                                                    name=\"patientDate\"\r\n+                                                    control={control}\r\n+                                                    rules={{ required: \"Please select a date\" }}\r\n+                                                    render={({ field }) => (\r\n+                                                        <DatePicker\r\n+                                                            {...field}\r\n+                                                            value={field.value || null}\r\n+                                                            onChange={(newValue) => field.onChange(newValue)}\r\n+                                                            slotProps={{\r\n+                                                                textField: {\r\n+                                                                    size: \"small\",\r\n+                                                                    fullWidth: true,\r\n+                                                                    sx: {\r\n+                                                                        \"& .MuiOutlinedInput-root\": {\r\n+                                                                            borderRadius: '12px',\r\n+                                                                            \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n+                                                                            \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n+                                                                            \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n+                                                                        },\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            }}\r\n+                                                        />\r\n+                                                    )}\r\n+                                                />\r\n+                                                {errors.patientDate && (\r\n+                                                    <Typography color=\"error\">{errors.patientDate.message}</Typography>\r\n+                                                )}\r\n+                                            </Box>\r\n+                                        </Grid>\r\n+\r\n+\r\n+\r\n+\r\n+                                    </Grid>\r\n+\r\n+\r\n+                                </LocalizationProvider>\r\n+                            </Grid>\r\n+\r\n+                            {/* Signature Canvas */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <Typography>Patient Signature:</Typography>\r\n+                                <SignatureCanvas\r\n+                                    ref={sigCanvas}\r\n+                                    penColor=\"black\"\r\n+                                    canvasProps={{\r\n+                                        width: 300,\r\n+                                        height: 150,\r\n+                                        className: \"sigCanvas\",\r\n+                                        style: { border: \"1px dashed black\" },\r\n+                                    }}\r\n+                                />\r\n+                                <Grid container spacing={1} mt={1}>\r\n+                                    <Grid item>\r\n+                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n+                                            Clear Signature\r\n+                                        </Button>\r\n+                                    </Grid>\r\n+                                    <Grid item>\r\n+                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n+                                            Save Signature\r\n+                                        </Button>\r\n+                                    </Grid>\r\n+\r\n+                                </Grid>\r\n+\r\n+\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n+                        <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n+\r\n+                        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                            {fields.map((item, index) => (\r\n+                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+\r\n+                                    {/* Patient Date Selection */}\r\n+                                    <Grid item xs={3}>\r\n+                                        <Box>\r\n+                                            <InputLabel\r\n+                                                sx={{\r\n+                                                    textTransform: \"capitalize\",\r\n+                                                    textAlign: \"left\",\r\n+                                                    fontWeight: 700,\r\n+                                                    fontSize: \"14px\",\r\n+                                                    color: \"#333\",\r\n+                                                    marginBottom: 1.5,\r\n+                                                }}\r\n+                                            >\r\n+                                                Date :*\r\n+                                            </InputLabel>\r\n+\r\n+                                            <Controller\r\n+                                                name={`records.${index}.date`}\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: \"12px\",\r\n+                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n+                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.records?.[index]?.date && (\r\n+                                                <Typography color=\"error\">\r\n+                                                    {errors.records[index].date.message}\r\n+                                                </Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n+\r\n+                                    {/* Amount Field */}\r\n+                                    <Grid item xs={3} mt={2}>\r\n+                                        <InputField\r\n+                                            label=\"Amount\"\r\n+                                            placeholder=\"Order Amount\"\r\n+                                            size=\"small\"\r\n+                                            {...register(`records.${index}.amount`)}\r\n+                                        />\r\n+                                    </Grid>\r\n+\r\n+\r\n+\r\n+                                    {/* Description Field */}\r\n+                                    <Grid item xs={4}>\r\n+                                        <InputField\r\n+                                            label=\"Description\"\r\n+                                            multiline\r\n+                                            rows={3}\r\n+                                            placeholder=\"Description\"\r\n+                                            {...register(`records.${index}.description`)}\r\n+                                        />\r\n+                                    </Grid>\r\n+                                    {/* Remove Button (only for additional fields) */}\r\n+                                    <Grid item xs={1}>\r\n+                                        {index > 0 && (\r\n+                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n+                                                <DeleteIcon />\r\n+                                            </IconButton>\r\n+                                        )}\r\n+                                    </Grid>\r\n+                                </Grid>\r\n+                            ))}\r\n+                        </LocalizationProvider>\r\n+\r\n+\r\n+\r\n+                       <Grid container p={2}>\r\n+                        <Button\r\n+                            variant=\"contained\"\r\n+                            color=\"primary\"\r\n+                            onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n+                            sx={{ mt: 2, textTransform: 'capitalize' }}\r\n+                        >\r\n+                            Add More\r\n+                        </Button>\r\n+                        </Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n+                        <Grid item xs={12} sm={5}>\r\n+                            <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", mt: 2,\r\n+                                textAlign: \"left\",\r\n+                                fontWeight: 600,\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+                                Upload Batch Images :*\r\n+                            </InputLabel>\r\n+\r\n+                            <Controller\r\n+                                name=\"media\"\r\n+                                control={control}\r\n+                                rules={{\r\n+                                    required: \"At least one image file is required\",\r\n+                                    validate: (value) => {\r\n+                                        if (!value || value.length === 0) {\r\n+                                            return \"At least one image file is required\";\r\n+                                        }\r\n+                                        for (let i = 0; i < value.length; i++) {\r\n+                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n+                                                return \"Each file must be smaller than 10MB\";\r\n+                                            }\r\n+                                            if (!value[i].type.startsWith(\"image/\")) {\r\n+                                                return \"Only image files are allowed\";\r\n+                                            }\r\n+                                        }\r\n+                                        return true;\r\n+                                    },\r\n+                                }}\r\n+                                render={({ field: { onChange } }) => (\r\n+                                    <>\r\n+                                        <Box\r\n+                                            sx={{\r\n+                                                borderRadius: \"8px\",\r\n+                                                padding: \"20px\",\r\n+                                                textAlign: \"center\",\r\n+                                                cursor: \"pointer\",\r\n+                                                backgroundColor: \"#f9f9f9\",\r\n+                                                height: '135px',\r\n+                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n+                                            }}\r\n+                                            onClick={() => document.getElementById(\"upload-media\").click()}\r\n+                                        >\r\n+                                            {!imageLoader ? (\r\n+                                                <>\r\n+                                                    <input\r\n+                                                        type=\"file\"\r\n+                                                        accept=\"image/*\"\r\n+                                                        multiple\r\n+                                                        style={{ display: \"none\" }}\r\n+                                                        id=\"upload-media\"\r\n+                                                        onChange={(e) => {\r\n+                                                            const files = Array.from(e.target.files);\r\n+                                                            onChange(files); // Update react-hook-form\r\n+                                                            handleFileChange2(e); // Handle upload logic\r\n+                                                        }}\r\n+                                                    />\r\n+                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n+                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n+                                                        Drag & drop or click to upload images\r\n+                                                    </Typography>\r\n+                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n+                                                        Allowed: Images (Max 10MB per file)\r\n+                                                    </Typography>\r\n+                                                </>\r\n+                                            ) : (\r\n+                                                <CircularProgress size={90} />\r\n+                                            )}\r\n+                                        </Box>\r\n+\r\n+                                        {errors.media && (\r\n+                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n+                                                {errors.media.message}\r\n+                                            </Typography>\r\n+                                        )}\r\n+                                    </>\r\n+                                )}\r\n+                            />\r\n+                        </Grid>\r\n+\r\n+                        <Grid container p={2}>\r\n+                            {uploadedImages?.length > 0 && (\r\n+                                <Grid item xs={12}>\r\n+                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n+                                        Uploaded Batch Images :\r\n+                                    </InputLabel>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n+                                {uploadedImages?.length > 0 &&\r\n+                                    uploadedImages.map((file, index) => (\r\n+                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n+                                            <img\r\n+                                                src={file}\r\n+                                                alt=\"Uploaded Preview\"\r\n+                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n+                                            />\r\n+                                            <Typography\r\n+                                                variant=\"caption\"\r\n+                                                sx={{\r\n+                                                    display: \"block\",\r\n+                                                    mt: 1,\r\n+                                                    maxWidth: \"150px\",\r\n+                                                    whiteSpace: \"nowrap\",\r\n+                                                    overflow: \"hidden\",\r\n+                                                    textOverflow: \"ellipsis\",\r\n+                                                }}\r\n+                                            >\r\n+                                                {file.split(\"/\").pop()}\r\n+                                            </Typography>\r\n+                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n+                                                <IconButton\r\n+                                                    onClick={() => handleRemoveImage(index)}\r\n+                                                    sx={{\r\n+                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n+                                                        color: \"#fff\",\r\n+                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n+                                                        width: 20,\r\n+                                                        height: 20,\r\n+                                                        borderRadius: \"50%\",\r\n+                                                        p: 0.5,\r\n+                                                    }}\r\n+                                                >\r\n+                                                    <CloseIcon fontSize=\"small\" />\r\n+                                                </IconButton>\r\n+                                            </Box>\r\n+                                        </Box>\r\n+                                    ))}\r\n+                            </Box>\r\n+                        </Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n+                        <Grid item xs={12} sm={5}>\r\n+                            <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", mt: 2,\r\n+                                textAlign: \"left\",\r\n+                                fontWeight: 600,\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+                                Upload Before Images :*\r\n+                            </InputLabel>\r\n+\r\n+                            <Controller\r\n+                                name=\"media2\"\r\n+                                control={control}\r\n+                                rules={{\r\n+                                    required: \"At least one image file is required\",\r\n+                                    validate: (value) => {\r\n+                                        if (!value || value.length === 0) {\r\n+                                            return \"At least one image file is required\";\r\n+                                        }\r\n+                                        for (let i = 0; i < value.length; i++) {\r\n+                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n+                                                return \"Each file must be smaller than 10MB\";\r\n+                                            }\r\n+                                            if (!value[i].type.startsWith(\"image/\")) {\r\n+                                                return \"Only image files are allowed\";\r\n+                                            }\r\n+                                        }\r\n+                                        return true;\r\n+                                    },\r\n+                                }}\r\n+                                render={({ field: { onChange } }) => (\r\n+                                    <>\r\n+                                        <Box\r\n+                                            sx={{\r\n+                                                borderRadius: \"8px\",\r\n+                                                padding: \"20px\",\r\n+                                                textAlign: \"center\",\r\n+                                                cursor: \"pointer\",\r\n+                                                backgroundColor: \"#f9f9f9\",\r\n+                                                height: '135px',\r\n+                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n+                                            }}\r\n+                                            onClick={() => document.getElementById(\"upload-media2\").click()}\r\n+                                        >\r\n+                                            {!imageLoaderBefore ? (\r\n+                                                <>\r\n+                                                    <input\r\n+                                                        type=\"file\"\r\n+                                                        accept=\"image/*\"\r\n+                                                        multiple\r\n+                                                        style={{ display: \"none\" }}\r\n+                                                        id=\"upload-media2\"\r\n+                                                        onChange={(e) => {\r\n+                                                            const files = Array.from(e.target.files);\r\n+                                                            onChange(files); // Update react-hook-form\r\n+                                                            handleFileChange3(e); // Handle upload logic\r\n+                                                        }}\r\n+                                                    />\r\n+                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n+                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n+                                                        Drag & drop or click to upload images\r\n+                                                    </Typography>\r\n+                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n+                                                        Allowed: Images (Max 10MB per file)\r\n+                                                    </Typography>\r\n+                                                </>\r\n+                                            ) : (\r\n+                                                <CircularProgress size={90} />\r\n+                                            )}\r\n+                                        </Box>\r\n+\r\n+                                        {errors.media2 && (\r\n+                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n+                                                {errors.media2.message}\r\n+                                            </Typography>\r\n+                                        )}\r\n+                                    </>\r\n+                                )}\r\n+                            />\r\n+                        </Grid>\r\n+\r\n+                        <Grid container p={2}>\r\n+                            {beforeImages?.length > 0 && (\r\n+                                <Grid item xs={12}>\r\n+                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n+                                        Uploaded Before Images :\r\n+                                    </InputLabel>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n+                                {beforeImages?.length > 0 &&\r\n+                                    beforeImages.map((file, index) => (\r\n+                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n+                                            <img\r\n+                                                src={file}\r\n+                                                alt=\"Uploaded Preview\"\r\n+                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n+                                            />\r\n+                                            <Typography\r\n+                                                variant=\"caption\"\r\n+                                                sx={{\r\n+                                                    display: \"block\",\r\n+                                                    mt: 1,\r\n+                                                    maxWidth: \"150px\",\r\n+                                                    whiteSpace: \"nowrap\",\r\n+                                                    overflow: \"hidden\",\r\n+                                                    textOverflow: \"ellipsis\",\r\n+                                                }}\r\n+                                            >\r\n+                                                {file.split(\"/\").pop()}\r\n+                                            </Typography>\r\n+                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n+                                                <IconButton\r\n+                                                    onClick={() => handleRemoveImage2(index)}\r\n+                                                    sx={{\r\n+                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n+                                                        color: \"#fff\",\r\n+                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n+                                                        width: 20,\r\n+                                                        height: 20,\r\n+                                                        borderRadius: \"50%\",\r\n+                                                        p: 0.5,\r\n+                                                    }}\r\n+                                                >\r\n+                                                    <CloseIcon fontSize=\"small\" />\r\n+                                                </IconButton>\r\n+                                            </Box>\r\n+                                        </Box>\r\n+                                    ))}\r\n+                            </Box>\r\n+                        </Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n+                        <Grid item xs={12} sm={5}>\r\n+                            <InputLabel sx={{\r\n+                                textTransform: \"capitalize\", mt: 2,\r\n+                                textAlign: \"left\",\r\n+                                fontWeight: 600,\r\n+                                fontSize: \"14px\",\r\n+                                color: \"#333\",\r\n+                                marginBottom: \"4px\",\r\n+                            }}>\r\n+                                Upload After Images :*\r\n+                            </InputLabel>\r\n+\r\n+                            <Controller\r\n+                                name=\"media2\"\r\n+                                control={control}\r\n+                                rules={{\r\n+                                    required: \"At least one image file is required\",\r\n+                                    validate: (value) => {\r\n+                                        if (!value || value.length === 0) {\r\n+                                            return \"At least one image file is required\";\r\n+                                        }\r\n+                                        for (let i = 0; i < value.length; i++) {\r\n+                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n+                                                return \"Each file must be smaller than 10MB\";\r\n+                                            }\r\n+                                            if (!value[i].type.startsWith(\"image/\")) {\r\n+                                                return \"Only image files are allowed\";\r\n+                                            }\r\n+                                        }\r\n+                                        return true;\r\n+                                    },\r\n+                                }}\r\n+                                render={({ field: { onChange } }) => (\r\n+                                    <>\r\n+                                        <Box\r\n+                                            sx={{\r\n+                                                borderRadius: \"8px\",\r\n+                                                padding: \"20px\",\r\n+                                                textAlign: \"center\",\r\n+                                                cursor: \"pointer\",\r\n+                                                backgroundColor: \"#f9f9f9\",\r\n+                                                height: '135px',\r\n+                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n+                                            }}\r\n+                                            onClick={() => document.getElementById(\"upload-media2\").click()}\r\n+                                        >\r\n+                                            {!imageLoaderBefore ? (\r\n+                                                <>\r\n+                                                    <input\r\n+                                                        type=\"file\"\r\n+                                                        accept=\"image/*\"\r\n+                                                        multiple\r\n+                                                        style={{ display: \"none\" }}\r\n+                                                        id=\"upload-media2\"\r\n+                                                        onChange={(e) => {\r\n+                                                            const files = Array.from(e.target.files);\r\n+                                                            onChange(files); // Update react-hook-form\r\n+                                                            handleFileChange3(e); // Handle upload logic\r\n+                                                        }}\r\n+                                                    />\r\n+                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n+                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n+                                                        Drag & drop or click to upload images\r\n+                                                    </Typography>\r\n+                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n+                                                        Allowed: Images (Max 10MB per file)\r\n+                                                    </Typography>\r\n+                                                </>\r\n+                                            ) : (\r\n+                                                <CircularProgress size={90} />\r\n+                                            )}\r\n+                                        </Box>\r\n+\r\n+                                        {errors.media2 && (\r\n+                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n+                                                {errors.media2.message}\r\n+                                            </Typography>\r\n+                                        )}\r\n+                                    </>\r\n+                                )}\r\n+                            />\r\n+                        </Grid>\r\n+\r\n+                        <Grid container p={2}>\r\n+                            {beforeImages?.length > 0 && (\r\n+                                <Grid item xs={12}>\r\n+                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n+                                        Uploaded Before Images :\r\n+                                    </InputLabel>\r\n+                                </Grid>\r\n+                            )}\r\n+                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n+                                {beforeImages?.length > 0 &&\r\n+                                    beforeImages.map((file, index) => (\r\n+                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n+                                            <img\r\n+                                                src={file}\r\n+                                                alt=\"Uploaded Preview\"\r\n+                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n+                                            />\r\n+                                            <Typography\r\n+                                                variant=\"caption\"\r\n+                                                sx={{\r\n+                                                    display: \"block\",\r\n+                                                    mt: 1,\r\n+                                                    maxWidth: \"150px\",\r\n+                                                    whiteSpace: \"nowrap\",\r\n+                                                    overflow: \"hidden\",\r\n+                                                    textOverflow: \"ellipsis\",\r\n+                                                }}\r\n+                                            >\r\n+                                                {file.split(\"/\").pop()}\r\n+                                            </Typography>\r\n+                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n+                                                <IconButton\r\n+                                                    onClick={() => handleRemoveImage2(index)}\r\n+                                                    sx={{\r\n+                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n+                                                        color: \"#fff\",\r\n+                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n+                                                        width: 20,\r\n+                                                        height: 20,\r\n+                                                        borderRadius: \"50%\",\r\n+                                                        p: 0.5,\r\n+                                                    }}\r\n+                                                >\r\n+                                                    <CloseIcon fontSize=\"small\" />\r\n+                                                </IconButton>\r\n+                                            </Box>\r\n+                                        </Box>\r\n+                                    ))}\r\n+                            </Box>\r\n+                        </Grid>\r\n+                    </Grid>\r\n+                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n+                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n+                    </Box>\r\n+                </Box>\r\n+            </Paper>\r\n+        </div >\r\n+    )\r\n+}\r\n+\r\n+export default CreateConsentForm\r\n"
                },
                {
                    "date": 1743252040852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1562,9 +1562,9 @@\n                                 Upload After Images :*\r\n                             </InputLabel>\r\n \r\n                             <Controller\r\n-                                name=\"media2\"\r\n+                                name=\"media3\"\r\n                                 control={control}\r\n                                 rules={{\r\n                                     required: \"At least one image file is required\",\r\n                                     validate: (value) => {\r\n@@ -1593,9 +1593,9 @@\n                                                 backgroundColor: \"#f9f9f9\",\r\n                                                 height: '135px',\r\n                                                 \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                             }}\r\n-                                            onClick={() => document.getElementById(\"upload-media2\").click()}\r\n+                                            onClick={() => document.getElementById(\"upload-media3\").click()}\r\n                                         >\r\n                                             {!imageLoaderBefore ? (\r\n                                                 <>\r\n                                                     <input\r\n@@ -1693,1565 +1693,4 @@\n     )\r\n }\r\n \r\n export default CreateConsentForm\r\n-import { useEffect, useRef, useState } from \"react\";\r\n-import ApiServices from \"../../../services/Apis\";\r\n-import { PrimaryButton } from \"../../../components/buttons\";\r\n-import { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, FormLabel, Grid, IconButton, InputAdornment, InputLabel, Paper, Radio, RadioGroup, TextField, Typography } from \"@mui/material\";\r\n-import InputField from \"../../../components/input\";\r\n-import { Controller, useFieldArray, useForm } from \"react-hook-form\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n-import axios from \"axios\";\r\n-import { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\";\r\n-import UploadIcon from \"@mui/icons-material/Upload\";\r\n-import OTPInput from \"react-otp-input\";\r\n-import VisibilityIcon from \"@mui/icons-material/Visibility\";\r\n-import VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\n-import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n-import { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\n-import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n-import SelectField from \"../../../components/select\";\r\n-import SignatureCanvas from \"react-signature-canvas\";\r\n-import moment from \"moment\";\r\n-import DeleteIcon from \"@mui/icons-material/Delete\";\r\n-import UploadFileIcon from '@mui/icons-material/UploadFile';\r\n-import CloseIcon from '@mui/icons-material/Close';\r\n-\r\n-\r\n-const CreateConsentForm = () => {\r\n-    const navigate = useNavigate()\r\n-    const [userData, setUserData] = useState(null)\r\n-    const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n-        defaultValues: {\r\n-            records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n-        },\r\n-    });\r\n-\r\n-    const { fields, append, remove } = useFieldArray({\r\n-        control,\r\n-        name: \"records\",\r\n-    });\r\n-    const [title, setTitle] = useState(null)\r\n-\r\n-    const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n-    const [otp, setOtp] = useState(\"\");\r\n-    const [otpError, setOtpError] = useState(false);\r\n-    const [timer, setTimer] = useState(30);\r\n-    const [isLoading, setIsLoading] = useState(false);\r\n-    const [open, setOpen] = useState(false)\r\n-    const [password, setPassword] = useState(\"\");\r\n-    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n-\r\n-    const [showPassword2, setShowPassword2] = useState(false);\r\n-    const [otpToken, setOtpToken] = useState(null)\r\n-    const [showPassword, setShowPassword] = useState(false);\r\n-    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n-    const [patientType, setPatientType] = useState(\"existing\");\r\n-    const [patients, setPatients] = useState([])\r\n-    const [selectedPatient, setSelectedPatient] = useState(null)\r\n-    const [documents, setDocuments] = useState([])\r\n-    const [selectedDocument, setSelectedDocument] = useState(null)\r\n-    const sigCanvas = useRef(null);\r\n-    const [signature, setSignature] = useState(null);\r\n-    const [uploadedImages, setUploadedImages] = useState([])\r\n-    const [imageLoader, setImageLoader] = useState(false)\r\n-    const [beforeImages, setBeforeImages] = useState([])\r\n-    const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n-\r\n-    // Handle Save Signature\r\n-    const handleSave = async () => {\r\n-        if (sigCanvas.current) {\r\n-            const dataURL = await sigCanvas.current.toDataURL();\r\n-            setSignature(dataURL);\r\n-            try {\r\n-                const file = dataURL;\r\n-                if (file) {\r\n-                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n-                }\r\n-\r\n-                let obj = {\r\n-                    document: dataURL,\r\n-                    filename: moment().unix() + \"_Sign.png\"\r\n-                }\r\n-\r\n-                const response = await axios.post(\r\n-                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n-                    obj\r\n-                );\r\n-\r\n-                console.log(response?.data?.data?.path);\r\n-\r\n-                setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n-\r\n-\r\n-            } catch (error) {\r\n-                console.log(error);\r\n-\r\n-            }\r\n-        }\r\n-    };\r\n-\r\n-    // Handle Clear Signature\r\n-    const handleClear = () => {\r\n-        if (sigCanvas.current) {\r\n-            sigCanvas.current.clear();\r\n-            setSignature(null);\r\n-        }\r\n-    };\r\n-    const [permissions, setPermissions] = useState({\r\n-        marketing: \"\",\r\n-        offers: \"\",\r\n-    });\r\n-\r\n-    const handleChange2 = (event) => {\r\n-        setPermissions({\r\n-            ...permissions,\r\n-            [event.target.name]: event.target.value,\r\n-        });\r\n-    };\r\n-    const handleChange = (event) => {\r\n-        setPatientType(event.target.value);\r\n-    };\r\n-    const {\r\n-        register: register4,\r\n-        handleSubmit: handleSubmit4,\r\n-        setValue: setValue4,\r\n-        getValues: getValues4,\r\n-        reset: reset4,\r\n-        formState: { errors: errors4 },\r\n-    } = useForm();\r\n-\r\n-    // Simulate OTP Submission\r\n-    const handleOtpSubmit = () => {\r\n-        if (otp.length !== 4) {\r\n-            setOtpError(true);\r\n-            return;\r\n-        }\r\n-        setIsLoading(true);\r\n-        setTimeout(() => {\r\n-            setIsLoading(false);\r\n-            SubmitOTP()\r\n-            setStep(2); // Move to reset password step\r\n-        }, 2000);\r\n-    };\r\n-\r\n-    // Simulate Reset Password Submission\r\n-    const handleResetSubmit = () => {\r\n-        if (password !== confirmPassword) {\r\n-            alert(\"Passwords do not match!\");\r\n-            return;\r\n-        }\r\n-        setIsLoading(true);\r\n-        setTimeout(() => {\r\n-            setIsLoading(false);\r\n-            // Close dialog after password reset\r\n-        }, 2000);\r\n-    };\r\n-    const fileInputRef = useRef(null);\r\n-\r\n-    const [loader, setLoader] = useState(false)\r\n-\r\n-    const [imageURL, setImageURL] = useState()\r\n-    const [hovered, setHovered] = useState(false);\r\n-\r\n-\r\n-\r\n-\r\n-    const handleImageClick = () => {\r\n-        fileInputRef.current.click();\r\n-    };\r\n-\r\n-    const handleFileChange = async (e) => {\r\n-        try {\r\n-            const file = e.target.files[0];\r\n-            if (file) {\r\n-                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n-            }\r\n-            const formData = new FormData();\r\n-            formData.append(\"document\", e.target.files[0]);\r\n-\r\n-            const response = await axios.post(\r\n-                'https://cosmetic.theappkit.com/api/system/upload',\r\n-                formData,\r\n-                {\r\n-                    headers: {\r\n-                        'Content-Type': 'multipart/form-data'\r\n-                    }\r\n-                }\r\n-            );\r\n-\r\n-            console.log(response?.data?.data?.path);\r\n-\r\n-            setImageURL('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n-\r\n-\r\n-        } catch (error) {\r\n-            console.log(error);\r\n-\r\n-        }\r\n-    };\r\n-    const CreateConsentForm = async () => {\r\n-        setLoader(true);\r\n-        try {\r\n-            let obj = {\r\n-                title: title?.id,\r\n-                first_name: getValues('fname'),\r\n-                last_name: getValues('lname'),\r\n-                dob: getValues('selectedDate'),\r\n-                address: getValues('address'),\r\n-                email: getValues('email'),\r\n-                post_code: getValues('post'),\r\n-                phone: getValues('phone'),\r\n-                notes: getValues('notes'),\r\n-                picture: imageURL,\r\n-                kin_details: {\r\n-                    name: getValues('name'),\r\n-                    address: getValues('kinaddress'),\r\n-                    email: getValues('kinemail'),\r\n-                    phone: getValues('kinphone'),\r\n-                },\r\n-                general_practitioner: {\r\n-                    name: getValues('genname'),\r\n-                    address: getValues('genaddress'),\r\n-                    email: getValues('genemail'),\r\n-                    phone: getValues('genphone'),\r\n-                },\r\n-\r\n-            };\r\n-\r\n-            const promise = ApiServices.CreateConsentForm(obj);\r\n-\r\n-            // Handle the API response properly\r\n-            const response = await promise;\r\n-            console.log(response);\r\n-\r\n-            showPromiseToast(\r\n-                promise,\r\n-                \"Saving...\",\r\n-                \"Added Successfully\",\r\n-                \"Something Went Wrong\"\r\n-            );\r\n-\r\n-            // Navigate if response is successful\r\n-            if (response?.responseCode === 200) {\r\n-                console.log(response);\r\n-                setImageURL(null)\r\n-                navigate('/patients')\r\n-\r\n-\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            console.log(error);\r\n-            showErrorToast(error)\r\n-        } finally {\r\n-\r\n-            setLoader(false);\r\n-        }\r\n-    };\r\n-\r\n-    const SendOtp = async (val) => {\r\n-        if (val != 'resend') {\r\n-            setIsLoading(true)\r\n-        }\r\n-\r\n-\r\n-        setTimer(60);\r\n-        try {\r\n-            let obj = {\r\n-                email: userData?.email\r\n-            };\r\n-\r\n-            const data = await ApiServices.SendOtp(obj);\r\n-            console.log(data);\r\n-            if (data.responseCode == 206) {\r\n-                setOtp('')\r\n-                showSuccessToast('Otp Sent Successfully')\r\n-\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-\r\n-            console.log(error)\r\n-        }\r\n-        finally {\r\n-            setIsLoading(false)\r\n-            setStep(1)\r\n-            setOpen(true)\r\n-\r\n-        }\r\n-    }\r\n-\r\n-    const UpdatePassword = async (sendData, result) => {\r\n-        setIsLoading(true)\r\n-        console.log(otpToken, \"otpToken2\");\r\n-        try {\r\n-            let obj = {\r\n-                otp_token: otpToken,\r\n-                email: userData?.email,\r\n-                password: getValues4('password'),\r\n-                confirm_password: getValues4('confirmPassword'),\r\n-            };\r\n-\r\n-            const data = await ApiServices.SendOtp(obj);\r\n-            console.log(data);\r\n-            if (data.responseCode == 200) {\r\n-                setOtp('')\r\n-\r\n-                reset4()\r\n-                setConfirmPassword(false)\r\n-\r\n-\r\n-\r\n-            }\r\n-        } catch (error) {\r\n-            setOtpError(true)\r\n-        }\r\n-        finally {\r\n-            setIsLoading(false)\r\n-            setOpen(false)\r\n-            showSuccessToast('Password Reset Successfully')\r\n-        }\r\n-    };\r\n-\r\n-    const SubmitOTP = async (val) => {\r\n-\r\n-        setIsLoading(true)\r\n-\r\n-\r\n-\r\n-        try {\r\n-            let obj = {\r\n-                email: userData?.email,\r\n-                otp: otp,\r\n-            };\r\n-\r\n-            const data = await ApiServices.SendOtp(obj);\r\n-            console.log(data?.data, 'tesetttt');\r\n-            if (data.responseCode == 206) {\r\n-                console.log(data);\r\n-                setOtpToken(data?.data?.otp_token)\r\n-\r\n-\r\n-            }\r\n-        } catch (error) {\r\n-            setOtpError(true)\r\n-        }\r\n-        finally {\r\n-            setIsLoading(false)\r\n-\r\n-        }\r\n-    };\r\n-\r\n-    const handleFileChange2 = async (e) => {\r\n-        setUploadedImages([]); \r\n-        setImageLoader(true);\r\n-    \r\n-        try {\r\n-            const files = e.target.files;\r\n-            if (!files || files.length === 0) return; // Exit if no files are selected\r\n-    \r\n-            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n-    \r\n-            const uploadedNewBatchImages = [];\r\n-    \r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const formData = new FormData();\r\n-                formData.append(\"document\", files[i]);\r\n-    \r\n-                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n-    \r\n-                const response = await axios.post(\r\n-                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n-                    formData,\r\n-                    {\r\n-                        headers: {\r\n-                            \"Content-Type\": \"multipart/form-data\",\r\n-                        },\r\n-                    }\r\n-                );\r\n-    \r\n-                const imagePath = response?.data?.data?.path;\r\n-                if (imagePath) {\r\n-                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n-                    uploadedNewBatchImages.push(fullImageUrl);\r\n-                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n-                }\r\n-            }\r\n-    \r\n-            setUploadedImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n-            console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n-        } catch (error) {\r\n-            console.error(\"Error uploading files:\", error);\r\n-        } finally {\r\n-            setImageLoader(false);\r\n-        }\r\n-    };\r\n-    \r\n-    const handleRemoveImage = (index) => {\r\n-        setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n-    };\r\n-\r\n-    const handleFileChange3 = async (e) => {\r\n-        setBeforeImages([]); \r\n-        setImageLoaderBefore(true);\r\n-    \r\n-        try {\r\n-            const files = e.target.files;\r\n-            if (!files || files.length === 0) return; // Exit if no files are selected\r\n-    \r\n-            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n-    \r\n-            const uploadedNewBeforeImages = [];\r\n-    \r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const formData = new FormData();\r\n-                formData.append(\"document\", files[i]);\r\n-    \r\n-                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n-    \r\n-                const response = await axios.post(\r\n-                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n-                    formData,\r\n-                    {\r\n-                        headers: {\r\n-                            \"Content-Type\": \"multipart/form-data\",\r\n-                        },\r\n-                    }\r\n-                );\r\n-    \r\n-                const imagePath = response?.data?.data?.path;\r\n-                if (imagePath) {\r\n-                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n-                    uploadedNewBeforeImages.push(fullImageUrl);\r\n-                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n-                }\r\n-            }\r\n-    \r\n-            setBeforeImages(uploadedNewBeforeImages); // Update state with uploaded image URLs\r\n-            console.log(\"All Uploaded Images:\", uploadedNewBeforeImages);\r\n-        } catch (error) {\r\n-            console.error(\"Error uploading files:\", error);\r\n-        } finally {\r\n-            setImageLoaderBefore(false);\r\n-        }\r\n-    };\r\n-    \r\n-    const handleRemoveImage2 = (index) => {\r\n-        setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n-    };\r\n-    useEffect(() => {\r\n-        let interval;\r\n-        if (timer > 0) {\r\n-            interval = setInterval(() => {\r\n-                setTimer((prev) => prev - 1);\r\n-            }, 1000);\r\n-        } else {\r\n-            clearInterval(interval);\r\n-        }\r\n-        return () => clearInterval(interval);\r\n-    }, [timer]);\r\n-\r\n-    const getDocuments = async () => {\r\n-        try {\r\n-            let params = {\r\n-                page: 1,\r\n-                limit: 999\r\n-            };\r\n-\r\n-            const data = await ApiServices.getAfterCareDocuments(params);\r\n-\r\n-\r\n-\r\n-            setDocuments(\r\n-                data?.data?.documents?.map((doc) => ({\r\n-\r\n-                    id: doc?._id, // Example transformation\r\n-                    name: doc.title, // Another example\r\n-                }))\r\n-            );\r\n-\r\n-\r\n-\r\n-        } catch (error) {\r\n-            console.error(\"Error fetching location:\", error);\r\n-        }\r\n-    };\r\n-    const getPatients = async () => {\r\n-        try {\r\n-            let params = {\r\n-                page: 1,\r\n-                limit: 999\r\n-            };\r\n-\r\n-            const data = await ApiServices.getPatients(params);\r\n-\r\n-\r\n-\r\n-            setPatients(\r\n-                data?.data?.patients?.map((doc) => ({\r\n-\r\n-                    id: doc?._id, // Example transformation\r\n-                    name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n-                }))\r\n-            );\r\n-\r\n-        } catch (error) {\r\n-            console.error(\"Error fetching location:\", error);\r\n-        }\r\n-    };\r\n-    useEffect(() => {\r\n-        getPatients()\r\n-        getDocuments()\r\n-    }, [])\r\n-\r\n-    return (\r\n-        <div>\r\n-\r\n-            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n-\r\n-\r\n-\r\n-                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateConsentForm)} >\r\n-                    <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n-                        Create New Patient\r\n-                    </Typography>\r\n-\r\n-                    <Grid container mt={4} spacing={2}>\r\n-\r\n-\r\n-                        <Grid item xs={3} mt={2}>\r\n-                            <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n-\r\n-                                Select Form :\r\n-                            </InputLabel>\r\n-                            <SelectField\r\n-                                size={'small'}\r\n-                                newLabel={'Select Form'}\r\n-                                fullWidth={true}\r\n-                                options={[]}\r\n-                                selected={title}\r\n-                                onSelect={(value) => {\r\n-                                    setTitle(value)\r\n-\r\n-\r\n-                                }}\r\n-                                error={errors?.title?.message}\r\n-                                register={register(\"title\", {\r\n-                                    required: false,\r\n-                                })}\r\n-                            />\r\n-\r\n-                        </Grid>\r\n-                        <Grid item xs={3} mt={2}>\r\n-                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                                <Grid container spacing={2}>\r\n-                                    {/* Single Date Selection */}\r\n-                                    <Grid item xs={12}>\r\n-                                        <Box>\r\n-                                            <InputLabel sx={{\r\n-                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                                fontSize: \"14px\",\r\n-                                                color: \"#333\",\r\n-                                                marginBottom: 1.5,\r\n-                                            }}>\r\n-                                                Treatment Date :*\r\n-                                            </InputLabel>\r\n-                                            <Controller\r\n-                                                name=\"treatmentDate\"\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: '12px',\r\n-                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n-                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.treatmentDate && (\r\n-                                                <Typography color=\"error\">{errors.treatmentDate.message}</Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n-\r\n-\r\n-\r\n-\r\n-                                </Grid>\r\n-\r\n-\r\n-                            </LocalizationProvider>\r\n-                        </Grid>\r\n-                        <Grid item xs={3} mt={2}>\r\n-                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                                <Grid container spacing={2}>\r\n-                                    {/* Single Date Selection */}\r\n-                                    <Grid item xs={12}>\r\n-                                        <Box>\r\n-                                            <InputLabel sx={{\r\n-                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                                fontSize: \"14px\",\r\n-                                                color: \"#333\",\r\n-                                                marginBottom: 1.5,\r\n-                                            }}>\r\n-                                                Consultation Date :*\r\n-                                            </InputLabel>\r\n-                                            <Controller\r\n-                                                name=\"consultationDate\"\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: '12px',\r\n-                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n-                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.consultationDate && (\r\n-                                                <Typography color=\"error\">{errors.consultationDate.message}</Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n-\r\n-\r\n-\r\n-\r\n-                                </Grid>\r\n-\r\n-\r\n-                            </LocalizationProvider>\r\n-                        </Grid>\r\n-                        <Grid container p={2} spacing={2} >\r\n-\r\n-                            <Grid item xs={3} mt={2}>\r\n-                                <InputLabel sx={{\r\n-                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                    fontSize: \"14px\",\r\n-                                    color: \"#333\",\r\n-                                    marginBottom: \"4px\",\r\n-                                }}>\r\n-\r\n-                                    Existing or New Patient :\r\n-                                </InputLabel>\r\n-                                <FormControl component=\"fieldset\">\r\n-\r\n-                                    <RadioGroup row value={patientType} onChange={handleChange}>\r\n-                                        <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n-                                        <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n-                                    </RadioGroup>\r\n-                                </FormControl>\r\n-                            </Grid>\r\n-                            <Grid item xs={3} mt={2}>\r\n-                                {patientType == 'existing' && <> <InputLabel sx={{\r\n-                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                    fontSize: \"14px\",\r\n-                                    color: \"#333\",\r\n-                                    marginBottom: \"4px\",\r\n-                                }}>\r\n-\r\n-                                    Select Patient :\r\n-                                </InputLabel>\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        newLabel={'Select Patient'}\r\n-                                        fullWidth={true}\r\n-                                        options={patients}\r\n-                                        selected={selectedPatient}\r\n-                                        onSelect={(value) => {\r\n-                                            setSelectedPatient(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors?.patient?.message}\r\n-                                        register={register(\"patient\", {\r\n-                                            required: false,\r\n-                                        })}\r\n-                                    /></>}\r\n-                            </Grid>\r\n-                            <Grid item xs={3} mt={2}>\r\n-                                {patientType == 'existing' && <><InputLabel sx={{\r\n-                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                    fontSize: \"14px\",\r\n-                                    color: \"#333\",\r\n-                                    marginBottom: \"4px\",\r\n-                                }}>\r\n-\r\n-                                    Select Aftercare Document :\r\n-                                </InputLabel>\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        newLabel={'Select Document'}\r\n-                                        fullWidth={true}\r\n-                                        options={documents}\r\n-                                        selected={selectedDocument}\r\n-                                        onSelect={(value) => {\r\n-                                            setSelectedDocument(value)\r\n-\r\n-\r\n-                                        }}\r\n-                                        error={errors?.document?.message}\r\n-                                        register={register(\"document\", {\r\n-                                            required: false,\r\n-                                        })}\r\n-                                    /> </>}\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Patient First Name :*\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Patient First Name\"}\r\n-                            error={errors?.fname?.message}\r\n-                            register={register(\"fname\", {\r\n-                                required:\r\n-                                    \"Please enter your fname.\"\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Patient Last Name :*\"}\r\n-                            size={'small'}\r\n-                            placeholder={\" Patient Last Name\"}\r\n-                            error={errors?.lname?.message}\r\n-                            register={register(\"lname\", {\r\n-                                required:\r\n-                                    \"Please enter your lname.\"\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Patient Email :*\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Patient Email\"}\r\n-                            error={errors?.email?.message}\r\n-                            register={register(\"email\", {\r\n-                                required:\r\n-                                    \"Please enter your email.\"\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}>\r\n-                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                                <Grid container spacing={2}>\r\n-                                    {/* Single Date Selection */}\r\n-                                    <Grid item xs={12}>\r\n-                                        <Box>\r\n-                                            <InputLabel sx={{\r\n-                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                                fontSize: \"14px\",\r\n-                                                color: \"#333\",\r\n-                                                marginBottom: 1.5,\r\n-                                            }}>\r\n-                                                DOB :*\r\n-                                            </InputLabel>\r\n-                                            <Controller\r\n-                                                name=\"selectedDate\"\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: '12px',\r\n-                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n-                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.selectedDate && (\r\n-                                                <Typography color=\"error\">{errors.selectedDate.message}</Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n-\r\n-\r\n-\r\n-\r\n-                                </Grid>\r\n-\r\n-\r\n-                            </LocalizationProvider>\r\n-                        </Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Phone Number :*\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Phone Number\"}\r\n-                            error={errors?.phone?.message}\r\n-                            register={register(\"phone\", {\r\n-                                required:\r\n-                                    \"Please enter your phone.\"\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Post Code :*\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Post Code\"}\r\n-                            error={errors?.post?.message}\r\n-                            register={register(\"post\", {\r\n-                                required:\r\n-                                    \"Please enter your postcode.\"\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Address :*\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Address\"}\r\n-                            error={errors?.address?.message}\r\n-                            register={register(\"address\", {\r\n-                                required:\r\n-                                    \"Please enter your address.\"\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Notes :\"}\r\n-                            multiline\r\n-                            rows={3}\r\n-                            size={'small'}\r\n-                            placeholder={\"Notes\"}\r\n-                            error={errors?.notes?.message}\r\n-                            register={register(\"notes\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-\r\n-                    </Grid>\r\n-                    <Divider sx={{ mt: 4 }} />\r\n-                    <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n-                        Next of Kin Details\r\n-                    </Typography>\r\n-                    <Grid container mt={4} spacing={2}>\r\n-\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Name :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Name\"}\r\n-                            error={errors?.name?.message}\r\n-                            register={register(\"name\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Email :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Email\"}\r\n-                            error={errors?.kinemail?.message}\r\n-                            register={register(\"kinemail\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Phone Number :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Phone Number\"}\r\n-                            error={errors?.kinphone?.message}\r\n-                            register={register(\"kinphone\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Address :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Address\"}\r\n-                            error={errors?.kinaddress?.message}\r\n-                            register={register(\"kinaddress\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-\r\n-\r\n-                    </Grid>\r\n-                    <Divider sx={{ mt: 4 }} />\r\n-                    <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n-                        General Practitioners(GP / Doctors)\r\n-                    </Typography>\r\n-                    <Grid container mt={4} spacing={2}>\r\n-\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Name :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Name\"}\r\n-                            error={errors?.genname?.message}\r\n-                            register={register(\"genname\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Email :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Email\"}\r\n-                            error={errors?.genemail?.message}\r\n-                            register={register(\"genemail\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Phone Number :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Phone Number\"}\r\n-                            error={errors?.genphone?.message}\r\n-                            register={register(\"genphone\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Address :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Address\"}\r\n-                            error={errors?.genaddress?.message}\r\n-                            register={register(\"genaddress\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Grid container spacing={2} p={2}>\r\n-                            {/* Marketing Permission */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n-                                <FormControl component=\"fieldset\">\r\n-\r\n-                                    <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n-                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n-                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n-                                    </RadioGroup>\r\n-                                </FormControl>\r\n-                            </Grid>\r\n-\r\n-                            {/* Offers & Reminders Permission */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n-                                <FormControl component=\"fieldset\">\r\n-\r\n-                                    <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n-                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n-                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n-                                    </RadioGroup>\r\n-                                </FormControl>\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n-                            Treatment plan section\r\n-                        </Typography>\r\n-\r\n-                        <Grid container spacing={2} p={2}>\r\n-                            {/* Patient Concerns */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <InputField\r\n-                                    label=\"Patient concerns\"\r\n-                                    size=\"small\"\r\n-                                    placeholder=\"Patient concerns\"\r\n-                                    error={errors?.patientConcerns?.message}\r\n-                                    register={register(\"patientConcerns\", { required: false })}\r\n-                                    multiline\r\n-                                    rows={4}\r\n-                                />\r\n-                            </Grid>\r\n-\r\n-                            {/* Patient Goal */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <InputField\r\n-                                    label=\"Patient goal\"\r\n-                                    size=\"small\"\r\n-                                    placeholder=\"Patient goal\"\r\n-                                    error={errors?.patientGoal?.message}\r\n-                                    register={register(\"patientGoal\", { required: false })}\r\n-                                    multiline\r\n-                                    rows={4}\r\n-                                />\r\n-                            </Grid>\r\n-\r\n-                            {/* Advised Plan/Product */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <InputField\r\n-                                    label=\"Advised Plan/product\"\r\n-                                    size=\"small\"\r\n-                                    placeholder=\"Advised Plan/product\"\r\n-                                    error={errors?.advisedPlan?.message}\r\n-                                    register={register(\"advisedPlan\", { required: false })}\r\n-                                    multiline\r\n-                                    rows={4}\r\n-                                />\r\n-                            </Grid>\r\n-\r\n-                            {/* Expected Result */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <InputField\r\n-                                    label=\"Expected Result\"\r\n-                                    size=\"small\"\r\n-                                    placeholder=\"Expected Result\"\r\n-                                    error={errors?.expectedResult?.message}\r\n-                                    register={register(\"expectedResult\", { required: false })}\r\n-                                    multiline\r\n-                                    rows={4}\r\n-                                />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                        <Typography variant=\"p\" fontWeight={500} mb={2} p={2}>\r\n-                            I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n-                        </Typography>\r\n-                        <Grid container spacing={5} p={2} alignItems=\"center\">\r\n-                            {/* Date Field */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                                    <Grid container spacing={2}>\r\n-                                        {/* Single Date Selection */}\r\n-                                        <Grid item xs={12}>\r\n-                                            <Box>\r\n-                                                <InputLabel sx={{\r\n-                                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                                    fontSize: \"14px\",\r\n-                                                    color: \"#333\",\r\n-                                                    marginBottom: 1.5,\r\n-                                                }}>\r\n-                                                    Patient Date :*\r\n-                                                </InputLabel>\r\n-                                                <Controller\r\n-                                                    name=\"patientDate\"\r\n-                                                    control={control}\r\n-                                                    rules={{ required: \"Please select a date\" }}\r\n-                                                    render={({ field }) => (\r\n-                                                        <DatePicker\r\n-                                                            {...field}\r\n-                                                            value={field.value || null}\r\n-                                                            onChange={(newValue) => field.onChange(newValue)}\r\n-                                                            slotProps={{\r\n-                                                                textField: {\r\n-                                                                    size: \"small\",\r\n-                                                                    fullWidth: true,\r\n-                                                                    sx: {\r\n-                                                                        \"& .MuiOutlinedInput-root\": {\r\n-                                                                            borderRadius: '12px',\r\n-                                                                            \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n-                                                                            \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n-                                                                            \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n-                                                                        },\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            }}\r\n-                                                        />\r\n-                                                    )}\r\n-                                                />\r\n-                                                {errors.patientDate && (\r\n-                                                    <Typography color=\"error\">{errors.patientDate.message}</Typography>\r\n-                                                )}\r\n-                                            </Box>\r\n-                                        </Grid>\r\n-\r\n-\r\n-\r\n-\r\n-                                    </Grid>\r\n-\r\n-\r\n-                                </LocalizationProvider>\r\n-                            </Grid>\r\n-\r\n-                            {/* Signature Canvas */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <Typography>Patient Signature:</Typography>\r\n-                                <SignatureCanvas\r\n-                                    ref={sigCanvas}\r\n-                                    penColor=\"black\"\r\n-                                    canvasProps={{\r\n-                                        width: 300,\r\n-                                        height: 150,\r\n-                                        className: \"sigCanvas\",\r\n-                                        style: { border: \"1px dashed black\" },\r\n-                                    }}\r\n-                                />\r\n-                                <Grid container spacing={1} mt={1}>\r\n-                                    <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n-                                            Clear Signature\r\n-                                        </Button>\r\n-                                    </Grid>\r\n-                                    <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n-                                            Save Signature\r\n-                                        </Button>\r\n-                                    </Grid>\r\n-\r\n-                                </Grid>\r\n-\r\n-\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n-\r\n-                        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                            {fields.map((item, index) => (\r\n-                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n-\r\n-                                    {/* Patient Date Selection */}\r\n-                                    <Grid item xs={3}>\r\n-                                        <Box>\r\n-                                            <InputLabel\r\n-                                                sx={{\r\n-                                                    textTransform: \"capitalize\",\r\n-                                                    textAlign: \"left\",\r\n-                                                    fontWeight: 700,\r\n-                                                    fontSize: \"14px\",\r\n-                                                    color: \"#333\",\r\n-                                                    marginBottom: 1.5,\r\n-                                                }}\r\n-                                            >\r\n-                                                Date :*\r\n-                                            </InputLabel>\r\n-\r\n-                                            <Controller\r\n-                                                name={`records.${index}.date`}\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: \"12px\",\r\n-                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n-                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.records?.[index]?.date && (\r\n-                                                <Typography color=\"error\">\r\n-                                                    {errors.records[index].date.message}\r\n-                                                </Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n-\r\n-                                    {/* Amount Field */}\r\n-                                    <Grid item xs={3} mt={2}>\r\n-                                        <InputField\r\n-                                            label=\"Amount\"\r\n-                                            placeholder=\"Order Amount\"\r\n-                                            size=\"small\"\r\n-                                            {...register(`records.${index}.amount`)}\r\n-                                        />\r\n-                                    </Grid>\r\n-\r\n-\r\n-\r\n-                                    {/* Description Field */}\r\n-                                    <Grid item xs={4}>\r\n-                                        <InputField\r\n-                                            label=\"Description\"\r\n-                                            multiline\r\n-                                            rows={3}\r\n-                                            placeholder=\"Description\"\r\n-                                            {...register(`records.${index}.description`)}\r\n-                                        />\r\n-                                    </Grid>\r\n-                                    {/* Remove Button (only for additional fields) */}\r\n-                                    <Grid item xs={1}>\r\n-                                        {index > 0 && (\r\n-                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n-                                                <DeleteIcon />\r\n-                                            </IconButton>\r\n-                                        )}\r\n-                                    </Grid>\r\n-                                </Grid>\r\n-                            ))}\r\n-                        </LocalizationProvider>\r\n-\r\n-\r\n-\r\n-                       <Grid container p={2}>\r\n-                        <Button\r\n-                            variant=\"contained\"\r\n-                            color=\"primary\"\r\n-                            onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n-                            sx={{ mt: 2, textTransform: 'capitalize' }}\r\n-                        >\r\n-                            Add More\r\n-                        </Button>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Grid item xs={12} sm={5}>\r\n-                            <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", mt: 2,\r\n-                                textAlign: \"left\",\r\n-                                fontWeight: 600,\r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n-                                Upload Batch Images :*\r\n-                            </InputLabel>\r\n-\r\n-                            <Controller\r\n-                                name=\"media\"\r\n-                                control={control}\r\n-                                rules={{\r\n-                                    required: \"At least one image file is required\",\r\n-                                    validate: (value) => {\r\n-                                        if (!value || value.length === 0) {\r\n-                                            return \"At least one image file is required\";\r\n-                                        }\r\n-                                        for (let i = 0; i < value.length; i++) {\r\n-                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n-                                                return \"Each file must be smaller than 10MB\";\r\n-                                            }\r\n-                                            if (!value[i].type.startsWith(\"image/\")) {\r\n-                                                return \"Only image files are allowed\";\r\n-                                            }\r\n-                                        }\r\n-                                        return true;\r\n-                                    },\r\n-                                }}\r\n-                                render={({ field: { onChange } }) => (\r\n-                                    <>\r\n-                                        <Box\r\n-                                            sx={{\r\n-                                                borderRadius: \"8px\",\r\n-                                                padding: \"20px\",\r\n-                                                textAlign: \"center\",\r\n-                                                cursor: \"pointer\",\r\n-                                                backgroundColor: \"#f9f9f9\",\r\n-                                                height: '135px',\r\n-                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n-                                            }}\r\n-                                            onClick={() => document.getElementById(\"upload-media\").click()}\r\n-                                        >\r\n-                                            {!imageLoader ? (\r\n-                                                <>\r\n-                                                    <input\r\n-                                                        type=\"file\"\r\n-                                                        accept=\"image/*\"\r\n-                                                        multiple\r\n-                                                        style={{ display: \"none\" }}\r\n-                                                        id=\"upload-media\"\r\n-                                                        onChange={(e) => {\r\n-                                                            const files = Array.from(e.target.files);\r\n-                                                            onChange(files); // Update react-hook-form\r\n-                                                            handleFileChange2(e); // Handle upload logic\r\n-                                                        }}\r\n-                                                    />\r\n-                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n-                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n-                                                        Drag & drop or click to upload images\r\n-                                                    </Typography>\r\n-                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n-                                                        Allowed: Images (Max 10MB per file)\r\n-                                                    </Typography>\r\n-                                                </>\r\n-                                            ) : (\r\n-                                                <CircularProgress size={90} />\r\n-                                            )}\r\n-                                        </Box>\r\n-\r\n-                                        {errors.media && (\r\n-                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n-                                                {errors.media.message}\r\n-                                            </Typography>\r\n-                                        )}\r\n-                                    </>\r\n-                                )}\r\n-                            />\r\n-                        </Grid>\r\n-\r\n-                        <Grid container p={2}>\r\n-                            {uploadedImages?.length > 0 && (\r\n-                                <Grid item xs={12}>\r\n-                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n-                                        Uploaded Batch Images :\r\n-                                    </InputLabel>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n-                                {uploadedImages?.length > 0 &&\r\n-                                    uploadedImages.map((file, index) => (\r\n-                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n-                                            <img\r\n-                                                src={file}\r\n-                                                alt=\"Uploaded Preview\"\r\n-                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n-                                            />\r\n-                                            <Typography\r\n-                                                variant=\"caption\"\r\n-                                                sx={{\r\n-                                                    display: \"block\",\r\n-                                                    mt: 1,\r\n-                                                    maxWidth: \"150px\",\r\n-                                                    whiteSpace: \"nowrap\",\r\n-                                                    overflow: \"hidden\",\r\n-                                                    textOverflow: \"ellipsis\",\r\n-                                                }}\r\n-                                            >\r\n-                                                {file.split(\"/\").pop()}\r\n-                                            </Typography>\r\n-                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n-                                                <IconButton\r\n-                                                    onClick={() => handleRemoveImage(index)}\r\n-                                                    sx={{\r\n-                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n-                                                        color: \"#fff\",\r\n-                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n-                                                        width: 20,\r\n-                                                        height: 20,\r\n-                                                        borderRadius: \"50%\",\r\n-                                                        p: 0.5,\r\n-                                                    }}\r\n-                                                >\r\n-                                                    <CloseIcon fontSize=\"small\" />\r\n-                                                </IconButton>\r\n-                                            </Box>\r\n-                                        </Box>\r\n-                                    ))}\r\n-                            </Box>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Grid item xs={12} sm={5}>\r\n-                            <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", mt: 2,\r\n-                                textAlign: \"left\",\r\n-                                fontWeight: 600,\r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n-                                Upload Before Images :*\r\n-                            </InputLabel>\r\n-\r\n-                            <Controller\r\n-                                name=\"media2\"\r\n-                                control={control}\r\n-                                rules={{\r\n-                                    required: \"At least one image file is required\",\r\n-                                    validate: (value) => {\r\n-                                        if (!value || value.length === 0) {\r\n-                                            return \"At least one image file is required\";\r\n-                                        }\r\n-                                        for (let i = 0; i < value.length; i++) {\r\n-                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n-                                                return \"Each file must be smaller than 10MB\";\r\n-                                            }\r\n-                                            if (!value[i].type.startsWith(\"image/\")) {\r\n-                                                return \"Only image files are allowed\";\r\n-                                            }\r\n-                                        }\r\n-                                        return true;\r\n-                                    },\r\n-                                }}\r\n-                                render={({ field: { onChange } }) => (\r\n-                                    <>\r\n-                                        <Box\r\n-                                            sx={{\r\n-                                                borderRadius: \"8px\",\r\n-                                                padding: \"20px\",\r\n-                                                textAlign: \"center\",\r\n-                                                cursor: \"pointer\",\r\n-                                                backgroundColor: \"#f9f9f9\",\r\n-                                                height: '135px',\r\n-                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n-                                            }}\r\n-                                            onClick={() => document.getElementById(\"upload-media2\").click()}\r\n-                                        >\r\n-                                            {!imageLoaderBefore ? (\r\n-                                                <>\r\n-                                                    <input\r\n-                                                        type=\"file\"\r\n-                                                        accept=\"image/*\"\r\n-                                                        multiple\r\n-                                                        style={{ display: \"none\" }}\r\n-                                                        id=\"upload-media2\"\r\n-                                                        onChange={(e) => {\r\n-                                                            const files = Array.from(e.target.files);\r\n-                                                            onChange(files); // Update react-hook-form\r\n-                                                            handleFileChange3(e); // Handle upload logic\r\n-                                                        }}\r\n-                                                    />\r\n-                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n-                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n-                                                        Drag & drop or click to upload images\r\n-                                                    </Typography>\r\n-                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n-                                                        Allowed: Images (Max 10MB per file)\r\n-                                                    </Typography>\r\n-                                                </>\r\n-                                            ) : (\r\n-                                                <CircularProgress size={90} />\r\n-                                            )}\r\n-                                        </Box>\r\n-\r\n-                                        {errors.media2 && (\r\n-                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n-                                                {errors.media2.message}\r\n-                                            </Typography>\r\n-                                        )}\r\n-                                    </>\r\n-                                )}\r\n-                            />\r\n-                        </Grid>\r\n-\r\n-                        <Grid container p={2}>\r\n-                            {beforeImages?.length > 0 && (\r\n-                                <Grid item xs={12}>\r\n-                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n-                                        Uploaded Before Images :\r\n-                                    </InputLabel>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n-                                {beforeImages?.length > 0 &&\r\n-                                    beforeImages.map((file, index) => (\r\n-                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n-                                            <img\r\n-                                                src={file}\r\n-                                                alt=\"Uploaded Preview\"\r\n-                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n-                                            />\r\n-                                            <Typography\r\n-                                                variant=\"caption\"\r\n-                                                sx={{\r\n-                                                    display: \"block\",\r\n-                                                    mt: 1,\r\n-                                                    maxWidth: \"150px\",\r\n-                                                    whiteSpace: \"nowrap\",\r\n-                                                    overflow: \"hidden\",\r\n-                                                    textOverflow: \"ellipsis\",\r\n-                                                }}\r\n-                                            >\r\n-                                                {file.split(\"/\").pop()}\r\n-                                            </Typography>\r\n-                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n-                                                <IconButton\r\n-                                                    onClick={() => handleRemoveImage2(index)}\r\n-                                                    sx={{\r\n-                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n-                                                        color: \"#fff\",\r\n-                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n-                                                        width: 20,\r\n-                                                        height: 20,\r\n-                                                        borderRadius: \"50%\",\r\n-                                                        p: 0.5,\r\n-                                                    }}\r\n-                                                >\r\n-                                                    <CloseIcon fontSize=\"small\" />\r\n-                                                </IconButton>\r\n-                                            </Box>\r\n-                                        </Box>\r\n-                                    ))}\r\n-                            </Box>\r\n-                        </Grid>\r\n-\r\n-                    </Grid>\r\n-                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n-                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n-                    </Box>\r\n-                </Box>\r\n-            </Paper>\r\n-        </div >\r\n-    )\r\n-}\r\n-\r\n-export default CreateConsentForm\r\n"
                },
                {
                    "date": 1743252047437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1595,16 +1595,16 @@\n                                                 \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                             }}\r\n                                             onClick={() => document.getElementById(\"upload-media3\").click()}\r\n                                         >\r\n-                                            {!imageLoaderBefore ? (\r\n+                                            {!imageLoaderAfter ? (\r\n                                                 <>\r\n                                                     <input\r\n                                                         type=\"file\"\r\n                                                         accept=\"image/*\"\r\n                                                         multiple\r\n                                                         style={{ display: \"none\" }}\r\n-                                                        id=\"upload-media2\"\r\n+                                                        id=\"upload-media3\"\r\n                                                         onChange={(e) => {\r\n                                                             const files = Array.from(e.target.files);\r\n                                                             onChange(files); // Update react-hook-form\r\n                                                             handleFileChange3(e); // Handle upload logic\r\n"
                },
                {
                    "date": 1743252057271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1606,9 +1606,9 @@\n                                                         id=\"upload-media3\"\r\n                                                         onChange={(e) => {\r\n                                                             const files = Array.from(e.target.files);\r\n                                                             onChange(files); // Update react-hook-form\r\n-                                                            handleFileChange3(e); // Handle upload logic\r\n+                                                            handleFileChange4(e); // Handle upload logic\r\n                                                         }}\r\n                                                     />\r\n                                                     <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n                                                     <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n@@ -1622,11 +1622,11 @@\n                                                 <CircularProgress size={90} />\r\n                                             )}\r\n                                         </Box>\r\n \r\n-                                        {errors.media2 && (\r\n+                                        {errors.media3 && (\r\n                                             <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n-                                                {errors.media2.message}\r\n+                                                {errors.media3.message}\r\n                                             </Typography>\r\n                                         )}\r\n                                     </>\r\n                                 )}\r\n"
                },
                {
                    "date": 1743252063551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1633,9 +1633,9 @@\n                             />\r\n                         </Grid>\r\n \r\n                         <Grid container p={2}>\r\n-                            {beforeImages?.length > 0 && (\r\n+                            {afterImages?.length > 0 && (\r\n                                 <Grid item xs={12}>\r\n                                     <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n                                         Uploaded Before Images :\r\n                                     </InputLabel>\r\n"
                },
                {
                    "date": 1743252070991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1636,9 +1636,9 @@\n                         <Grid container p={2}>\r\n                             {afterImages?.length > 0 && (\r\n                                 <Grid item xs={12}>\r\n                                     <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n-                                        Uploaded Before Images :\r\n+                                        Uploaded After Images :\r\n                                     </InputLabel>\r\n                                 </Grid>\r\n                             )}\r\n                             <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n"
                },
                {
                    "date": 1743252079229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1641,10 +1641,10 @@\n                                     </InputLabel>\r\n                                 </Grid>\r\n                             )}\r\n                             <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n-                                {beforeImages?.length > 0 &&\r\n-                                    beforeImages.map((file, index) => (\r\n+                                {afterImages?.length > 0 &&\r\n+                                    afterImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n                                                 src={file}\r\n                                                 alt=\"Uploaded Preview\"\r\n"
                },
                {
                    "date": 1743252114838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n     const [uploadedImages, setUploadedImages] = useState([])\r\n     const [imageLoader, setImageLoader] = useState(false)\r\n     const [beforeImages, setBeforeImages] = useState([])\r\n     const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n+    const [afterImages, setAfterImages] = useState([])\r\n \r\n     // Handle Save Signature\r\n     const handleSave = async () => {\r\n         if (sigCanvas.current) {\r\n@@ -1664,9 +1665,9 @@\n                                                 {file.split(\"/\").pop()}\r\n                                             </Typography>\r\n                                             <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n                                                 <IconButton\r\n-                                                    onClick={() => handleRemoveImage2(index)}\r\n+                                                    onClick={() => handleRemoveImage3(index)}\r\n                                                     sx={{\r\n                                                         backgroundColor: \"rgba(0,0,0,0.6)\",\r\n                                                         color: \"#fff\",\r\n                                                         \"&:hover\": { backgroundColor: \"red\" },\r\n"
                },
                {
                    "date": 1743252140687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,9 @@\n     const [imageLoader, setImageLoader] = useState(false)\r\n     const [beforeImages, setBeforeImages] = useState([])\r\n     const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n     const [afterImages, setAfterImages] = useState([])\r\n+    const [imageLoaderAfter, setImageLoaderAfter] = useState(false)\r\n \r\n     // Handle Save Signature\r\n     const handleSave = async () => {\r\n         if (sigCanvas.current) {\r\n"
                },
                {
                    "date": 1743252154523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -445,8 +445,56 @@\n     \r\n     const handleRemoveImage2 = (index) => {\r\n         setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n+    const handleFileChange4 = async (e) => {\r\n+        setBeforeImages([]); \r\n+        setImageLoaderBefore(true);\r\n+    \r\n+        try {\r\n+            const files = e.target.files;\r\n+            if (!files || files.length === 0) return; // Exit if no files are selected\r\n+    \r\n+            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n+    \r\n+            const uploadedNewBeforeImages = [];\r\n+    \r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const formData = new FormData();\r\n+                formData.append(\"document\", files[i]);\r\n+    \r\n+                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n+    \r\n+                const response = await axios.post(\r\n+                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n+                    formData,\r\n+                    {\r\n+                        headers: {\r\n+                            \"Content-Type\": \"multipart/form-data\",\r\n+                        },\r\n+                    }\r\n+                );\r\n+    \r\n+                const imagePath = response?.data?.data?.path;\r\n+                if (imagePath) {\r\n+                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n+                    uploadedNewBeforeImages.push(fullImageUrl);\r\n+                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n+                }\r\n+            }\r\n+    \r\n+            setBeforeImages(uploadedNewBeforeImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewBeforeImages);\r\n+        } catch (error) {\r\n+            console.error(\"Error uploading files:\", error);\r\n+        } finally {\r\n+            setImageLoaderBefore(false);\r\n+        }\r\n+    };\r\n+    \r\n+    const handleRemoveImage2 = (index) => {\r\n+        setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n+    };\r\n     useEffect(() => {\r\n         let interval;\r\n         if (timer > 0) {\r\n             interval = setInterval(() => {\r\n"
                },
                {
                    "date": 1743252163585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -446,10 +446,10 @@\n     const handleRemoveImage2 = (index) => {\r\n         setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n     const handleFileChange4 = async (e) => {\r\n-        setBeforeImages([]); \r\n-        setImageLoaderBefore(true);\r\n+        setAfterImages([]); \r\n+        setImageLoaderAfter(true);\r\n     \r\n         try {\r\n             const files = e.target.files;\r\n             if (!files || files.length === 0) return; // Exit if no files are selected\r\n"
                },
                {
                    "date": 1743252186193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -455,9 +455,9 @@\n             if (!files || files.length === 0) return; // Exit if no files are selected\r\n     \r\n             setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n     \r\n-            const uploadedNewBeforeImages = [];\r\n+            const uploadedNewAfterImages = [];\r\n     \r\n             for (let i = 0; i < files.length; i++) {\r\n                 const formData = new FormData();\r\n                 formData.append(\"document\", files[i]);\r\n@@ -476,15 +476,15 @@\n     \r\n                 const imagePath = response?.data?.data?.path;\r\n                 if (imagePath) {\r\n                     const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n-                    uploadedNewBeforeImages.push(fullImageUrl);\r\n+                    uploadedNewAfterImages.push(fullImageUrl);\r\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n     \r\n-            setBeforeImages(uploadedNewBeforeImages); // Update state with uploaded image URLs\r\n-            console.log(\"All Uploaded Images:\", uploadedNewBeforeImages);\r\n+            setBeforeImages(uploadedNewAfterImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewAfterImages);\r\n         } catch (error) {\r\n             console.error(\"Error uploading files:\", error);\r\n         } finally {\r\n             setImageLoaderBefore(false);\r\n"
                },
                {
                    "date": 1743252196033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -481,14 +481,14 @@\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n     \r\n-            setBeforeImages(uploadedNewAfterImages); // Update state with uploaded image URLs\r\n+            setAfterImages(uploadedNewAfterImages); // Update state with uploaded image URLs\r\n             console.log(\"All Uploaded Images:\", uploadedNewAfterImages);\r\n         } catch (error) {\r\n             console.error(\"Error uploading files:\", error);\r\n         } finally {\r\n-            setImageLoaderBefore(false);\r\n+            setImageLoaderAfter(false);\r\n         }\r\n     };\r\n     \r\n     const handleRemoveImage2 = (index) => {\r\n"
                },
                {
                    "date": 1743252204114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -490,10 +490,10 @@\n             setImageLoaderAfter(false);\r\n         }\r\n     };\r\n     \r\n-    const handleRemoveImage2 = (index) => {\r\n-        setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n+    const handleRemoveImage3 = (index) => {\r\n+        setAfterImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n     useEffect(() => {\r\n         let interval;\r\n         if (timer > 0) {\r\n"
                },
                {
                    "date": 1743252281976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1732,8 +1732,11 @@\n                                         </Box>\r\n                                     ))}\r\n                             </Box>\r\n                         </Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743252534808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n     const [userData, setUserData] = useState(null)\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n         defaultValues: {\r\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n+            furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n         },\r\n     });\r\n \r\n     const { fields, append, remove } = useFieldArray({\r\n"
                },
                {
                    "date": 1743252542228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,12 @@\n         defaultValues: {\r\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n             furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n         },\r\n-    });\r\n+    });const { fields: furtherFields, append: appendFurther, remove: removeFurther } = useFieldArray({\r\n+        control,\r\n+        name: \"furtherFields\",\r\n+      });\r\n \r\n     const { fields, append, remove } = useFieldArray({\r\n         control,\r\n         name: \"records\",\r\n"
                },
                {
                    "date": 1743252604984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,17 +29,31 @@\n         defaultValues: {\r\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n             furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n         },\r\n-    });const { fields: furtherFields, append: appendFurther, remove: removeFurther } = useFieldArray({\r\n+    });\r\n+    const { fields: furtherFields, append: appendFurther, remove: removeFurther } = useFieldArray({\r\n         control,\r\n         name: \"furtherFields\",\r\n       });\r\n \r\n     const { fields, append, remove } = useFieldArray({\r\n         control,\r\n         name: \"records\",\r\n     });\r\n+\r\n+    const furtherSignCanvasRefs = useRef([]);\r\n+\r\n+    // Clear Signature Function\r\n+    const clearSignature = (index, type) => {\r\n+      if (type === \"records\" && signCanvasRefs.current[index]) {\r\n+        signCanvasRefs.current[index].clear();\r\n+        setValue(`records.${index}.sign`, \"\"); \r\n+      } else if (type === \"furtherFields\" && furtherSignCanvasRefs.current[index]) {\r\n+        furtherSignCanvasRefs.current[index].clear();\r\n+        setValue(`furtherFields.${index}.sign`, \"\");\r\n+      }\r\n+    };\r\n     const [title, setTitle] = useState(null)\r\n \r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n"
                },
                {
                    "date": 1743252644861,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,20 +40,9 @@\n         control,\r\n         name: \"records\",\r\n     });\r\n \r\n-    const furtherSignCanvasRefs = useRef([]);\r\n-\r\n-    // Clear Signature Function\r\n-    const clearSignature = (index, type) => {\r\n-      if (type === \"records\" && signCanvasRefs.current[index]) {\r\n-        signCanvasRefs.current[index].clear();\r\n-        setValue(`records.${index}.sign`, \"\"); \r\n-      } else if (type === \"furtherFields\" && furtherSignCanvasRefs.current[index]) {\r\n-        furtherSignCanvasRefs.current[index].clear();\r\n-        setValue(`furtherFields.${index}.sign`, \"\");\r\n-      }\r\n-    };\r\n+    \r\n     const [title, setTitle] = useState(null)\r\n \r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n"
                },
                {
                    "date": 1743252659098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,17 @@\n         control,\r\n         name: \"records\",\r\n     });\r\n \r\n-    \r\n+    const signCanvasRefs = useRef([]);\r\n+\r\n+    // Clear Signature Function\r\n+    const clearSignature = (index) => {\r\n+      if (signCanvasRefs.current[index]) {\r\n+        signCanvasRefs.current[index].clear();\r\n+        setValue(`furtherFields.${index}.sign`, \"\");\r\n+      }\r\n+    };\r\n     const [title, setTitle] = useState(null)\r\n \r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n"
                },
                {
                    "date": 1743252703958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1750,8 +1750,81 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n+                        <Typography variant=\"h6\" sx={{ mt: 4 }}>Further Records</Typography>\r\n+\r\n+<LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+  {furtherFields.map((item, index) => (\r\n+    <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+      {/* Date Selection */}\r\n+      <Grid item xs={6}>\r\n+        <Box>\r\n+          <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1.5 }}>\r\n+            Further Date :*\r\n+          </InputLabel>\r\n+          <Controller\r\n+            name={`furtherFields.${index}.date`}\r\n+            control={control}\r\n+            rules={{ required: \"Please select a date\" }}\r\n+            render={({ field }) => (\r\n+              <DatePicker\r\n+                {...field}\r\n+                value={field.value || null}\r\n+                onChange={(newValue) => field.onChange(newValue)}\r\n+                slotProps={{\r\n+                  textField: { size: \"small\", fullWidth: true },\r\n+                }}\r\n+              />\r\n+            )}\r\n+          />\r\n+          {errors.furtherFields?.[index]?.date && (\r\n+            <Typography color=\"error\">\r\n+              {errors.furtherFields[index].date.message}\r\n+            </Typography>\r\n+          )}\r\n+        </Box>\r\n+      </Grid>\r\n+\r\n+      {/* Signature Field */}\r\n+      <Grid item xs={6}>\r\n+        <Box>\r\n+          <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1 }}>\r\n+            Signature :*\r\n+          </InputLabel>\r\n+          <SignatureCanvas\r\n+            ref={(el) => (signCanvasRefs.current[index] = el)}\r\n+            penColor=\"black\"\r\n+            canvasProps={{ width: 300, height: 100, style: { border: \"1px solid #e0e0e0\" } }}\r\n+          />\r\n+          <Button\r\n+            size=\"small\"\r\n+            variant=\"outlined\"\r\n+            color=\"error\"\r\n+            onClick={() => clearSignature(index)}\r\n+            sx={{ mt: 1 }}\r\n+          >\r\n+            Clear\r\n+          </Button>\r\n+        </Box>\r\n+      </Grid>\r\n+\r\n+      {/* Remove Button */}\r\n+      <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n+        {index > 0 && (\r\n+          <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n+            <DeleteIcon />\r\n+          </IconButton>\r\n+        )}\r\n+      </Grid>\r\n+    </Grid>\r\n+  ))}\r\n+</LocalizationProvider>\r\n+\r\n+{/* Add More Button for FurtherFields */}\r\n+<Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n+  Add More Further Records\r\n+</Button>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743252710290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     });\r\n     const { fields: furtherFields, append: appendFurther, remove: removeFurther } = useFieldArray({\r\n         control,\r\n         name: \"furtherFields\",\r\n-      });\r\n+    });\r\n \r\n     const { fields, append, remove } = useFieldArray({\r\n         control,\r\n         name: \"records\",\r\n@@ -44,12 +44,12 @@\n     const signCanvasRefs = useRef([]);\r\n \r\n     // Clear Signature Function\r\n     const clearSignature = (index) => {\r\n-      if (signCanvasRefs.current[index]) {\r\n-        signCanvasRefs.current[index].clear();\r\n-        setValue(`furtherFields.${index}.sign`, \"\");\r\n-      }\r\n+        if (signCanvasRefs.current[index]) {\r\n+            signCanvasRefs.current[index].clear();\r\n+            setValue(`furtherFields.${index}.sign`, \"\");\r\n+        }\r\n     };\r\n     const [title, setTitle] = useState(null)\r\n \r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n@@ -364,25 +364,25 @@\n         }\r\n     };\r\n \r\n     const handleFileChange2 = async (e) => {\r\n-        setUploadedImages([]); \r\n+        setUploadedImages([]);\r\n         setImageLoader(true);\r\n-    \r\n+\r\n         try {\r\n             const files = e.target.files;\r\n             if (!files || files.length === 0) return; // Exit if no files are selected\r\n-    \r\n+\r\n             setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n-    \r\n+\r\n             const uploadedNewBatchImages = [];\r\n-    \r\n+\r\n             for (let i = 0; i < files.length; i++) {\r\n                 const formData = new FormData();\r\n                 formData.append(\"document\", files[i]);\r\n-    \r\n+\r\n                 console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n-    \r\n+\r\n                 const response = await axios.post(\r\n                     \"https://cosmetic.theappkit.com/api/system/upload\",\r\n                     formData,\r\n                     {\r\n@@ -390,48 +390,48 @@\n                             \"Content-Type\": \"multipart/form-data\",\r\n                         },\r\n                     }\r\n                 );\r\n-    \r\n+\r\n                 const imagePath = response?.data?.data?.path;\r\n                 if (imagePath) {\r\n                     const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n                     uploadedNewBatchImages.push(fullImageUrl);\r\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n-    \r\n+\r\n             setUploadedImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n             console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n         } catch (error) {\r\n             console.error(\"Error uploading files:\", error);\r\n         } finally {\r\n             setImageLoader(false);\r\n         }\r\n     };\r\n-    \r\n+\r\n     const handleRemoveImage = (index) => {\r\n         setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n \r\n     const handleFileChange3 = async (e) => {\r\n-        setBeforeImages([]); \r\n+        setBeforeImages([]);\r\n         setImageLoaderBefore(true);\r\n-    \r\n+\r\n         try {\r\n             const files = e.target.files;\r\n             if (!files || files.length === 0) return; // Exit if no files are selected\r\n-    \r\n+\r\n             setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n-    \r\n+\r\n             const uploadedNewBeforeImages = [];\r\n-    \r\n+\r\n             for (let i = 0; i < files.length; i++) {\r\n                 const formData = new FormData();\r\n                 formData.append(\"document\", files[i]);\r\n-    \r\n+\r\n                 console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n-    \r\n+\r\n                 const response = await axios.post(\r\n                     \"https://cosmetic.theappkit.com/api/system/upload\",\r\n                     formData,\r\n                     {\r\n@@ -439,47 +439,47 @@\n                             \"Content-Type\": \"multipart/form-data\",\r\n                         },\r\n                     }\r\n                 );\r\n-    \r\n+\r\n                 const imagePath = response?.data?.data?.path;\r\n                 if (imagePath) {\r\n                     const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n                     uploadedNewBeforeImages.push(fullImageUrl);\r\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n-    \r\n+\r\n             setBeforeImages(uploadedNewBeforeImages); // Update state with uploaded image URLs\r\n             console.log(\"All Uploaded Images:\", uploadedNewBeforeImages);\r\n         } catch (error) {\r\n             console.error(\"Error uploading files:\", error);\r\n         } finally {\r\n             setImageLoaderBefore(false);\r\n         }\r\n     };\r\n-    \r\n+\r\n     const handleRemoveImage2 = (index) => {\r\n         setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n     const handleFileChange4 = async (e) => {\r\n-        setAfterImages([]); \r\n+        setAfterImages([]);\r\n         setImageLoaderAfter(true);\r\n-    \r\n+\r\n         try {\r\n             const files = e.target.files;\r\n             if (!files || files.length === 0) return; // Exit if no files are selected\r\n-    \r\n+\r\n             setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n-    \r\n+\r\n             const uploadedNewAfterImages = [];\r\n-    \r\n+\r\n             for (let i = 0; i < files.length; i++) {\r\n                 const formData = new FormData();\r\n                 formData.append(\"document\", files[i]);\r\n-    \r\n+\r\n                 console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n-    \r\n+\r\n                 const response = await axios.post(\r\n                     \"https://cosmetic.theappkit.com/api/system/upload\",\r\n                     formData,\r\n                     {\r\n@@ -487,26 +487,26 @@\n                             \"Content-Type\": \"multipart/form-data\",\r\n                         },\r\n                     }\r\n                 );\r\n-    \r\n+\r\n                 const imagePath = response?.data?.data?.path;\r\n                 if (imagePath) {\r\n                     const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n                     uploadedNewAfterImages.push(fullImageUrl);\r\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n-    \r\n+\r\n             setAfterImages(uploadedNewAfterImages); // Update state with uploaded image URLs\r\n             console.log(\"All Uploaded Images:\", uploadedNewAfterImages);\r\n         } catch (error) {\r\n             console.error(\"Error uploading files:\", error);\r\n         } finally {\r\n             setImageLoaderAfter(false);\r\n         }\r\n     };\r\n-    \r\n+\r\n     const handleRemoveImage3 = (index) => {\r\n         setAfterImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n     };\r\n     useEffect(() => {\r\n@@ -1329,17 +1329,17 @@\n                         </LocalizationProvider>\r\n \r\n \r\n \r\n-                       <Grid container p={2}>\r\n-                        <Button\r\n-                            variant=\"contained\"\r\n-                            color=\"primary\"\r\n-                            onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n-                            sx={{ mt: 2, textTransform: 'capitalize' }}\r\n-                        >\r\n-                            Add More\r\n-                        </Button>\r\n+                        <Grid container p={2}>\r\n+                            <Button\r\n+                                variant=\"contained\"\r\n+                                color=\"primary\"\r\n+                                onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n+                                sx={{ mt: 2, textTransform: 'capitalize' }}\r\n+                            >\r\n+                                Add More\r\n+                            </Button>\r\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n@@ -1752,79 +1752,79 @@\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n                         <Typography variant=\"h6\" sx={{ mt: 4 }}>Further Records</Typography>\r\n \r\n-<LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-  {furtherFields.map((item, index) => (\r\n-    <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n-      {/* Date Selection */}\r\n-      <Grid item xs={6}>\r\n-        <Box>\r\n-          <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1.5 }}>\r\n-            Further Date :*\r\n-          </InputLabel>\r\n-          <Controller\r\n-            name={`furtherFields.${index}.date`}\r\n-            control={control}\r\n-            rules={{ required: \"Please select a date\" }}\r\n-            render={({ field }) => (\r\n-              <DatePicker\r\n-                {...field}\r\n-                value={field.value || null}\r\n-                onChange={(newValue) => field.onChange(newValue)}\r\n-                slotProps={{\r\n-                  textField: { size: \"small\", fullWidth: true },\r\n-                }}\r\n-              />\r\n-            )}\r\n-          />\r\n-          {errors.furtherFields?.[index]?.date && (\r\n-            <Typography color=\"error\">\r\n-              {errors.furtherFields[index].date.message}\r\n-            </Typography>\r\n-          )}\r\n-        </Box>\r\n-      </Grid>\r\n+                        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n+                            {furtherFields.map((item, index) => (\r\n+                                <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+                                    {/* Date Selection */}\r\n+                                    <Grid item xs={6}>\r\n+                                        <Box>\r\n+                                            <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1.5 }}>\r\n+                                                Further Date :*\r\n+                                            </InputLabel>\r\n+                                            <Controller\r\n+                                                name={`furtherFields.${index}.date`}\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: { size: \"small\", fullWidth: true },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.furtherFields?.[index]?.date && (\r\n+                                                <Typography color=\"error\">\r\n+                                                    {errors.furtherFields[index].date.message}\r\n+                                                </Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n \r\n-      {/* Signature Field */}\r\n-      <Grid item xs={6}>\r\n-        <Box>\r\n-          <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1 }}>\r\n-            Signature :*\r\n-          </InputLabel>\r\n-          <SignatureCanvas\r\n-            ref={(el) => (signCanvasRefs.current[index] = el)}\r\n-            penColor=\"black\"\r\n-            canvasProps={{ width: 300, height: 100, style: { border: \"1px solid #e0e0e0\" } }}\r\n-          />\r\n-          <Button\r\n-            size=\"small\"\r\n-            variant=\"outlined\"\r\n-            color=\"error\"\r\n-            onClick={() => clearSignature(index)}\r\n-            sx={{ mt: 1 }}\r\n-          >\r\n-            Clear\r\n-          </Button>\r\n-        </Box>\r\n-      </Grid>\r\n+                                    {/* Signature Field */}\r\n+                                    <Grid item xs={6}>\r\n+                                        <Box>\r\n+                                            <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1 }}>\r\n+                                                Signature :*\r\n+                                            </InputLabel>\r\n+                                            <SignatureCanvas\r\n+                                                ref={(el) => (signCanvasRefs.current[index] = el)}\r\n+                                                penColor=\"black\"\r\n+                                                canvasProps={{ width: 300, height: 100, style: { border: \"1px solid #e0e0e0\" } }}\r\n+                                            />\r\n+                                            <Button\r\n+                                                size=\"small\"\r\n+                                                variant=\"outlined\"\r\n+                                                color=\"error\"\r\n+                                                onClick={() => clearSignature(index)}\r\n+                                                sx={{ mt: 1 }}\r\n+                                            >\r\n+                                                Clear\r\n+                                            </Button>\r\n+                                        </Box>\r\n+                                    </Grid>\r\n \r\n-      {/* Remove Button */}\r\n-      <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n-        {index > 0 && (\r\n-          <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n-            <DeleteIcon />\r\n-          </IconButton>\r\n-        )}\r\n-      </Grid>\r\n-    </Grid>\r\n-  ))}\r\n-</LocalizationProvider>\r\n+                                    {/* Remove Button */}\r\n+                                    <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n+                                        {index > 0 && (\r\n+                                            <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n+                                                <DeleteIcon />\r\n+                                            </IconButton>\r\n+                                        )}\r\n+                                    </Grid>\r\n+                                </Grid>\r\n+                            ))}\r\n+                        </LocalizationProvider>\r\n \r\n-{/* Add More Button for FurtherFields */}\r\n-<Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n-  Add More Further Records\r\n-</Button>\r\n+                        {/* Add More Button for FurtherFields */}\r\n+                        <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n+                            Add More Further Records\r\n+                        </Button>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743252779945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1793,9 +1793,9 @@\n                                             </InputLabel>\r\n                                             <SignatureCanvas\r\n                                                 ref={(el) => (signCanvasRefs.current[index] = el)}\r\n                                                 penColor=\"black\"\r\n-                                                canvasProps={{ width: 300, height: 100, style: { border: \"1px solid #e0e0e0\" } }}\r\n+                                                canvasProps={{ width: 300, height: 100, style: { border: \"1px dashed #e0e0e0\" } }}\r\n                                             />\r\n                                             <Button\r\n                                                 size=\"small\"\r\n                                                 variant=\"outlined\"\r\n"
                },
                {
                    "date": 1743252791610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1793,9 +1793,9 @@\n                                             </InputLabel>\r\n                                             <SignatureCanvas\r\n                                                 ref={(el) => (signCanvasRefs.current[index] = el)}\r\n                                                 penColor=\"black\"\r\n-                                                canvasProps={{ width: 300, height: 100, style: { border: \"1px dashed #e0e0e0\" } }}\r\n+                                                canvasProps={{ width: 300, height: 100, style: { border: \"1px dashed black\" } }}\r\n                                             />\r\n                                             <Button\r\n                                                 size=\"small\"\r\n                                                 variant=\"outlined\"\r\n"
                },
                {
                    "date": 1743252799582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1793,9 +1793,9 @@\n                                             </InputLabel>\r\n                                             <SignatureCanvas\r\n                                                 ref={(el) => (signCanvasRefs.current[index] = el)}\r\n                                                 penColor=\"black\"\r\n-                                                canvasProps={{ width: 300, height: 100, style: { border: \"1px dashed black\" } }}\r\n+                                                canvasProps={{ width: 300, height: 300, style: { border: \"1px dashed black\" } }}\r\n                                             />\r\n                                             <Button\r\n                                                 size=\"small\"\r\n                                                 variant=\"outlined\"\r\n"
                },
                {
                    "date": 1743252861369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1793,9 +1793,9 @@\n                                             </InputLabel>\r\n                                             <SignatureCanvas\r\n                                                 ref={(el) => (signCanvasRefs.current[index] = el)}\r\n                                                 penColor=\"black\"\r\n-                                                canvasProps={{ width: 300, height: 300, style: { border: \"1px dashed black\" } }}\r\n+                                                canvasProps={{ width: 300, height: 150, style: { border: \"1px dashed black\" } }}\r\n                                             />\r\n                                             <Button\r\n                                                 size=\"small\"\r\n                                                 variant=\"outlined\"\r\n@@ -1805,10 +1805,23 @@\n                                             >\r\n                                                 Clear\r\n                                             </Button>\r\n                                         </Box>\r\n+                                        <Grid container spacing={1} mt={1}>\r\n+                                    <Grid item>\r\n+                                        <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)}>\r\n+                                            Clear Signature\r\n+                                        </Button>\r\n                                     </Grid>\r\n+                                    <Grid item>\r\n+                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n+                                            Save Signature\r\n+                                        </Button>\r\n+                                    </Grid>\r\n \r\n+                                </Grid>\r\n+                                    </Grid>\r\n+\r\n                                     {/* Remove Button */}\r\n                                     <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n                                         {index > 0 && (\r\n                                             <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n"
                },
                {
                    "date": 1743252866802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1795,17 +1795,9 @@\n                                                 ref={(el) => (signCanvasRefs.current[index] = el)}\r\n                                                 penColor=\"black\"\r\n                                                 canvasProps={{ width: 300, height: 150, style: { border: \"1px dashed black\" } }}\r\n                                             />\r\n-                                            <Button\r\n-                                                size=\"small\"\r\n-                                                variant=\"outlined\"\r\n-                                                color=\"error\"\r\n-                                                onClick={() => clearSignature(index)}\r\n-                                                sx={{ mt: 1 }}\r\n-                                            >\r\n-                                                Clear\r\n-                                            </Button>\r\n+                                           \r\n                                         </Box>\r\n                                         <Grid container spacing={1} mt={1}>\r\n                                     <Grid item>\r\n                                         <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)}>\r\n"
                },
                {
                    "date": 1743252923169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1754,9 +1754,9 @@\n                         <Typography variant=\"h6\" sx={{ mt: 4 }}>Further Records</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {furtherFields.map((item, index) => (\r\n-                                <Grid container spacing={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n                                     {/* Date Selection */}\r\n                                     <Grid item xs={6}>\r\n                                         <Box>\r\n                                             <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1.5 }}>\r\n@@ -1795,23 +1795,23 @@\n                                                 ref={(el) => (signCanvasRefs.current[index] = el)}\r\n                                                 penColor=\"black\"\r\n                                                 canvasProps={{ width: 300, height: 150, style: { border: \"1px dashed black\" } }}\r\n                                             />\r\n-                                           \r\n+\r\n                                         </Box>\r\n                                         <Grid container spacing={1} mt={1}>\r\n-                                    <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)}>\r\n-                                            Clear Signature\r\n-                                        </Button>\r\n-                                    </Grid>\r\n-                                    <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n-                                            Save Signature\r\n-                                        </Button>\r\n-                                    </Grid>\r\n+                                            <Grid item>\r\n+                                                <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)}>\r\n+                                                    Clear Signature\r\n+                                                </Button>\r\n+                                            </Grid>\r\n+                                            <Grid item>\r\n+                                                <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n+                                                    Save Signature\r\n+                                                </Button>\r\n+                                            </Grid>\r\n \r\n-                                </Grid>\r\n+                                        </Grid>\r\n                                     </Grid>\r\n \r\n                                     {/* Remove Button */}\r\n                                     <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n"
                },
                {
                    "date": 1743252930156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1750,9 +1750,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Typography variant=\"h6\" sx={{ mt: 4 }}>Further Records</Typography>\r\n+                        <Typography variant=\"h6\" sx={{ mt: 4 ,fontWeight:'bold'}}>Further Records</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {furtherFields.map((item, index) => (\r\n                                 <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n"
                },
                {
                    "date": 1743252985344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1750,9 +1750,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Typography variant=\"h6\" sx={{ mt: 4 ,fontWeight:'bold'}}>Further Records</Typography>\r\n+                        <Typography variant=\"h6\" p={2} sx={{ mt: 4 ,fontWeight:'bold'}}>Further Records</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {furtherFields.map((item, index) => (\r\n                                 <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n@@ -1771,9 +1771,20 @@\n                                                         {...field}\r\n                                                         value={field.value || null}\r\n                                                         onChange={(newValue) => field.onChange(newValue)}\r\n                                                         slotProps={{\r\n-                                                            textField: { size: \"small\", fullWidth: true },\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: \"12px\",\r\n+                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n+                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n                                                         }}\r\n                                                     />\r\n                                                 )}\r\n                                             />\r\n"
                },
                {
                    "date": 1743253115108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,15 @@\n             signCanvasRefs.current[index].clear();\r\n             setValue(`furtherFields.${index}.sign`, \"\");\r\n         }\r\n     };\r\n+     // Function to update signature in the form state\r\n+  const updateSignature = (index) => {\r\n+    if (signCanvasRefs.current[index]) {\r\n+      const signData = signCanvasRefs.current[index].toDataURL();\r\n+      setValue(`furtherFields.${index}.sign`, signData);\r\n+    }\r\n+  };\r\n     const [title, setTitle] = useState(null)\r\n \r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n"
                },
                {
                    "date": 1743253126604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1822,9 +1822,9 @@\n                                                     Clear Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n                                             <Grid item>\r\n-                                                <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n+                                                <Button variant=\"contained\" color=\"primary\" onClick={updateSignature}>\r\n                                                     Save Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n \r\n"
                },
                {
                    "date": 1743253147204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1822,9 +1822,9 @@\n                                                     Clear Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n                                             <Grid item>\r\n-                                                <Button variant=\"contained\" color=\"primary\" onClick={updateSignature}>\r\n+                                                <Button variant=\"contained\" color=\"primary\" onClick={()=> updateSignature(index)}>\r\n                                                     Save Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n \r\n"
                },
                {
                    "date": 1743253189241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,13 +50,38 @@\n             setValue(`furtherFields.${index}.sign`, \"\");\r\n         }\r\n     };\r\n      // Function to update signature in the form state\r\n-  const updateSignature = (index) => {\r\n+  const updateSignature =async (index) => {\r\n     if (signCanvasRefs.current[index]) {\r\n       const signData = signCanvasRefs.current[index].toDataURL();\r\n       setValue(`furtherFields.${index}.sign`, signData);\r\n+      try {\r\n+        const file = dataURL;\r\n+        if (file) {\r\n+            setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+        }\r\n+\r\n+        let obj = {\r\n+            document: dataURL,\r\n+            filename: moment().unix() + \"_Sign.png\"\r\n+        }\r\n+\r\n+        const response = await axios.post(\r\n+            'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n+            obj\r\n+        );\r\n+\r\n+        console.log(response?.data?.data?.path);\r\n+\r\n+        setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+\r\n+\r\n+    } catch (error) {\r\n+        console.log(error);\r\n+\r\n     }\r\n+    }\r\n   };\r\n     const [title, setTitle] = useState(null)\r\n \r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n"
                },
                {
                    "date": 1743253197986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,12 +52,12 @@\n     };\r\n      // Function to update signature in the form state\r\n   const updateSignature =async (index) => {\r\n     if (signCanvasRefs.current[index]) {\r\n-      const signData = signCanvasRefs.current[index].toDataURL();\r\n+      const signData =await signCanvasRefs.current[index].toDataURL();\r\n       setValue(`furtherFields.${index}.sign`, signData);\r\n       try {\r\n-        const file = dataURL;\r\n+        const file = signData;\r\n         if (file) {\r\n             setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n         }\r\n \r\n"
                },
                {
                    "date": 1743253219600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n             setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n         }\r\n \r\n         let obj = {\r\n-            document: dataURL,\r\n+            document: signData,\r\n             filename: moment().unix() + \"_Sign.png\"\r\n         }\r\n \r\n         const response = await axios.post(\r\n@@ -73,8 +73,9 @@\n \r\n         console.log(response?.data?.data?.path);\r\n \r\n         setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+        setValue(`furtherFields.${index}.sign`, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n \r\n \r\n     } catch (error) {\r\n         console.log(error);\r\n"
                },
                {
                    "date": 1743253238835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,9 @@\n     const { fields, append, remove } = useFieldArray({\r\n         control,\r\n         name: \"records\",\r\n     });\r\n+console.log(watch());\r\n \r\n     const signCanvasRefs = useRef([]);\r\n \r\n     // Clear Signature Function\r\n@@ -72,9 +73,9 @@\n         );\r\n \r\n         console.log(response?.data?.data?.path);\r\n \r\n-        setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+      \r\n         setValue(`furtherFields.${index}.sign`, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n \r\n \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1743253327529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1859,9 +1859,9 @@\n                                     </Grid>\r\n \r\n                                     {/* Remove Button */}\r\n                                     <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n-                                        {index > 0 && (\r\n+                                        {furtherFields.length > 1  && (\r\n                                             <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n                                         )}\r\n"
                },
                {
                    "date": 1743253346380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1858,9 +1858,9 @@\n                                         </Grid>\r\n                                     </Grid>\r\n \r\n                                     {/* Remove Button */}\r\n-                                    <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n+                                    <Grid item xs={1} display=\"flex\" justifyContent=\"flex-end\">\r\n                                         {furtherFields.length > 1  && (\r\n                                             <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n"
                },
                {
                    "date": 1743253352231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1858,9 +1858,9 @@\n                                         </Grid>\r\n                                     </Grid>\r\n \r\n                                     {/* Remove Button */}\r\n-                                    <Grid item xs={1} display=\"flex\" justifyContent=\"flex-end\">\r\n+                                    <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n                                         {furtherFields.length > 1  && (\r\n                                             <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n"
                },
                {
                    "date": 1743253377715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1790,9 +1790,9 @@\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {furtherFields.map((item, index) => (\r\n                                 <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n                                     {/* Date Selection */}\r\n-                                    <Grid item xs={6}>\r\n+                                    <Grid item xs={5}>\r\n                                         <Box>\r\n                                             <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1.5 }}>\r\n                                                 Further Date :*\r\n                                             </InputLabel>\r\n@@ -1830,9 +1830,9 @@\n                                         </Box>\r\n                                     </Grid>\r\n \r\n                                     {/* Signature Field */}\r\n-                                    <Grid item xs={6}>\r\n+                                    <Grid item xs={5}>\r\n                                         <Box>\r\n                                             <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1 }}>\r\n                                                 Signature :*\r\n                                             </InputLabel>\r\n@@ -1858,9 +1858,9 @@\n                                         </Grid>\r\n                                     </Grid>\r\n \r\n                                     {/* Remove Button */}\r\n-                                    <Grid item xs={12} display=\"flex\" justifyContent=\"flex-end\">\r\n+                                    <Grid item xs={1} display=\"flex\" justifyContent=\"flex-end\">\r\n                                         {furtherFields.length > 1  && (\r\n                                             <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n"
                },
                {
                    "date": 1743253402785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1869,12 +1869,13 @@\n                                 </Grid>\r\n                             ))}\r\n                         </LocalizationProvider>\r\n \r\n-                        {/* Add More Button for FurtherFields */}\r\n+                     <Grid>\r\n                         <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n                             Add More Further Records\r\n                         </Button>\r\n+                        </Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743253427817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1827,8 +1827,9 @@\n                                                     {errors.furtherFields[index].date.message}\r\n                                                 </Typography>\r\n                                             )}\r\n                                         </Box>\r\n+                                        I confirm there has not been any changes to my medical history or my health since completing this form , it is still true and up to date.\r\n                                     </Grid>\r\n \r\n                                     {/* Signature Field */}\r\n                                     <Grid item xs={5}>\r\n@@ -1869,9 +1870,9 @@\n                                 </Grid>\r\n                             ))}\r\n                         </LocalizationProvider>\r\n \r\n-                     <Grid>\r\n+                     <Grid p={2}>\r\n                         <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n                             Add More Further Records\r\n                         </Button>\r\n                         </Grid>\r\n"
                },
                {
                    "date": 1743253442712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1827,9 +1827,11 @@\n                                                     {errors.furtherFields[index].date.message}\r\n                                                 </Typography>\r\n                                             )}\r\n                                         </Box>\r\n+                                        <Typography mt={2}>\r\n                                         I confirm there has not been any changes to my medical history or my health since completing this form , it is still true and up to date.\r\n+                                        </Typography>\r\n                                     </Grid>\r\n \r\n                                     {/* Signature Field */}\r\n                                     <Grid item xs={5}>\r\n"
                },
                {
                    "date": 1743253487145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1877,8 +1877,22 @@\n                         <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n                             Add More Further Records\r\n                         </Button>\r\n                         </Grid>\r\n+\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n+                            label={\"Notes :\"}\r\n+                            multiline\r\n+                            rows={3}\r\n+                            size={'small'}\r\n+                            placeholder={\"Notes\"}\r\n+                            error={errors?.extranotes?.message}\r\n+                            register={register(\"notes\", {\r\n+                                required:\r\n+                                    false\r\n+\r\n+                            })}\r\n+                        /></Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                     </Box>\r\n"
                },
                {
                    "date": 1743253493446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1878,16 +1878,16 @@\n                             Add More Further Records\r\n                         </Button>\r\n                         </Grid>\r\n \r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={6} mt={2}><InputField\r\n                             label={\"Notes :\"}\r\n                             multiline\r\n                             rows={3}\r\n                             size={'small'}\r\n                             placeholder={\"Notes\"}\r\n                             error={errors?.extranotes?.message}\r\n-                            register={register(\"notes\", {\r\n+                            register={register(\"extranotes\", {\r\n                                 required:\r\n                                     false\r\n \r\n                             })}\r\n"
                },
                {
                    "date": 1743253512002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1877,9 +1877,11 @@\n                         <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n                             Add More Further Records\r\n                         </Button>\r\n                         </Grid>\r\n-\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n                         <Grid item xs={6} mt={2}><InputField\r\n                             label={\"Notes :\"}\r\n                             multiline\r\n                             rows={3}\r\n"
                },
                {
                    "date": 1743254385498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -614,9 +614,9 @@\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n \r\n \r\n \r\n-                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateConsentForm)} >\r\n+                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateForm)} >\r\n                     <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n                         Create New Patient\r\n                     </Typography>\r\n \r\n"
                },
                {
                    "date": 1743254405867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,11 +248,12 @@\n     const CreateConsentForm = async () => {\r\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n-                title: title?.id,\r\n-                first_name: getValues('fname'),\r\n-                last_name: getValues('lname'),\r\n+                \r\n+                aftercare_document:selectedDocument?._id,\r\n+                treatment_date: getValues('treatmentDate'),\r\n+                consultation_date: getValues('consulationDate'),\r\n                 dob: getValues('selectedDate'),\r\n                 address: getValues('address'),\r\n                 email: getValues('email'),\r\n                 post_code: getValues('post'),\r\n@@ -270,8 +271,23 @@\n                     address: getValues('genaddress'),\r\n                     email: getValues('genemail'),\r\n                     phone: getValues('genphone'),\r\n                 },\r\n+                treatment_plan: {\r\n+                    patient_concerns: getValues('concerns'),\r\n+                    patient_goals: getValues('goal'),\r\n+                    advised_plan: getValues('advise'),\r\n+                    expected_result: getValues('result'),\r\n+                    date: getValues('patientDate'),\r\n+                    patient_sign: patientSign\r\n+                  },\r\n+                  batch_images: uploadedImages,\r\n+                  before_images: uploadedBeforeImages,\r\n+                  after_images: uploadedAfterImages,\r\n+                  further_treatment: furtherFields,\r\n+                  treatment_record: fields,\r\n+                  extra_notes: getValues('extranotes')\r\n+            \r\n \r\n             };\r\n \r\n             const promise = ApiServices.CreateConsentForm(obj);\r\n@@ -614,9 +630,9 @@\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n \r\n \r\n \r\n-                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateForm)} >\r\n+                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateConsentForm)} >\r\n                     <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n                         Create New Patient\r\n                     </Typography>\r\n \r\n"
                },
                {
                    "date": 1743254439849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -277,9 +277,9 @@\n                     patient_goals: getValues('goal'),\r\n                     advised_plan: getValues('advise'),\r\n                     expected_result: getValues('result'),\r\n                     date: getValues('patientDate'),\r\n-                    patient_sign: patientSign\r\n+                    patient_sign: signature\r\n                   },\r\n                   batch_images: uploadedImages,\r\n                   before_images: uploadedBeforeImages,\r\n                   after_images: uploadedAfterImages,\r\n"
                },
                {
                    "date": 1743254459448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,9 +280,9 @@\n                     date: getValues('patientDate'),\r\n                     patient_sign: signature\r\n                   },\r\n                   batch_images: uploadedImages,\r\n-                  before_images: uploadedBeforeImages,\r\n+                  before_images: beforeImages,\r\n                   after_images: uploadedAfterImages,\r\n                   further_treatment: furtherFields,\r\n                   treatment_record: fields,\r\n                   extra_notes: getValues('extranotes')\r\n"
                },
                {
                    "date": 1743254465795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -281,9 +281,9 @@\n                     patient_sign: signature\r\n                   },\r\n                   batch_images: uploadedImages,\r\n                   before_images: beforeImages,\r\n-                  after_images: uploadedAfterImages,\r\n+                  after_images: afterImages,\r\n                   further_treatment: furtherFields,\r\n                   treatment_record: fields,\r\n                   extra_notes: getValues('extranotes')\r\n             \r\n"
                },
                {
                    "date": 1743254490973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -251,9 +251,9 @@\n             let obj = {\r\n                 \r\n                 aftercare_document:selectedDocument?._id,\r\n                 treatment_date: getValues('treatmentDate'),\r\n-                consultation_date: getValues('consulationDate'),\r\n+                consultation_date: getValues('consultationDate'),\r\n                 dob: getValues('selectedDate'),\r\n                 address: getValues('address'),\r\n                 email: getValues('email'),\r\n                 post_code: getValues('post'),\r\n"
                },
                {
                    "date": 1743254537179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -272,12 +272,12 @@\n                     email: getValues('genemail'),\r\n                     phone: getValues('genphone'),\r\n                 },\r\n                 treatment_plan: {\r\n-                    patient_concerns: getValues('concerns'),\r\n-                    patient_goals: getValues('goal'),\r\n-                    advised_plan: getValues('advise'),\r\n-                    expected_result: getValues('result'),\r\n+                    patient_concerns: getValues('patientConcerns'),\r\n+                    patient_goals: getValues('patientGoal'),\r\n+                    advised_plan: getValues('advisedPlan'),\r\n+                    expected_result: getValues('expectedResult'),\r\n                     date: getValues('patientDate'),\r\n                     patient_sign: signature\r\n                   },\r\n                   batch_images: uploadedImages,\r\n"
                },
                {
                    "date": 1743254548754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,9 +289,9 @@\n             \r\n \r\n             };\r\n \r\n-            const promise = ApiServices.CreateConsentForm(obj);\r\n+            const promise = ApiServices.CreateForm(obj);\r\n \r\n             // Handle the API response properly\r\n             const response = await promise;\r\n             console.log(response);\r\n"
                },
                {
                    "date": 1743254749344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -622,9 +622,22 @@\n     useEffect(() => {\r\n         getPatients()\r\n         getDocuments()\r\n     }, [])\r\n+    useEffect(() => {\r\n+        // Disable drawing on the single canvas\r\n+        if (sigCanvas.current) {\r\n+            sigCanvas.current.off();\r\n+        }\r\n \r\n+        // Disable drawing on all multiple canvases\r\n+        signCanvasRefs.current.forEach((canvas) => {\r\n+            if (canvas) {\r\n+                canvas.off();\r\n+            }\r\n+        });\r\n+    }, []);\r\n+\r\n     return (\r\n         <div>\r\n \r\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n"
                },
                {
                    "date": 1743254769947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,9 @@\n             // Navigate if response is successful\r\n             if (response?.responseCode === 200) {\r\n                 console.log(response);\r\n                 setImageURL(null)\r\n-                navigate('/patients')\r\n+                navigate('/consent-forms')\r\n \r\n \r\n             }\r\n \r\n"
                },
                {
                    "date": 1743254993711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     const { fields, append, remove } = useFieldArray({\r\n         control,\r\n         name: \"records\",\r\n     });\r\n-console.log(watch());\r\n+    console.log(watch());\r\n \r\n     const signCanvasRefs = useRef([]);\r\n \r\n     // Clear Signature Function\r\n@@ -50,41 +50,41 @@\n             signCanvasRefs.current[index].clear();\r\n             setValue(`furtherFields.${index}.sign`, \"\");\r\n         }\r\n     };\r\n-     // Function to update signature in the form state\r\n-  const updateSignature =async (index) => {\r\n-    if (signCanvasRefs.current[index]) {\r\n-      const signData =await signCanvasRefs.current[index].toDataURL();\r\n-      setValue(`furtherFields.${index}.sign`, signData);\r\n-      try {\r\n-        const file = signData;\r\n-        if (file) {\r\n-            setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n-        }\r\n+    // Function to update signature in the form state\r\n+    const updateSignature = async (index) => {\r\n+        if (signCanvasRefs.current[index]) {\r\n+            const signData = await signCanvasRefs.current[index].toDataURL();\r\n+            setValue(`furtherFields.${index}.sign`, signData);\r\n+            try {\r\n+                const file = signData;\r\n+                if (file) {\r\n+                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+                }\r\n \r\n-        let obj = {\r\n-            document: signData,\r\n-            filename: moment().unix() + \"_Sign.png\"\r\n-        }\r\n+                let obj = {\r\n+                    document: signData,\r\n+                    filename: moment().unix() + \"_Sign.png\"\r\n+                }\r\n \r\n-        const response = await axios.post(\r\n-            'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n-            obj\r\n-        );\r\n+                const response = await axios.post(\r\n+                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n+                    obj\r\n+                );\r\n \r\n-        console.log(response?.data?.data?.path);\r\n+                console.log(response?.data?.data?.path);\r\n \r\n-      \r\n-        setValue(`furtherFields.${index}.sign`, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n \r\n+                setValue(`furtherFields.${index}.sign`, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n \r\n-    } catch (error) {\r\n-        console.log(error);\r\n \r\n-    }\r\n-    }\r\n-  };\r\n+            } catch (error) {\r\n+                console.log(error);\r\n+\r\n+            }\r\n+        }\r\n+    };\r\n     const [title, setTitle] = useState(null)\r\n \r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n@@ -248,10 +248,11 @@\n     const CreateConsentForm = async () => {\r\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n-                \r\n-                aftercare_document:selectedDocument?._id,\r\n+                patient_id: null,\r\n+                form_id: null,\r\n+                aftercare_document: selectedDocument?._id,\r\n                 treatment_date: getValues('treatmentDate'),\r\n                 consultation_date: getValues('consultationDate'),\r\n                 dob: getValues('selectedDate'),\r\n                 address: getValues('address'),\r\n@@ -278,17 +279,17 @@\n                     advised_plan: getValues('advisedPlan'),\r\n                     expected_result: getValues('expectedResult'),\r\n                     date: getValues('patientDate'),\r\n                     patient_sign: signature\r\n-                  },\r\n-                  batch_images: uploadedImages,\r\n-                  before_images: beforeImages,\r\n-                  after_images: afterImages,\r\n-                  further_treatment: furtherFields,\r\n-                  treatment_record: fields,\r\n-                  extra_notes: getValues('extranotes')\r\n-            \r\n+                },\r\n+                batch_images: uploadedImages,\r\n+                before_images: beforeImages,\r\n+                after_images: afterImages,\r\n+                further_treatment: furtherFields,\r\n+                treatment_record: fields,\r\n+                extra_notes: getValues('extranotes')\r\n \r\n+\r\n             };\r\n \r\n             const promise = ApiServices.CreateForm(obj);\r\n \r\n@@ -1813,9 +1814,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Typography variant=\"h6\" p={2} sx={{ mt: 4 ,fontWeight:'bold'}}>Further Records</Typography>\r\n+                        <Typography variant=\"h6\" p={2} sx={{ mt: 4, fontWeight: 'bold' }}>Further Records</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {furtherFields.map((item, index) => (\r\n                                 <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n@@ -1857,9 +1858,9 @@\n                                                 </Typography>\r\n                                             )}\r\n                                         </Box>\r\n                                         <Typography mt={2}>\r\n-                                        I confirm there has not been any changes to my medical history or my health since completing this form , it is still true and up to date.\r\n+                                            I confirm there has not been any changes to my medical history or my health since completing this form , it is still true and up to date.\r\n                                         </Typography>\r\n                                     </Grid>\r\n \r\n                                     {/* Signature Field */}\r\n@@ -1881,9 +1882,9 @@\n                                                     Clear Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n                                             <Grid item>\r\n-                                                <Button variant=\"contained\" color=\"primary\" onClick={()=> updateSignature(index)}>\r\n+                                                <Button variant=\"contained\" color=\"primary\" onClick={() => updateSignature(index)}>\r\n                                                     Save Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n \r\n@@ -1891,9 +1892,9 @@\n                                     </Grid>\r\n \r\n                                     {/* Remove Button */}\r\n                                     <Grid item xs={1} display=\"flex\" justifyContent=\"flex-end\">\r\n-                                        {furtherFields.length > 1  && (\r\n+                                        {furtherFields.length > 1 && (\r\n                                             <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n                                         )}\r\n@@ -1901,12 +1902,12 @@\n                                 </Grid>\r\n                             ))}\r\n                         </LocalizationProvider>\r\n \r\n-                     <Grid p={2}>\r\n-                        <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n-                            Add More Further Records\r\n-                        </Button>\r\n+                        <Grid p={2}>\r\n+                            <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n+                                Add More Further Records\r\n+                            </Button>\r\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n"
                },
                {
                    "date": 1743255012372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -248,9 +248,9 @@\n     const CreateConsentForm = async () => {\r\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n-                patient_id: null,\r\n+                patient_id: selectedPatient?.id,\r\n                 form_id: null,\r\n                 aftercare_document: selectedDocument?._id,\r\n                 treatment_date: getValues('treatmentDate'),\r\n                 consultation_date: getValues('consultationDate'),\r\n"
                },
                {
                    "date": 1743255134441,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -253,8 +253,10 @@\n                 form_id: null,\r\n                 aftercare_document: selectedDocument?._id,\r\n                 treatment_date: getValues('treatmentDate'),\r\n                 consultation_date: getValues('consultationDate'),\r\n+                first_name: getValues('fname'),\r\n+                last_name: getValues('lname'),\r\n                 dob: getValues('selectedDate'),\r\n                 address: getValues('address'),\r\n                 email: getValues('email'),\r\n                 post_code: getValues('post'),\r\n"
                },
                {
                    "date": 1743255171518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -287,9 +287,11 @@\n                 before_images: beforeImages,\r\n                 after_images: afterImages,\r\n                 further_treatment: furtherFields,\r\n                 treatment_record: fields,\r\n-                extra_notes: getValues('extranotes')\r\n+                extra_notes: getValues('extranotes'),\r\n+                permission_marketing: true,\r\n+                offers: false,\r\n \r\n \r\n             };\r\n \r\n"
                },
                {
                    "date": 1743255177297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -288,9 +288,9 @@\n                 after_images: afterImages,\r\n                 further_treatment: furtherFields,\r\n                 treatment_record: fields,\r\n                 extra_notes: getValues('extranotes'),\r\n-                permission_marketing: true,\r\n+                permission_marketing: permissions?.marketing,\r\n                 offers: false,\r\n \r\n \r\n             };\r\n"
                },
                {
                    "date": 1743255183950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,9 +289,9 @@\n                 further_treatment: furtherFields,\r\n                 treatment_record: fields,\r\n                 extra_notes: getValues('extranotes'),\r\n                 permission_marketing: permissions?.marketing,\r\n-                offers: false,\r\n+                offers: permissions?.offers,\r\n \r\n \r\n             };\r\n \r\n"
                },
                {
                    "date": 1743255216497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n     const { fields, append, remove } = useFieldArray({\r\n         control,\r\n         name: \"records\",\r\n     });\r\n-    console.log(watch());\r\n+ \r\n \r\n     const signCanvasRefs = useRef([]);\r\n \r\n     // Clear Signature Function\r\n"
                },
                {
                    "date": 1743255262412,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -835,8 +835,10 @@\n                                         options={patients}\r\n                                         selected={selectedPatient}\r\n                                         onSelect={(value) => {\r\n                                             setSelectedPatient(value)\r\n+                                            console.log(value);\r\n+                                            \r\n \r\n \r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n"
                },
                {
                    "date": 1743255291760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,10 @@\n     const { fields, append, remove } = useFieldArray({\r\n         control,\r\n         name: \"records\",\r\n     });\r\n- \r\n \r\n+\r\n     const signCanvasRefs = useRef([]);\r\n \r\n     // Clear Signature Function\r\n     const clearSignature = (index) => {\r\n@@ -613,9 +613,9 @@\n \r\n \r\n             setPatients(\r\n                 data?.data?.patients?.map((doc) => ({\r\n-\r\n+                    ...doc,\r\n                     id: doc?._id, // Example transformation\r\n                     name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n                 }))\r\n             );\r\n@@ -836,11 +836,11 @@\n                                         selected={selectedPatient}\r\n                                         onSelect={(value) => {\r\n                                             setSelectedPatient(value)\r\n                                             console.log(value);\r\n-                                            \r\n \r\n \r\n+\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255340459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -836,11 +836,11 @@\n                                         selected={selectedPatient}\r\n                                         onSelect={(value) => {\r\n                                             setSelectedPatient(value)\r\n                                             console.log(value);\r\n+                                            setValue('fname', value?.first_name)\r\n \r\n \r\n-\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255352596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -837,8 +837,9 @@\n                                         onSelect={(value) => {\r\n                                             setSelectedPatient(value)\r\n                                             console.log(value);\r\n                                             setValue('fname', value?.first_name)\r\n+                                            setValue('lname', value?.last_name)\r\n \r\n \r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n"
                },
                {
                    "date": 1743255366753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -838,10 +838,10 @@\n                                             setSelectedPatient(value)\r\n                                             console.log(value);\r\n                                             setValue('fname', value?.first_name)\r\n                                             setValue('lname', value?.last_name)\r\n+                                            setValue('email', value?.last_name)\r\n \r\n-\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255375312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -838,10 +838,10 @@\n                                             setSelectedPatient(value)\r\n                                             console.log(value);\r\n                                             setValue('fname', value?.first_name)\r\n                                             setValue('lname', value?.last_name)\r\n-                                            setValue('email', value?.last_name)\r\n-\r\n+                                            setValue('email', value?.email)\r\n+                                            setValue('postcode', value?.postcode)\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255392202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -840,8 +840,9 @@\n                                             setValue('fname', value?.first_name)\r\n                                             setValue('lname', value?.last_name)\r\n                                             setValue('email', value?.email)\r\n                                             setValue('postcode', value?.postcode)\r\n+                                            setValue('phone', value?.phone)\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255406059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -841,8 +841,9 @@\n                                             setValue('lname', value?.last_name)\r\n                                             setValue('email', value?.email)\r\n                                             setValue('postcode', value?.postcode)\r\n                                             setValue('phone', value?.phone)\r\n+                                            setValue('address', value?.address)\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255421462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -842,8 +842,9 @@\n                                             setValue('email', value?.email)\r\n                                             setValue('postcode', value?.postcode)\r\n                                             setValue('phone', value?.phone)\r\n                                             setValue('address', value?.address)\r\n+                                            setValue('notes', value?.notes)\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255437911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -843,8 +843,9 @@\n                                             setValue('postcode', value?.postcode)\r\n                                             setValue('phone', value?.phone)\r\n                                             setValue('address', value?.address)\r\n                                             setValue('notes', value?.notes)\r\n+                                            setValue('dob', value?.dob)\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255486797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -843,9 +843,9 @@\n                                             setValue('postcode', value?.postcode)\r\n                                             setValue('phone', value?.phone)\r\n                                             setValue('address', value?.address)\r\n                                             setValue('notes', value?.notes)\r\n-                                            setValue('dob', value?.dob)\r\n+                                            setValue('selectedDate', value?.dob)\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255559979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -843,9 +843,9 @@\n                                             setValue('postcode', value?.postcode)\r\n                                             setValue('phone', value?.phone)\r\n                                             setValue('address', value?.address)\r\n                                             setValue('notes', value?.notes)\r\n-                                            setValue('selectedDate', value?.dob)\r\n+                                            setValue('selectedDate', value?.dob ? new Date(value.dob) : null);\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255583409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -843,9 +843,9 @@\n                                             setValue('postcode', value?.postcode)\r\n                                             setValue('phone', value?.phone)\r\n                                             setValue('address', value?.address)\r\n                                             setValue('notes', value?.notes)\r\n-                                            setValue('selectedDate', value?.dob ? new Date(value.dob) : null);\r\n+                                            setValue('selectedDate', value?.dob)\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255644733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -843,9 +843,9 @@\n                                             setValue('postcode', value?.postcode)\r\n                                             setValue('phone', value?.phone)\r\n                                             setValue('address', value?.address)\r\n                                             setValue('notes', value?.notes)\r\n-                                            setValue('selectedDate', value?.dob)\r\n+                                            setValue(\"selectedDate\", new Date(value.dob));\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255715018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -843,9 +843,11 @@\n                                             setValue('postcode', value?.postcode)\r\n                                             setValue('phone', value?.phone)\r\n                                             setValue('address', value?.address)\r\n                                             setValue('notes', value?.notes)\r\n-                                            setValue(\"selectedDate\", new Date(value.dob));\r\n+                                            console.log(value?.dob);\r\n+                                            \r\n+                                            setValue(\"selectedDate\", new Date(value?.dob));\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255870128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -827,33 +827,56 @@\n                                 }}>\r\n \r\n                                     Select Patient :\r\n                                 </InputLabel>\r\n-                                    <SelectField\r\n-                                        size={'small'}\r\n-                                        newLabel={'Select Patient'}\r\n-                                        fullWidth={true}\r\n-                                        options={patients}\r\n-                                        selected={selectedPatient}\r\n-                                        onSelect={(value) => {\r\n-                                            setSelectedPatient(value)\r\n-                                            console.log(value);\r\n-                                            setValue('fname', value?.first_name)\r\n-                                            setValue('lname', value?.last_name)\r\n-                                            setValue('email', value?.email)\r\n-                                            setValue('postcode', value?.postcode)\r\n-                                            setValue('phone', value?.phone)\r\n-                                            setValue('address', value?.address)\r\n-                                            setValue('notes', value?.notes)\r\n-                                            console.log(value?.dob);\r\n-                                            \r\n-                                            setValue(\"selectedDate\", new Date(value?.dob));\r\n-                                        }}\r\n-                                        error={errors?.patient?.message}\r\n-                                        register={register(\"patient\", {\r\n-                                            required: false,\r\n-                                        })}\r\n-                                    /></>}\r\n+                                <SelectField\r\n+    size={'small'}\r\n+    newLabel={'Select Patient'}\r\n+    fullWidth={true}\r\n+    options={patients}\r\n+    selected={selectedPatient}\r\n+    onSelect={(value) => {\r\n+        setSelectedPatient(value);\r\n+        console.log(\"Selected Patient:\", value);\r\n+\r\n+        setValue('fname', value?.first_name || \"\");\r\n+        setValue('lname', value?.last_name || \"\");\r\n+        setValue('email', value?.email || \"\");\r\n+        setValue('postcode', value?.postcode || \"\");\r\n+        setValue('phone', value?.phone || \"\");\r\n+        setValue('address', value?.address || \"\");\r\n+        setValue('notes', value?.notes || \"\");\r\n+\r\n+        console.log(\"Raw DOB:\", value?.dob);\r\n+\r\n+        if (value?.dob) {\r\n+            let parsedDate;\r\n+            \r\n+            // If dob is already a Date object, use it\r\n+            if (value.dob instanceof Date) {\r\n+                parsedDate = value.dob;\r\n+            } \r\n+            // If dob is a string, attempt to parse it correctly\r\n+            else if (typeof value.dob === \"string\") {\r\n+                parsedDate = new Date(value.dob);\r\n+                \r\n+                // Check if the conversion is valid\r\n+                if (isNaN(parsedDate.getTime())) {\r\n+                    console.error(\"Invalid DOB Format:\", value.dob);\r\n+                    return;\r\n+                }\r\n+            }\r\n+\r\n+            console.log(\"Parsed Date:\", parsedDate);\r\n+            setValue(\"selectedDate\", parsedDate);\r\n+        }\r\n+    }}\r\n+    error={errors?.patient?.message}\r\n+    register={register(\"patient\", {\r\n+        required: false,\r\n+    })}\r\n+/>\r\n+</>}\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n                                 {patientType == 'existing' && <><InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n"
                },
                {
                    "date": 1743255884086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -827,56 +827,56 @@\n                                 }}>\r\n \r\n                                     Select Patient :\r\n                                 </InputLabel>\r\n-                                <SelectField\r\n-    size={'small'}\r\n-    newLabel={'Select Patient'}\r\n-    fullWidth={true}\r\n-    options={patients}\r\n-    selected={selectedPatient}\r\n-    onSelect={(value) => {\r\n-        setSelectedPatient(value);\r\n-        console.log(\"Selected Patient:\", value);\r\n+                                    <SelectField\r\n+                                        size={'small'}\r\n+                                        newLabel={'Select Patient'}\r\n+                                        fullWidth={true}\r\n+                                        options={patients}\r\n+                                        selected={selectedPatient}\r\n+                                        onSelect={(value) => {\r\n+                                            setSelectedPatient(value);\r\n+                                            console.log(\"Selected Patient:\", value);\r\n \r\n-        setValue('fname', value?.first_name || \"\");\r\n-        setValue('lname', value?.last_name || \"\");\r\n-        setValue('email', value?.email || \"\");\r\n-        setValue('postcode', value?.postcode || \"\");\r\n-        setValue('phone', value?.phone || \"\");\r\n-        setValue('address', value?.address || \"\");\r\n-        setValue('notes', value?.notes || \"\");\r\n+                                            setValue('fname', value?.first_name || \"\");\r\n+                                            setValue('lname', value?.last_name || \"\");\r\n+                                            setValue('email', value?.email || \"\");\r\n+                                            setValue('postcode', value?.postcode || \"\");\r\n+                                            setValue('phone', value?.phone || \"\");\r\n+                                            setValue('address', value?.address || \"\");\r\n+                                            setValue('notes', value?.notes || \"\");\r\n \r\n-        console.log(\"Raw DOB:\", value?.dob);\r\n+                                            console.log(\"Raw DOB:\", value?.dob);\r\n \r\n-        if (value?.dob) {\r\n-            let parsedDate;\r\n-            \r\n-            // If dob is already a Date object, use it\r\n-            if (value.dob instanceof Date) {\r\n-                parsedDate = value.dob;\r\n-            } \r\n-            // If dob is a string, attempt to parse it correctly\r\n-            else if (typeof value.dob === \"string\") {\r\n-                parsedDate = new Date(value.dob);\r\n-                \r\n-                // Check if the conversion is valid\r\n-                if (isNaN(parsedDate.getTime())) {\r\n-                    console.error(\"Invalid DOB Format:\", value.dob);\r\n-                    return;\r\n-                }\r\n-            }\r\n+                                            if (value?.dob) {\r\n+                                                let parsedDate;\r\n \r\n-            console.log(\"Parsed Date:\", parsedDate);\r\n-            setValue(\"selectedDate\", parsedDate);\r\n-        }\r\n-    }}\r\n-    error={errors?.patient?.message}\r\n-    register={register(\"patient\", {\r\n-        required: false,\r\n-    })}\r\n-/>\r\n-</>}\r\n+                                                // If dob is already a Date object, use it\r\n+                                                if (value.dob instanceof Date) {\r\n+                                                    parsedDate = value.dob;\r\n+                                                }\r\n+                                                // If dob is a string, attempt to parse it correctly\r\n+                                                else if (typeof value.dob === \"string\") {\r\n+                                                    parsedDate = new Date(value.dob);\r\n+\r\n+                                                    // Check if the conversion is valid\r\n+                                                    if (isNaN(parsedDate.getTime())) {\r\n+                                                        console.error(\"Invalid DOB Format:\", value.dob);\r\n+                                                        return;\r\n+                                                    }\r\n+                                                }\r\n+\r\n+                                                console.log(\"Parsed Date:\", parsedDate);\r\n+                                                setValue(\"selectedDate\", parsedDate);\r\n+                                            }\r\n+                                        }}\r\n+                                        error={errors?.patient?.message}\r\n+                                        register={register(\"patient\", {\r\n+                                            required: false,\r\n+                                        })}\r\n+                                    />\r\n+                                </>}\r\n                             </Grid>\r\n                             <Grid item xs={3} mt={2}>\r\n                                 {patientType == 'existing' && <><InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n"
                },
                {
                    "date": 1743255893677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -847,29 +847,9 @@\n                                             setValue('notes', value?.notes || \"\");\r\n \r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n \r\n-                                            if (value?.dob) {\r\n-                                                let parsedDate;\r\n-\r\n-                                                // If dob is already a Date object, use it\r\n-                                                if (value.dob instanceof Date) {\r\n-                                                    parsedDate = value.dob;\r\n-                                                }\r\n-                                                // If dob is a string, attempt to parse it correctly\r\n-                                                else if (typeof value.dob === \"string\") {\r\n-                                                    parsedDate = new Date(value.dob);\r\n-\r\n-                                                    // Check if the conversion is valid\r\n-                                                    if (isNaN(parsedDate.getTime())) {\r\n-                                                        console.error(\"Invalid DOB Format:\", value.dob);\r\n-                                                        return;\r\n-                                                    }\r\n-                                                }\r\n-\r\n-                                                console.log(\"Parsed Date:\", parsedDate);\r\n-                                                setValue(\"selectedDate\", parsedDate);\r\n-                                            }\r\n+                                            \r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743255924466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -846,8 +846,9 @@\n                                             setValue('address', value?.address || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n \r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n+console.log(New Date (value?.dob));\r\n \r\n                                             \r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n"
                },
                {
                    "date": 1743255930743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -846,11 +846,11 @@\n                                             setValue('address', value?.address || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n \r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n-console.log(New Date (value?.dob));\r\n+                                            console.log(new Date(value?.dob));\r\n \r\n-                                            \r\n+\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743256027245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -836,21 +836,32 @@\n                                         selected={selectedPatient}\r\n                                         onSelect={(value) => {\r\n                                             setSelectedPatient(value);\r\n                                             console.log(\"Selected Patient:\", value);\r\n-\r\n+                                    \r\n                                             setValue('fname', value?.first_name || \"\");\r\n                                             setValue('lname', value?.last_name || \"\");\r\n                                             setValue('email', value?.email || \"\");\r\n                                             setValue('postcode', value?.postcode || \"\");\r\n                                             setValue('phone', value?.phone || \"\");\r\n                                             setValue('address', value?.address || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n-\r\n+                                    \r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n-                                            console.log(new Date(value?.dob));\r\n-\r\n-\r\n+                                    \r\n+                                            if (value?.dob) {\r\n+                                                // Convert to Dayjs format\r\n+                                                const parsedDate = dayjs(value.dob);\r\n+                                    \r\n+                                                // Check if the conversion is valid\r\n+                                                if (!parsedDate.isValid()) {\r\n+                                                    console.error(\"Invalid DOB Format:\", value.dob);\r\n+                                                    return;\r\n+                                                }\r\n+                                    \r\n+                                                console.log(\"Parsed Date:\", parsedDate);\r\n+                                                setValue(\"selectedDate\", parsedDate);\r\n+                                            }\r\n                                         }}\r\n                                         error={errors?.patient?.message}\r\n                                         register={register(\"patient\", {\r\n                                             required: false,\r\n"
                },
                {
                    "date": 1743280035394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n import moment from \"moment\";\r\n import DeleteIcon from \"@mui/icons-material/Delete\";\r\n import UploadFileIcon from '@mui/icons-material/UploadFile';\r\n import CloseIcon from '@mui/icons-material/Close';\r\n+import dayjs from \"dayjs\";\r\n \r\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n@@ -840,9 +841,9 @@\n                                     \r\n                                             setValue('fname', value?.first_name || \"\");\r\n                                             setValue('lname', value?.last_name || \"\");\r\n                                             setValue('email', value?.email || \"\");\r\n-                                            setValue('postcode', value?.postcode || \"\");\r\n+                                            setValue('post', value?.postcode || \"\");\r\n                                             setValue('phone', value?.phone || \"\");\r\n                                             setValue('address', value?.address || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n                                     \r\n"
                },
                {
                    "date": 1743280052340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -841,9 +841,9 @@\n                                     \r\n                                             setValue('fname', value?.first_name || \"\");\r\n                                             setValue('lname', value?.last_name || \"\");\r\n                                             setValue('email', value?.email || \"\");\r\n-                                            setValue('post', value?.postcode || \"\");\r\n+                                            setValue('post', value?.post_code || \"\");\r\n                                             setValue('phone', value?.phone || \"\");\r\n                                             setValue('address', value?.address || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n                                     \r\n"
                },
                {
                    "date": 1743280068833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -845,8 +845,11 @@\n                                             setValue('post', value?.post_code || \"\");\r\n                                             setValue('phone', value?.phone || \"\");\r\n                                             setValue('address', value?.address || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n+                                            setValue('notes', value?.notes || \"\");\r\n+                                            setValue('notes', value?.notes || \"\");\r\n+                                            setValue('notes', value?.notes || \"\");\r\n                                     \r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n                                     \r\n                                             if (value?.dob) {\r\n"
                },
                {
                    "date": 1743280083016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -845,11 +845,11 @@\n                                             setValue('post', value?.post_code || \"\");\r\n                                             setValue('phone', value?.phone || \"\");\r\n                                             setValue('address', value?.address || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n+                                            setValue('name', value?.kin_details?.name || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n-                                            setValue('notes', value?.notes || \"\");\r\n                                     \r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n                                     \r\n                                             if (value?.dob) {\r\n"
                },
                {
                    "date": 1743280121125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -846,11 +846,10 @@\n                                             setValue('phone', value?.phone || \"\");\r\n                                             setValue('address', value?.address || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n                                             setValue('name', value?.kin_details?.name || \"\");\r\n-                                            setValue('notes', value?.notes || \"\");\r\n-                                            setValue('notes', value?.notes || \"\");\r\n-                                    \r\n+                                            setValue('kinemail', value?.kin_details?.email || \"\");\r\n+                                            setValue('name', value?.kin_details?.name || \"\");\r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n                                     \r\n                                             if (value?.dob) {\r\n                                                 // Convert to Dayjs format\r\n"
                },
                {
                    "date": 1743280129847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -847,9 +847,9 @@\n                                             setValue('address', value?.address || \"\");\r\n                                             setValue('notes', value?.notes || \"\");\r\n                                             setValue('name', value?.kin_details?.name || \"\");\r\n                                             setValue('kinemail', value?.kin_details?.email || \"\");\r\n-                                            setValue('name', value?.kin_details?.name || \"\");\r\n+                                            setValue('kinphone', value?.kin_details?.phone || \"\");\r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n                                     \r\n                                             if (value?.dob) {\r\n                                                 // Convert to Dayjs format\r\n"
                },
                {
                    "date": 1743280143759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -848,8 +848,9 @@\n                                             setValue('notes', value?.notes || \"\");\r\n                                             setValue('name', value?.kin_details?.name || \"\");\r\n                                             setValue('kinemail', value?.kin_details?.email || \"\");\r\n                                             setValue('kinphone', value?.kin_details?.phone || \"\");\r\n+                                            setValue('kinaddress', value?.kin_details?.address || \"\");\r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n                                     \r\n                                             if (value?.dob) {\r\n                                                 // Convert to Dayjs format\r\n"
                },
                {
                    "date": 1743280167585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -849,8 +849,12 @@\n                                             setValue('name', value?.kin_details?.name || \"\");\r\n                                             setValue('kinemail', value?.kin_details?.email || \"\");\r\n                                             setValue('kinphone', value?.kin_details?.phone || \"\");\r\n                                             setValue('kinaddress', value?.kin_details?.address || \"\");\r\n+                                            setValue('genname', value?.kin_details?.name || \"\");\r\n+                                            setValue('kinemail', value?.kin_details?.email || \"\");\r\n+                                            setValue('kinphone', value?.kin_details?.phone || \"\");\r\n+                                            setValue('kinaddress', value?.kin_details?.address || \"\");\r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n                                     \r\n                                             if (value?.dob) {\r\n                                                 // Convert to Dayjs format\r\n"
                },
                {
                    "date": 1743280174858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -850,11 +850,11 @@\n                                             setValue('kinemail', value?.kin_details?.email || \"\");\r\n                                             setValue('kinphone', value?.kin_details?.phone || \"\");\r\n                                             setValue('kinaddress', value?.kin_details?.address || \"\");\r\n                                             setValue('genname', value?.kin_details?.name || \"\");\r\n-                                            setValue('kinemail', value?.kin_details?.email || \"\");\r\n-                                            setValue('kinphone', value?.kin_details?.phone || \"\");\r\n-                                            setValue('kinaddress', value?.kin_details?.address || \"\");\r\n+                                            setValue('genemail', value?.gen_details?.email || \"\");\r\n+                                            setValue('genphone', value?.gen_details?.phone || \"\");\r\n+                                            setValue('genaddress', value?.kin_details?.address || \"\");\r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n                                     \r\n                                             if (value?.dob) {\r\n                                                 // Convert to Dayjs format\r\n"
                },
                {
                    "date": 1743280191503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -849,12 +849,12 @@\n                                             setValue('name', value?.kin_details?.name || \"\");\r\n                                             setValue('kinemail', value?.kin_details?.email || \"\");\r\n                                             setValue('kinphone', value?.kin_details?.phone || \"\");\r\n                                             setValue('kinaddress', value?.kin_details?.address || \"\");\r\n-                                            setValue('genname', value?.kin_details?.name || \"\");\r\n-                                            setValue('genemail', value?.gen_details?.email || \"\");\r\n-                                            setValue('genphone', value?.gen_details?.phone || \"\");\r\n-                                            setValue('genaddress', value?.kin_details?.address || \"\");\r\n+                                            setValue('genname', value?.general_practitioner?.name || \"\");\r\n+                                            setValue('genemail', value?.general_practitioner?.email || \"\");\r\n+                                            setValue('genphone', value?.general_practitioner?.phone || \"\");\r\n+                                            setValue('genaddress', value?.general_practitioner?.address || \"\");\r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n                                     \r\n                                             if (value?.dob) {\r\n                                                 // Convert to Dayjs format\r\n"
                },
                {
                    "date": 1743280630461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -651,9 +651,9 @@\n \r\n \r\n                 <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateConsentForm)} >\r\n                     <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n-                        Create New Patient\r\n+                    Medical History Form\r\n                     </Typography>\r\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n"
                },
                {
                    "date": 1743282966506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,11 +249,11 @@\n     const CreateConsentForm = async () => {\r\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n-                patient_id: selectedPatient?.id,\r\n+                patient_id: patientType == 'existing' ?  selectedPatient?.id : null,\r\n                 form_id: null,\r\n-                aftercare_document: selectedDocument?._id,\r\n+                aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n                 treatment_date: getValues('treatmentDate'),\r\n                 consultation_date: getValues('consultationDate'),\r\n                 first_name: getValues('fname'),\r\n                 last_name: getValues('lname'),\r\n"
                },
                {
                    "date": 1743285321173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1341,92 +1341,94 @@\n                         <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {fields.map((item, index) => (\r\n-                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n-\r\n-                                    {/* Patient Date Selection */}\r\n-                                    <Grid item xs={3}>\r\n-                                        <Box>\r\n-                                            <InputLabel\r\n-                                                sx={{\r\n-                                                    textTransform: \"capitalize\",\r\n-                                                    textAlign: \"left\",\r\n-                                                    fontWeight: 700,\r\n-                                                    fontSize: \"14px\",\r\n-                                                    color: \"#333\",\r\n-                                                    marginBottom: 1.5,\r\n-                                                }}\r\n-                                            >\r\n-                                                Date :*\r\n-                                            </InputLabel>\r\n-\r\n-                                            <Controller\r\n-                                                name={`records.${index}.date`}\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: \"12px\",\r\n-                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n-                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.records?.[index]?.date && (\r\n-                                                <Typography color=\"error\">\r\n-                                                    {errors.records[index].date.message}\r\n-                                                </Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n-\r\n-                                    {/* Amount Field */}\r\n-                                    <Grid item xs={3} mt={2}>\r\n-                                        <InputField\r\n-                                            label=\"Amount\"\r\n-                                            placeholder=\"Order Amount\"\r\n-                                            size=\"small\"\r\n-                                            {...register(`records.${index}.amount`)}\r\n-                                        />\r\n-                                    </Grid>\r\n-\r\n-\r\n-\r\n-                                    {/* Description Field */}\r\n-                                    <Grid item xs={4}>\r\n-                                        <InputField\r\n-                                            label=\"Description\"\r\n-                                            multiline\r\n-                                            rows={3}\r\n-                                            placeholder=\"Description\"\r\n-                                            {...register(`records.${index}.description`)}\r\n-                                        />\r\n-                                    </Grid>\r\n-                                    {/* Remove Button (only for additional fields) */}\r\n-                                    <Grid item xs={1}>\r\n-                                        {index > 0 && (\r\n-                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n-                                                <DeleteIcon />\r\n-                                            </IconButton>\r\n-                                        )}\r\n-                                    </Grid>\r\n-                                </Grid>\r\n-                            ))}\r\n+                                                           <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+                                                               {/* Patient Date Selection */}\r\n+                                                               <Grid item xs={3}>\r\n+                                                                   <Box>\r\n+                                                                       <InputLabel\r\n+                                                                           sx={{\r\n+                                                                               textTransform: \"capitalize\",\r\n+                                                                               textAlign: \"left\",\r\n+                                                                               fontWeight: 700,\r\n+                                                                               fontSize: \"14px\",\r\n+                                                                               color: \"#333\",\r\n+                                                                               marginBottom: 1.5,\r\n+                                                                           }}\r\n+                                                                       >\r\n+                                                                           Date :*\r\n+                                                                       </InputLabel>\r\n+                           \r\n+                                                                       <Controller\r\n+                                                                           name={`records.${index}.date`}\r\n+                                                                           control={control}\r\n+                                                                           rules={{ required: \"Please select a date\" }}\r\n+                                                                           render={({ field }) => (\r\n+                                                                               <DatePicker\r\n+                                                                                   {...field}\r\n+                                                                                   value={field.value || null}\r\n+                                                                                   onChange={(newValue) => setValue(`records.${index}.date`, newValue)}\r\n+                                                                                   slotProps={{\r\n+                                                                                       textField: {\r\n+                                                                                           size: \"small\",\r\n+                                                                                           fullWidth: true,\r\n+                                                                                           sx: {\r\n+                                                                                               \"& .MuiOutlinedInput-root\": {\r\n+                                                                                                   borderRadius: \"12px\",\r\n+                                                                                                   \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n+                                                                                                   \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n+                                                                                                   \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n+                                                                                               },\r\n+                                                                                           },\r\n+                                                                                       },\r\n+                                                                                   }}\r\n+                                                                               />\r\n+                                                                           )}\r\n+                                                                       />\r\n+                                                                       {errors.records?.[index]?.date && (\r\n+                                                                           <Typography color=\"error\">\r\n+                                                                               {errors.records[index].date.message}\r\n+                                                                           </Typography>\r\n+                                                                       )}\r\n+                                                                   </Box>\r\n+                                                               </Grid>\r\n+                           \r\n+                                                               {/* Amount Field */}\r\n+                                                               <Grid item xs={3} mt={2}>\r\n+                                                                   <InputField\r\n+                                                                       label=\"Amount\"\r\n+                                                                       placeholder=\"Order Amount\"\r\n+                                                                       size=\"small\"\r\n+                                                                       {...register(`records.${index}.amount`, {\r\n+                                                                           onChange: (e) => setValue(`records.${index}.amount`, e.target.value),\r\n+                                                                       })}\r\n+                                                                   />\r\n+                                                               </Grid>\r\n+                           \r\n+                                                               {/* Description Field */}\r\n+                                                               <Grid item xs={4}>\r\n+                                                                   <InputField\r\n+                                                                       label=\"Description\"\r\n+                                                                       multiline\r\n+                                                                       rows={3}\r\n+                                                                       placeholder=\"Description\"\r\n+                                                                       {...register(`records.${index}.description`, {\r\n+                                                                           onChange: (e) => setValue(`records.${index}.description`, e.target.value),\r\n+                                                                       })}\r\n+                                                                   />\r\n+                                                               </Grid>\r\n+                           \r\n+                                                               {/* Remove Button (only for additional fields) */}\r\n+                                                               <Grid item xs={1}>\r\n+                                                                   {index > 0 && (\r\n+                                                                       <IconButton color=\"error\" onClick={() => remove(index)}>\r\n+                                                                           <DeleteIcon />\r\n+                                                                       </IconButton>\r\n+                                                                   )}\r\n+                                                               </Grid>\r\n+                                                           </Grid>\r\n+                                                       ))}\r\n                         </LocalizationProvider>\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1743285333191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n     const CreateConsentForm = async () => {\r\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n-                patient_id: patientType == 'existing' ?  selectedPatient?.id : null,\r\n+                patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n                 form_id: null,\r\n                 aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n                 treatment_date: getValues('treatmentDate'),\r\n                 consultation_date: getValues('consultationDate'),\r\n@@ -651,9 +651,9 @@\n \r\n \r\n                 <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateConsentForm)} >\r\n                     <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n-                    Medical History Form\r\n+                        Medical History Form\r\n                     </Typography>\r\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n@@ -837,9 +837,9 @@\n                                         selected={selectedPatient}\r\n                                         onSelect={(value) => {\r\n                                             setSelectedPatient(value);\r\n                                             console.log(\"Selected Patient:\", value);\r\n-                                    \r\n+\r\n                                             setValue('fname', value?.first_name || \"\");\r\n                                             setValue('lname', value?.last_name || \"\");\r\n                                             setValue('email', value?.email || \"\");\r\n                                             setValue('post', value?.post_code || \"\");\r\n@@ -854,19 +854,19 @@\n                                             setValue('genemail', value?.general_practitioner?.email || \"\");\r\n                                             setValue('genphone', value?.general_practitioner?.phone || \"\");\r\n                                             setValue('genaddress', value?.general_practitioner?.address || \"\");\r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n-                                    \r\n+\r\n                                             if (value?.dob) {\r\n                                                 // Convert to Dayjs format\r\n                                                 const parsedDate = dayjs(value.dob);\r\n-                                    \r\n+\r\n                                                 // Check if the conversion is valid\r\n                                                 if (!parsedDate.isValid()) {\r\n                                                     console.error(\"Invalid DOB Format:\", value.dob);\r\n                                                     return;\r\n                                                 }\r\n-                                    \r\n+\r\n                                                 console.log(\"Parsed Date:\", parsedDate);\r\n                                                 setValue(\"selectedDate\", parsedDate);\r\n                                             }\r\n                                         }}\r\n@@ -1341,94 +1341,94 @@\n                         <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {fields.map((item, index) => (\r\n-                                                           <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n-                                                               {/* Patient Date Selection */}\r\n-                                                               <Grid item xs={3}>\r\n-                                                                   <Box>\r\n-                                                                       <InputLabel\r\n-                                                                           sx={{\r\n-                                                                               textTransform: \"capitalize\",\r\n-                                                                               textAlign: \"left\",\r\n-                                                                               fontWeight: 700,\r\n-                                                                               fontSize: \"14px\",\r\n-                                                                               color: \"#333\",\r\n-                                                                               marginBottom: 1.5,\r\n-                                                                           }}\r\n-                                                                       >\r\n-                                                                           Date :*\r\n-                                                                       </InputLabel>\r\n-                           \r\n-                                                                       <Controller\r\n-                                                                           name={`records.${index}.date`}\r\n-                                                                           control={control}\r\n-                                                                           rules={{ required: \"Please select a date\" }}\r\n-                                                                           render={({ field }) => (\r\n-                                                                               <DatePicker\r\n-                                                                                   {...field}\r\n-                                                                                   value={field.value || null}\r\n-                                                                                   onChange={(newValue) => setValue(`records.${index}.date`, newValue)}\r\n-                                                                                   slotProps={{\r\n-                                                                                       textField: {\r\n-                                                                                           size: \"small\",\r\n-                                                                                           fullWidth: true,\r\n-                                                                                           sx: {\r\n-                                                                                               \"& .MuiOutlinedInput-root\": {\r\n-                                                                                                   borderRadius: \"12px\",\r\n-                                                                                                   \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n-                                                                                                   \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n-                                                                                                   \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n-                                                                                               },\r\n-                                                                                           },\r\n-                                                                                       },\r\n-                                                                                   }}\r\n-                                                                               />\r\n-                                                                           )}\r\n-                                                                       />\r\n-                                                                       {errors.records?.[index]?.date && (\r\n-                                                                           <Typography color=\"error\">\r\n-                                                                               {errors.records[index].date.message}\r\n-                                                                           </Typography>\r\n-                                                                       )}\r\n-                                                                   </Box>\r\n-                                                               </Grid>\r\n-                           \r\n-                                                               {/* Amount Field */}\r\n-                                                               <Grid item xs={3} mt={2}>\r\n-                                                                   <InputField\r\n-                                                                       label=\"Amount\"\r\n-                                                                       placeholder=\"Order Amount\"\r\n-                                                                       size=\"small\"\r\n-                                                                       {...register(`records.${index}.amount`, {\r\n-                                                                           onChange: (e) => setValue(`records.${index}.amount`, e.target.value),\r\n-                                                                       })}\r\n-                                                                   />\r\n-                                                               </Grid>\r\n-                           \r\n-                                                               {/* Description Field */}\r\n-                                                               <Grid item xs={4}>\r\n-                                                                   <InputField\r\n-                                                                       label=\"Description\"\r\n-                                                                       multiline\r\n-                                                                       rows={3}\r\n-                                                                       placeholder=\"Description\"\r\n-                                                                       {...register(`records.${index}.description`, {\r\n-                                                                           onChange: (e) => setValue(`records.${index}.description`, e.target.value),\r\n-                                                                       })}\r\n-                                                                   />\r\n-                                                               </Grid>\r\n-                           \r\n-                                                               {/* Remove Button (only for additional fields) */}\r\n-                                                               <Grid item xs={1}>\r\n-                                                                   {index > 0 && (\r\n-                                                                       <IconButton color=\"error\" onClick={() => remove(index)}>\r\n-                                                                           <DeleteIcon />\r\n-                                                                       </IconButton>\r\n-                                                                   )}\r\n-                                                               </Grid>\r\n-                                                           </Grid>\r\n-                                                       ))}\r\n+                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+                                    {/* Patient Date Selection */}\r\n+                                    <Grid item xs={3}>\r\n+                                        <Box>\r\n+                                            <InputLabel\r\n+                                                sx={{\r\n+                                                    textTransform: \"capitalize\",\r\n+                                                    textAlign: \"left\",\r\n+                                                    fontWeight: 700,\r\n+                                                    fontSize: \"14px\",\r\n+                                                    color: \"#333\",\r\n+                                                    marginBottom: 1.5,\r\n+                                                }}\r\n+                                            >\r\n+                                                Date :*\r\n+                                            </InputLabel>\r\n+\r\n+                                            <Controller\r\n+                                                name={`records.${index}.date`}\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => setValue(`records.${index}.date`, newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: \"12px\",\r\n+                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n+                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.records?.[index]?.date && (\r\n+                                                <Typography color=\"error\">\r\n+                                                    {errors.records[index].date.message}\r\n+                                                </Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n+\r\n+                                    {/* Amount Field */}\r\n+                                    <Grid item xs={3} mt={2}>\r\n+                                        <InputField\r\n+                                            label=\"Amount\"\r\n+                                            placeholder=\"Order Amount\"\r\n+                                            size=\"small\"\r\n+                                            {...register(`records.${index}.amount`, {\r\n+                                                onChange: (e) => setValue(`records.${index}.amount`, e.target.value),\r\n+                                            })}\r\n+                                        />\r\n+                                    </Grid>\r\n+\r\n+                                    {/* Description Field */}\r\n+                                    <Grid item xs={4}>\r\n+                                        <InputField\r\n+                                            label=\"Description\"\r\n+                                            multiline\r\n+                                            rows={3}\r\n+                                            placeholder=\"Description\"\r\n+                                            {...register(`records.${index}.description`, {\r\n+                                                onChange: (e) => setValue(`records.${index}.description`, e.target.value),\r\n+                                            })}\r\n+                                        />\r\n+                                    </Grid>\r\n+\r\n+                                    {/* Remove Button (only for additional fields) */}\r\n+                                    <Grid item xs={1}>\r\n+                                        {index > 0 && (\r\n+                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n+                                                <DeleteIcon />\r\n+                                            </IconButton>\r\n+                                        )}\r\n+                                    </Grid>\r\n+                                </Grid>\r\n+                            ))}\r\n                         </LocalizationProvider>\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1743285346796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,12 +36,9 @@\n         control,\r\n         name: \"furtherFields\",\r\n     });\r\n \r\n-    const { fields, append, remove } = useFieldArray({\r\n-        control,\r\n-        name: \"records\",\r\n-    });\r\n+ \r\n \r\n \r\n     const signCanvasRefs = useRef([]);\r\n \r\n"
                },
                {
                    "date": 1743285363451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n     const [userData, setUserData] = useState(null)\r\n+    const [fields, setFields] = useState(second)\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n         defaultValues: {\r\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n             furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n"
                },
                {
                    "date": 1743285380621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n     const [userData, setUserData] = useState(null)\r\n-    const [fields, setFields] = useState(second)\r\n+    const [fields, setFields] = useState([{ date: \"\", amount: \"\", description: \"\" }])\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n         defaultValues: {\r\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n             furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n"
                },
                {
                    "date": 1743285408102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1433,9 +1433,9 @@\n                         <Grid container p={2}>\r\n                             <Button\r\n                                 variant=\"contained\"\r\n                                 color=\"primary\"\r\n-                                onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n+                                onClick={() => fields.push({ date: \"\", amount: \"\", description: \"\" })}\r\n                                 sx={{ mt: 2, textTransform: 'capitalize' }}\r\n                             >\r\n                                 Add More\r\n                             </Button>\r\n"
                },
                {
                    "date": 1743285499076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1418,9 +1418,9 @@\n \r\n                                     {/* Remove Button (only for additional fields) */}\r\n                                     <Grid item xs={1}>\r\n                                         {index > 0 && (\r\n-                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n+                                            <IconButton color=\"error\" onClick={() =>  setFields(fields.filter((_, i) => i !== index));}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n                                         )}\r\n                                     </Grid>\r\n"
                },
                {
                    "date": 1743285507688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,11 @@\n         control,\r\n         name: \"furtherFields\",\r\n     });\r\n \r\n- \r\n \r\n \r\n+\r\n     const signCanvasRefs = useRef([]);\r\n \r\n     // Clear Signature Function\r\n     const clearSignature = (index) => {\r\n@@ -1418,9 +1418,9 @@\n \r\n                                     {/* Remove Button (only for additional fields) */}\r\n                                     <Grid item xs={1}>\r\n                                         {index > 0 && (\r\n-                                            <IconButton color=\"error\" onClick={() =>  setFields(fields.filter((_, i) => i !== index));}>\r\n+                                            <IconButton color=\"error\" onClick={() => setFields(fields.filter((_, i) => i !== index))}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n                                         )}\r\n                                     </Grid>\r\n"
                },
                {
                    "date": 1743285526301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1357,9 +1357,9 @@\n                                                 Date :*\r\n                                             </InputLabel>\r\n \r\n                                             <Controller\r\n-                                                name={`records.${index}.date`}\r\n+                                                name={`date+${index}.`}\r\n                                                 control={control}\r\n                                                 rules={{ required: \"Please select a date\" }}\r\n                                                 render={({ field }) => (\r\n                                                     <DatePicker\r\n"
                },
                {
                    "date": 1743285544764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1357,16 +1357,16 @@\n                                                 Date :*\r\n                                             </InputLabel>\r\n \r\n                                             <Controller\r\n-                                                name={`date+${index}.`}\r\n+                                                name={`date+${index}`}\r\n                                                 control={control}\r\n                                                 rules={{ required: \"Please select a date\" }}\r\n                                                 render={({ field }) => (\r\n                                                     <DatePicker\r\n                                                         {...field}\r\n                                                         value={field.value || null}\r\n-                                                        onChange={(newValue) => setValue(`records.${index}.date`, newValue)}\r\n+                                                        onChange={(newValue) => setValue(`date+${index}`, newValue)}\r\n                                                         slotProps={{\r\n                                                             textField: {\r\n                                                                 size: \"small\",\r\n                                                                 fullWidth: true,\r\n"
                },
                {
                    "date": 1743285587675,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1357,16 +1357,16 @@\n                                                 Date :*\r\n                                             </InputLabel>\r\n \r\n                                             <Controller\r\n-                                                name={`date+${index}`}\r\n+                                                name={`records.date`}\r\n                                                 control={control}\r\n                                                 rules={{ required: \"Please select a date\" }}\r\n                                                 render={({ field }) => (\r\n                                                     <DatePicker\r\n                                                         {...field}\r\n                                                         value={field.value || null}\r\n-                                                        onChange={(newValue) => setValue(`date+${index}`, newValue)}\r\n+                                                        onChange={(newValue) => setValue(`records.${index}.date`, newValue)}\r\n                                                         slotProps={{\r\n                                                             textField: {\r\n                                                                 size: \"small\",\r\n                                                                 fullWidth: true,\r\n"
                },
                {
                    "date": 1743285636564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1397,9 +1397,9 @@\n                                             label=\"Amount\"\r\n                                             placeholder=\"Order Amount\"\r\n                                             size=\"small\"\r\n                                             {...register(`records.${index}.amount`, {\r\n-                                                onChange: (e) => setValue(`records.${index}.amount`, e.target.value),\r\n+                                                onChange: (e) => {console.log(e,target.value);setValue(`records.${index}.amount`, e.target.value)},\r\n                                             })}\r\n                                         />\r\n                                     </Grid>\r\n \r\n"
                },
                {
                    "date": 1743285649765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1397,9 +1397,9 @@\n                                             label=\"Amount\"\r\n                                             placeholder=\"Order Amount\"\r\n                                             size=\"small\"\r\n                                             {...register(`records.${index}.amount`, {\r\n-                                                onChange: (e) => {console.log(e,target.value);setValue(`records.${index}.amount`, e.target.value)},\r\n+                                                onChange: (e) => {console.log(e.target.value);setValue(`records.${index}.amount`, e.target.value)},\r\n                                             })}\r\n                                         />\r\n                                     </Grid>\r\n \r\n"
                },
                {
                    "date": 1743285715544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1338,95 +1338,99 @@\n                         </Grid>\r\n                         <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                            {fields.map((item, index) => (\r\n-                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n-                                    {/* Patient Date Selection */}\r\n-                                    <Grid item xs={3}>\r\n-                                        <Box>\r\n-                                            <InputLabel\r\n-                                                sx={{\r\n-                                                    textTransform: \"capitalize\",\r\n-                                                    textAlign: \"left\",\r\n-                                                    fontWeight: 700,\r\n-                                                    fontSize: \"14px\",\r\n-                                                    color: \"#333\",\r\n-                                                    marginBottom: 1.5,\r\n-                                                }}\r\n-                                            >\r\n-                                                Date :*\r\n-                                            </InputLabel>\r\n+                        {fields.map((item, index) => (\r\n+    <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+        {/* Patient Date Selection */}\r\n+        <Grid item xs={3}>\r\n+            <Box>\r\n+                <InputLabel\r\n+                    sx={{\r\n+                        textTransform: \"capitalize\",\r\n+                        textAlign: \"left\",\r\n+                        fontWeight: 700,\r\n+                        fontSize: \"14px\",\r\n+                        color: \"#333\",\r\n+                        marginBottom: 1.5,\r\n+                    }}\r\n+                >\r\n+                    Date :*\r\n+                </InputLabel>\r\n \r\n-                                            <Controller\r\n-                                                name={`records.date`}\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => setValue(`records.${index}.date`, newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: \"12px\",\r\n-                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n-                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.records?.[index]?.date && (\r\n-                                                <Typography color=\"error\">\r\n-                                                    {errors.records[index].date.message}\r\n-                                                </Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n+                <Controller\r\n+                    name={`records.${index}.date`}\r\n+                    control={control}\r\n+                    rules={{ required: \"Please select a date\" }}\r\n+                    render={({ field }) => (\r\n+                        <DatePicker\r\n+                            {...field}\r\n+                            value={field.value || null}\r\n+                            onChange={(newValue) => setValue(`records.${index}.date`, newValue)}\r\n+                            slotProps={{\r\n+                                textField: {\r\n+                                    size: \"small\",\r\n+                                    fullWidth: true,\r\n+                                    sx: {\r\n+                                        \"& .MuiOutlinedInput-root\": {\r\n+                                            borderRadius: \"12px\",\r\n+                                            \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n+                                            \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n+                                            \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n+                                        },\r\n+                                    },\r\n+                                },\r\n+                            }}\r\n+                        />\r\n+                    )}\r\n+                />\r\n+                {errors.records?.[index]?.date && (\r\n+                    <Typography color=\"error\">\r\n+                        {errors.records[index].date.message}\r\n+                    </Typography>\r\n+                )}\r\n+            </Box>\r\n+        </Grid>\r\n \r\n-                                    {/* Amount Field */}\r\n-                                    <Grid item xs={3} mt={2}>\r\n-                                        <InputField\r\n-                                            label=\"Amount\"\r\n-                                            placeholder=\"Order Amount\"\r\n-                                            size=\"small\"\r\n-                                            {...register(`records.${index}.amount`, {\r\n-                                                onChange: (e) => {console.log(e.target.value);setValue(`records.${index}.amount`, e.target.value)},\r\n-                                            })}\r\n-                                        />\r\n-                                    </Grid>\r\n+        {/* Amount Field */}\r\n+        <Grid item xs={3} mt={2}>\r\n+            <InputField\r\n+                label={`Amount ${index + 1}`}\r\n+                placeholder=\"Order Amount\"\r\n+                size=\"small\"\r\n+                {...register(`records.${index}.amount`, {\r\n+                    onChange: (e) => {\r\n+                        console.log(e.target.value);\r\n+                        setValue(`records.${index}.amount`, e.target.value);\r\n+                    },\r\n+                })}\r\n+            />\r\n+        </Grid>\r\n \r\n-                                    {/* Description Field */}\r\n-                                    <Grid item xs={4}>\r\n-                                        <InputField\r\n-                                            label=\"Description\"\r\n-                                            multiline\r\n-                                            rows={3}\r\n-                                            placeholder=\"Description\"\r\n-                                            {...register(`records.${index}.description`, {\r\n-                                                onChange: (e) => setValue(`records.${index}.description`, e.target.value),\r\n-                                            })}\r\n-                                        />\r\n-                                    </Grid>\r\n+        {/* Description Field */}\r\n+        <Grid item xs={4}>\r\n+            <InputField\r\n+                label={`Description ${index + 1}`}\r\n+                multiline\r\n+                rows={3}\r\n+                placeholder=\"Description\"\r\n+                {...register(`records.${index}.description`, {\r\n+                    onChange: (e) => setValue(`records.${index}.description`, e.target.value),\r\n+                })}\r\n+            />\r\n+        </Grid>\r\n \r\n-                                    {/* Remove Button (only for additional fields) */}\r\n-                                    <Grid item xs={1}>\r\n-                                        {index > 0 && (\r\n-                                            <IconButton color=\"error\" onClick={() => setFields(fields.filter((_, i) => i !== index))}>\r\n-                                                <DeleteIcon />\r\n-                                            </IconButton>\r\n-                                        )}\r\n-                                    </Grid>\r\n-                                </Grid>\r\n-                            ))}\r\n+        {/* Remove Button (only for additional fields) */}\r\n+        <Grid item xs={1}>\r\n+            {index > 0 && (\r\n+                <IconButton color=\"error\" onClick={() => setFields(fields.filter((_, i) => i !== index))}>\r\n+                    <DeleteIcon />\r\n+                </IconButton>\r\n+            )}\r\n+        </Grid>\r\n+    </Grid>\r\n+))}\r\n+\r\n                         </LocalizationProvider>\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1743285791237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1393,29 +1393,29 @@\n \r\n         {/* Amount Field */}\r\n         <Grid item xs={3} mt={2}>\r\n             <InputField\r\n-                label={`Amount ${index + 1}`}\r\n+                label=\"Amount\"\r\n                 placeholder=\"Order Amount\"\r\n                 size=\"small\"\r\n-                {...register(`records.${index}.amount`, {\r\n+                {...register(`records.${index}.amount_${item.id}`, {\r\n                     onChange: (e) => {\r\n                         console.log(e.target.value);\r\n-                        setValue(`records.${index}.amount`, e.target.value);\r\n+                        setValue(`records.${index}.amount_${item.id}`, e.target.value);\r\n                     },\r\n                 })}\r\n             />\r\n         </Grid>\r\n \r\n         {/* Description Field */}\r\n         <Grid item xs={4}>\r\n             <InputField\r\n-                label={`Description ${index + 1}`}\r\n+                label=\"Description\"\r\n                 multiline\r\n                 rows={3}\r\n                 placeholder=\"Description\"\r\n-                {...register(`records.${index}.description`, {\r\n-                    onChange: (e) => setValue(`records.${index}.description`, e.target.value),\r\n+                {...register(`records.${index}.description_${item.id}`, {\r\n+                    onChange: (e) => setValue(`records.${index}.description_${item.id}`, e.target.value),\r\n                 })}\r\n             />\r\n         </Grid>\r\n \r\n@@ -1429,8 +1429,9 @@\n         </Grid>\r\n     </Grid>\r\n ))}\r\n \r\n+\r\n                         </LocalizationProvider>\r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1743285978280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1338,98 +1338,98 @@\n                         </Grid>\r\n                         <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                        {fields.map((item, index) => (\r\n-    <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n-        {/* Patient Date Selection */}\r\n-        <Grid item xs={3}>\r\n-            <Box>\r\n-                <InputLabel\r\n-                    sx={{\r\n-                        textTransform: \"capitalize\",\r\n-                        textAlign: \"left\",\r\n-                        fontWeight: 700,\r\n-                        fontSize: \"14px\",\r\n-                        color: \"#333\",\r\n-                        marginBottom: 1.5,\r\n-                    }}\r\n-                >\r\n-                    Date :*\r\n-                </InputLabel>\r\n+                            {fields.map((item, index) => (\r\n+                                <Grid container spacing={2} p={2} alignItems=\"center\" key={index} mt={2}>\r\n+                                    {/* Patient Date Selection */}\r\n+                                    <Grid item xs={3}>\r\n+                                        <Box>\r\n+                                            <InputLabel\r\n+                                                sx={{\r\n+                                                    textTransform: \"capitalize\",\r\n+                                                    textAlign: \"left\",\r\n+                                                    fontWeight: 700,\r\n+                                                    fontSize: \"14px\",\r\n+                                                    color: \"#333\",\r\n+                                                    marginBottom: 1.5,\r\n+                                                }}\r\n+                                            >\r\n+                                                Date :*\r\n+                                            </InputLabel>\r\n \r\n-                <Controller\r\n-                    name={`records.${index}.date`}\r\n-                    control={control}\r\n-                    rules={{ required: \"Please select a date\" }}\r\n-                    render={({ field }) => (\r\n-                        <DatePicker\r\n-                            {...field}\r\n-                            value={field.value || null}\r\n-                            onChange={(newValue) => setValue(`records.${index}.date`, newValue)}\r\n-                            slotProps={{\r\n-                                textField: {\r\n-                                    size: \"small\",\r\n-                                    fullWidth: true,\r\n-                                    sx: {\r\n-                                        \"& .MuiOutlinedInput-root\": {\r\n-                                            borderRadius: \"12px\",\r\n-                                            \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n-                                            \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n-                                            \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n-                                        },\r\n-                                    },\r\n-                                },\r\n-                            }}\r\n-                        />\r\n-                    )}\r\n-                />\r\n-                {errors.records?.[index]?.date && (\r\n-                    <Typography color=\"error\">\r\n-                        {errors.records[index].date.message}\r\n-                    </Typography>\r\n-                )}\r\n-            </Box>\r\n-        </Grid>\r\n+                                            <Controller\r\n+                                                name={`records.${index}.date`}\r\n+                                                control={control}\r\n+                                                rules={{ required: \"Please select a date\" }}\r\n+                                                render={({ field }) => (\r\n+                                                    <DatePicker\r\n+                                                        {...field}\r\n+                                                        value={field.value || null}\r\n+                                                        onChange={(newValue) => setValue(`records.${index}.date`, newValue)}\r\n+                                                        slotProps={{\r\n+                                                            textField: {\r\n+                                                                size: \"small\",\r\n+                                                                fullWidth: true,\r\n+                                                                sx: {\r\n+                                                                    \"& .MuiOutlinedInput-root\": {\r\n+                                                                        borderRadius: \"12px\",\r\n+                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n+                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n+                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n+                                                                    },\r\n+                                                                },\r\n+                                                            },\r\n+                                                        }}\r\n+                                                    />\r\n+                                                )}\r\n+                                            />\r\n+                                            {errors.records?.[index]?.date && (\r\n+                                                <Typography color=\"error\">\r\n+                                                    {errors.records[index].date.message}\r\n+                                                </Typography>\r\n+                                            )}\r\n+                                        </Box>\r\n+                                    </Grid>\r\n \r\n-        {/* Amount Field */}\r\n-        <Grid item xs={3} mt={2}>\r\n-            <InputField\r\n-                label=\"Amount\"\r\n-                placeholder=\"Order Amount\"\r\n-                size=\"small\"\r\n-                {...register(`records.${index}.amount_${item.id}`, {\r\n-                    onChange: (e) => {\r\n-                        console.log(e.target.value);\r\n-                        setValue(`records.${index}.amount_${item.id}`, e.target.value);\r\n-                    },\r\n-                })}\r\n-            />\r\n-        </Grid>\r\n+                                    {/* Amount Field */}\r\n+                                    <Grid item xs={3} mt={2}>\r\n+                                        <InputField\r\n+                                            label=\"Amount\"\r\n+                                            placeholder=\"Order Amount\"\r\n+                                            size=\"small\"\r\n+                                            {...register(`records.${index}.amount_${item.id}`, {\r\n+                                                onChange: (e) => {\r\n+                                                    console.log(e.target.value);\r\n+                                                    setValue(`records.${index}.amount_${item.id}`, e.target.value);\r\n+                                                },\r\n+                                            })}\r\n+                                        />\r\n+                                    </Grid>\r\n \r\n-        {/* Description Field */}\r\n-        <Grid item xs={4}>\r\n-            <InputField\r\n-                label=\"Description\"\r\n-                multiline\r\n-                rows={3}\r\n-                placeholder=\"Description\"\r\n-                {...register(`records.${index}.description_${item.id}`, {\r\n-                    onChange: (e) => setValue(`records.${index}.description_${item.id}`, e.target.value),\r\n-                })}\r\n-            />\r\n-        </Grid>\r\n+                                    {/* Description Field */}\r\n+                                    <Grid item xs={4}>\r\n+                                        <InputField\r\n+                                            label=\"Description\"\r\n+                                            multiline\r\n+                                            rows={3}\r\n+                                            placeholder=\"Description\"\r\n+                                            {...register(`records.${index}.description_${item.id}`, {\r\n+                                                onChange: (e) => setValue(`records.${index}.description_${item.id}`, e.target.value),\r\n+                                            })}\r\n+                                        />\r\n+                                    </Grid>\r\n \r\n-        {/* Remove Button (only for additional fields) */}\r\n-        <Grid item xs={1}>\r\n-            {index > 0 && (\r\n-                <IconButton color=\"error\" onClick={() => setFields(fields.filter((_, i) => i !== index))}>\r\n-                    <DeleteIcon />\r\n-                </IconButton>\r\n-            )}\r\n-        </Grid>\r\n-    </Grid>\r\n-))}\r\n+                                    {/* Remove Button (only for additional fields) */}\r\n+                                    <Grid item xs={1}>\r\n+                                        {index > 0 && (\r\n+                                            <IconButton color=\"error\" onClick={() => setFields(fields.filter((_, i) => i !== index))}>\r\n+                                                <DeleteIcon />\r\n+                                            </IconButton>\r\n+                                        )}\r\n+                                    </Grid>\r\n+                                </Grid>\r\n+                            ))}\r\n \r\n \r\n                         </LocalizationProvider>\r\n \r\n"
                },
                {
                    "date": 1743286142825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1357,16 +1357,16 @@\n                                                 Date :*\r\n                                             </InputLabel>\r\n \r\n                                             <Controller\r\n-                                                name={`records.${index}.date`}\r\n+                                                name={`${index}-shipping_charges`}\r\n                                                 control={control}\r\n                                                 rules={{ required: \"Please select a date\" }}\r\n                                                 render={({ field }) => (\r\n                                                     <DatePicker\r\n                                                         {...field}\r\n                                                         value={field.value || null}\r\n-                                                        onChange={(newValue) => setValue(`records.${index}.date`, newValue)}\r\n+                                                        onChange={(newValue) => setValue(`${index}-shipping_charges`, newValue)}\r\n                                                         slotProps={{\r\n                                                             textField: {\r\n                                                                 size: \"small\",\r\n                                                                 fullWidth: true,\r\n"
                },
                {
                    "date": 1743286218898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1396,12 +1396,12 @@\n                                         <InputField\r\n                                             label=\"Amount\"\r\n                                             placeholder=\"Order Amount\"\r\n                                             size=\"small\"\r\n-                                            {...register(`records.${index}.amount_${item.id}`, {\r\n+                                            {...register(`${index}-amount`, {\r\n                                                 onChange: (e) => {\r\n                                                     console.log(e.target.value);\r\n-                                                    setValue(`records.${index}.amount_${item.id}`, e.target.value);\r\n+                                                    setValue(`${index}-amount`, e.target.value);\r\n                                                 },\r\n                                             })}\r\n                                         />\r\n                                     </Grid>\r\n"
                },
                {
                    "date": 1743286248282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1357,16 +1357,16 @@\n                                                 Date :*\r\n                                             </InputLabel>\r\n \r\n                                             <Controller\r\n-                                                name={`${index}-shipping_charges`}\r\n+                                                name={`${index}-date`}\r\n                                                 control={control}\r\n                                                 rules={{ required: \"Please select a date\" }}\r\n                                                 render={({ field }) => (\r\n                                                     <DatePicker\r\n                                                         {...field}\r\n                                                         value={field.value || null}\r\n-                                                        onChange={(newValue) => setValue(`${index}-shipping_charges`, newValue)}\r\n+                                                        onChange={(newValue) => setValue(`${index}-date`, newValue)}\r\n                                                         slotProps={{\r\n                                                             textField: {\r\n                                                                 size: \"small\",\r\n                                                                 fullWidth: true,\r\n@@ -1396,9 +1396,9 @@\n                                         <InputField\r\n                                             label=\"Amount\"\r\n                                             placeholder=\"Order Amount\"\r\n                                             size=\"small\"\r\n-                                            {...register(`${index}-amount`, {\r\n+                                            register={register(`${index}-amount`, {\r\n                                                 onChange: (e) => {\r\n                                                     console.log(e.target.value);\r\n                                                     setValue(`${index}-amount`, e.target.value);\r\n                                                 },\r\n"
                },
                {
                    "date": 1743286275243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,8 @@\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n     const [userData, setUserData] = useState(null)\r\n-    const [fields, setFields] = useState([{ date: \"\", amount: \"\", description: \"\" }])\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n         defaultValues: {\r\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n             furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n@@ -37,11 +36,14 @@\n         control,\r\n         name: \"furtherFields\",\r\n     });\r\n \r\n+    const { fields, append, remove } = useFieldArray({\r\n+        control,\r\n+        name: \"records\",\r\n+    });\r\n \r\n \r\n-\r\n     const signCanvasRefs = useRef([]);\r\n \r\n     // Clear Signature Function\r\n     const clearSignature = (index) => {\r\n@@ -247,9 +249,9 @@\n     const CreateConsentForm = async () => {\r\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n-                patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n+                patient_id: patientType == 'existing' ?  selectedPatient?.id : null,\r\n                 form_id: null,\r\n                 aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n                 treatment_date: getValues('treatmentDate'),\r\n                 consultation_date: getValues('consultationDate'),\r\n@@ -649,9 +651,9 @@\n \r\n \r\n                 <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateConsentForm)} >\r\n                     <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n-                        Medical History Form\r\n+                    Medical History Form\r\n                     </Typography>\r\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n@@ -835,9 +837,9 @@\n                                         selected={selectedPatient}\r\n                                         onSelect={(value) => {\r\n                                             setSelectedPatient(value);\r\n                                             console.log(\"Selected Patient:\", value);\r\n-\r\n+                                    \r\n                                             setValue('fname', value?.first_name || \"\");\r\n                                             setValue('lname', value?.last_name || \"\");\r\n                                             setValue('email', value?.email || \"\");\r\n                                             setValue('post', value?.post_code || \"\");\r\n@@ -852,19 +854,19 @@\n                                             setValue('genemail', value?.general_practitioner?.email || \"\");\r\n                                             setValue('genphone', value?.general_practitioner?.phone || \"\");\r\n                                             setValue('genaddress', value?.general_practitioner?.address || \"\");\r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n-\r\n+                                    \r\n                                             if (value?.dob) {\r\n                                                 // Convert to Dayjs format\r\n                                                 const parsedDate = dayjs(value.dob);\r\n-\r\n+                                    \r\n                                                 // Check if the conversion is valid\r\n                                                 if (!parsedDate.isValid()) {\r\n                                                     console.error(\"Invalid DOB Format:\", value.dob);\r\n                                                     return;\r\n                                                 }\r\n-\r\n+                                    \r\n                                                 console.log(\"Parsed Date:\", parsedDate);\r\n                                                 setValue(\"selectedDate\", parsedDate);\r\n                                             }\r\n                                         }}\r\n@@ -1339,9 +1341,10 @@\n                         <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {fields.map((item, index) => (\r\n-                                <Grid container spacing={2} p={2} alignItems=\"center\" key={index} mt={2}>\r\n+                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n+\r\n                                     {/* Patient Date Selection */}\r\n                                     <Grid item xs={3}>\r\n                                         <Box>\r\n                                             <InputLabel\r\n@@ -1357,16 +1360,16 @@\n                                                 Date :*\r\n                                             </InputLabel>\r\n \r\n                                             <Controller\r\n-                                                name={`${index}-date`}\r\n+                                                name={`records.${index}.date`}\r\n                                                 control={control}\r\n                                                 rules={{ required: \"Please select a date\" }}\r\n                                                 render={({ field }) => (\r\n                                                     <DatePicker\r\n                                                         {...field}\r\n                                                         value={field.value || null}\r\n-                                                        onChange={(newValue) => setValue(`${index}-date`, newValue)}\r\n+                                                        onChange={(newValue) => field.onChange(newValue)}\r\n                                                         slotProps={{\r\n                                                             textField: {\r\n                                                                 size: \"small\",\r\n                                                                 fullWidth: true,\r\n@@ -1396,51 +1399,43 @@\n                                         <InputField\r\n                                             label=\"Amount\"\r\n                                             placeholder=\"Order Amount\"\r\n                                             size=\"small\"\r\n-                                            register={register(`${index}-amount`, {\r\n-                                                onChange: (e) => {\r\n-                                                    console.log(e.target.value);\r\n-                                                    setValue(`${index}-amount`, e.target.value);\r\n-                                                },\r\n-                                            })}\r\n+                                            {...register(`records.${index}.amount`)}\r\n                                         />\r\n                                     </Grid>\r\n \r\n+\r\n+\r\n                                     {/* Description Field */}\r\n                                     <Grid item xs={4}>\r\n                                         <InputField\r\n                                             label=\"Description\"\r\n                                             multiline\r\n                                             rows={3}\r\n                                             placeholder=\"Description\"\r\n-                                            {...register(`records.${index}.description_${item.id}`, {\r\n-                                                onChange: (e) => setValue(`records.${index}.description_${item.id}`, e.target.value),\r\n-                                            })}\r\n+                                            {...register(`records.${index}.description`)}\r\n                                         />\r\n                                     </Grid>\r\n-\r\n                                     {/* Remove Button (only for additional fields) */}\r\n                                     <Grid item xs={1}>\r\n                                         {index > 0 && (\r\n-                                            <IconButton color=\"error\" onClick={() => setFields(fields.filter((_, i) => i !== index))}>\r\n+                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n                                         )}\r\n                                     </Grid>\r\n                                 </Grid>\r\n                             ))}\r\n-\r\n-\r\n                         </LocalizationProvider>\r\n \r\n \r\n \r\n                         <Grid container p={2}>\r\n                             <Button\r\n                                 variant=\"contained\"\r\n                                 color=\"primary\"\r\n-                                onClick={() => fields.push({ date: \"\", amount: \"\", description: \"\" })}\r\n+                                onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n                                 sx={{ mt: 2, textTransform: 'capitalize' }}\r\n                             >\r\n                                 Add More\r\n                             </Button>\r\n"
                },
                {
                    "date": 1743286291017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1412,9 +1412,9 @@\n                                             label=\"Description\"\r\n                                             multiline\r\n                                             rows={3}\r\n                                             placeholder=\"Description\"\r\n-                                            {...register(`records.${index}.description`)}\r\n+                                            register={register(`records.${index}.description`)}\r\n                                         />\r\n                                     </Grid>\r\n                                     {/* Remove Button (only for additional fields) */}\r\n                                     <Grid item xs={1}>\r\n"
                },
                {
                    "date": 1743286299131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1399,9 +1399,9 @@\n                                         <InputField\r\n                                             label=\"Amount\"\r\n                                             placeholder=\"Order Amount\"\r\n                                             size=\"small\"\r\n-                                            {...register(`records.${index}.amount`)}\r\n+                                            register={register(`records.${index}.amount`)}\r\n                                         />\r\n                                     </Grid>\r\n \r\n \r\n"
                },
                {
                    "date": 1743286334962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1337,8 +1337,10 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n+                        {console.log(watch('records'))\r\n+                        }\r\n                         <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {fields.map((item, index) => (\r\n"
                },
                {
                    "date": 1743361746251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1186,8 +1186,36 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n+                        <Grid container spacing={2} p={2}>\r\n+                            {/* Marketing Permission */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n+                                <FormControl component=\"fieldset\">\r\n+\r\n+                                    <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n+                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n+                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n+                                    </RadioGroup>\r\n+                                </FormControl>\r\n+                            </Grid>\r\n+\r\n+                            {/* Offers & Reminders Permission */}\r\n+                            <Grid item xs={6} mt={2}>\r\n+                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n+                                <FormControl component=\"fieldset\">\r\n+\r\n+                                    <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n+                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n+                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n+                                    </RadioGroup>\r\n+                                </FormControl>\r\n+                            </Grid>\r\n+                        </Grid>\r\n+                        <Grid container p={1}>\r\n+                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n+                        </Grid>\r\n                         <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n                             Treatment plan section\r\n                         </Typography>\r\n \r\n"
                },
                {
                    "date": 1743361764055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1187,8 +1187,11 @@\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n                         <Grid container spacing={2} p={2}>\r\n+                        <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n+                            Facial Maping\r\n+                        </Typography>\r\n                             {/* Marketing Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n                                 <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n"
                },
                {
                    "date": 1743361780919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1186,12 +1186,13 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Grid container spacing={2} p={2}>\r\n                         <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n-                            Facial Maping\r\n+                            Facial Mapping\r\n                         </Typography>\r\n+                        <Grid container spacing={2} p={2}>\r\n+                   \r\n                             {/* Marketing Permission */}\r\n                             <Grid item xs={6} mt={2}>\r\n                                 <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n"
                },
                {
                    "date": 1743362662762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1191,31 +1191,9 @@\n                             Facial Mapping\r\n                         </Typography>\r\n                         <Grid container spacing={2} p={2}>\r\n                    \r\n-                            {/* Marketing Permission */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n-                                <FormControl component=\"fieldset\">\r\n-\r\n-                                    <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n-                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n-                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n-                                    </RadioGroup>\r\n-                                </FormControl>\r\n-                            </Grid>\r\n-\r\n-                            {/* Offers & Reminders Permission */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n-                                <FormControl component=\"fieldset\">\r\n-\r\n-                                    <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n-                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n-                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n-                                    </RadioGroup>\r\n-                                </FormControl>\r\n-                            </Grid>\r\n+                           \r\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n"
                },
                {
                    "date": 1743363022592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,28 @@\n         control,\r\n         name: \"records\",\r\n     });\r\n \r\n+    const sigCanvasRef = useRef(null);\r\n+    const [savedImage, setSavedImage] = useState(null);\r\n+   \r\n+    const handleClear = () => {\r\n+        sigCanvasRef.current.clear();\r\n+    };\r\n \r\n+    const handleSave = () => {\r\n+        if (sigCanvasRef.current) {\r\n+            const canvas = sigCanvasRef.current.getCanvas();\r\n+            const ctx = canvas.getContext(\"2d\");\r\n+            const img = new Image();\r\n+            img.src = backgroundImage;\r\n+            img.onload = () => {\r\n+                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n+                const finalImage = canvas.toDataURL(\"image/png\");\r\n+                setSavedImage(finalImage);\r\n+            };\r\n+        }\r\n+    };\r\n     const signCanvasRefs = useRef([]);\r\n \r\n     // Clear Signature Function\r\n     const clearSignature = (index) => {\r\n"
                },
                {
                    "date": 1743363038651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         control,\r\n         name: \"records\",\r\n     });\r\n \r\n-    const sigCanvasRef = useRef(null);\r\n+    const sigMarkingRef = useRef(null);\r\n     const [savedImage, setSavedImage] = useState(null);\r\n    \r\n     const handleClear = () => {\r\n         sigCanvasRef.current.clear();\r\n"
                },
                {
                    "date": 1743363047244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,15 +44,15 @@\n \r\n     const sigMarkingRef = useRef(null);\r\n     const [savedImage, setSavedImage] = useState(null);\r\n    \r\n-    const handleClear = () => {\r\n-        sigCanvasRef.current.clear();\r\n+    const handleClearMarking = () => {\r\n+        sigMarkingRef.current.clear();\r\n     };\r\n \r\n     const handleSave = () => {\r\n-        if (sigCanvasRef.current) {\r\n-            const canvas = sigCanvasRef.current.getCanvas();\r\n+        if (sigMarkingRef.current) {\r\n+            const canvas = sigMarkingRef.current.getCanvas();\r\n             const ctx = canvas.getContext(\"2d\");\r\n             const img = new Image();\r\n             img.src = backgroundImage;\r\n             img.onload = () => {\r\n"
                },
                {
                    "date": 1743363070888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,14 +48,14 @@\n     const handleClearMarking = () => {\r\n         sigMarkingRef.current.clear();\r\n     };\r\n \r\n-    const handleSave = () => {\r\n+    const handleSaveMarking = () => {\r\n         if (sigMarkingRef.current) {\r\n             const canvas = sigMarkingRef.current.getCanvas();\r\n             const ctx = canvas.getContext(\"2d\");\r\n             const img = new Image();\r\n-            img.src = backgroundImage;\r\n+            img.src = {Images.girl};\r\n             img.onload = () => {\r\n                 ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n                 const finalImage = canvas.toDataURL(\"image/png\");\r\n                 setSavedImage(finalImage);\r\n"
                },
                {
                    "date": 1743363149204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n import DeleteIcon from \"@mui/icons-material/Delete\";\r\n import UploadFileIcon from '@mui/icons-material/UploadFile';\r\n import CloseIcon from '@mui/icons-material/Close';\r\n import dayjs from \"dayjs\";\r\n+import { Images } from \"../../../assets/images\";\r\n \r\n-\r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n     const [userData, setUserData] = useState(null)\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n@@ -53,9 +53,9 @@\n         if (sigMarkingRef.current) {\r\n             const canvas = sigMarkingRef.current.getCanvas();\r\n             const ctx = canvas.getContext(\"2d\");\r\n             const img = new Image();\r\n-            img.src = {Images.girl};\r\n+            img.src = Images.girl;\r\n             img.onload = () => {\r\n                 ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n                 const finalImage = canvas.toDataURL(\"image/png\");\r\n                 setSavedImage(finalImage);\r\n"
                },
                {
                    "date": 1743363178395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1209,9 +1209,41 @@\n                         <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n                             Facial Mapping\r\n                         </Typography>\r\n                         <Grid container spacing={2} p={2}>\r\n-                   \r\n+                        <Grid item xs={6}>\r\n+                <Typography>Facial Marking:</Typography>\r\n+                <div style={{ position: \"relative\", width: 300, height: 150 }}>\r\n+                    <SignatureCanvas\r\n+                        ref={sigCanvasRef}\r\n+                        penColor=\"red\"\r\n+                        canvasProps={{\r\n+                            width: 300,\r\n+                            height: 150,\r\n+                            className: \"sigCanvas\",\r\n+                            style: { border: \"1px dashed black\", background: `url(${backgroundImage}) center/cover no-repeat` },\r\n+                        }}\r\n+                    />\r\n+                </div>\r\n+                <Grid container spacing={1} mt={1}>\r\n+                    <Grid item>\r\n+                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n+                            Clear Marking\r\n+                        </Button>\r\n+                    </Grid>\r\n+                    <Grid item>\r\n+                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n+                            Save Marking\r\n+                        </Button>\r\n+                    </Grid>\r\n+                </Grid>\r\n+            </Grid>\r\n+            {savedImage && (\r\n+                <Grid item xs={6}>\r\n+                    <Typography>Saved Image:</Typography>\r\n+                    <img src={savedImage} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n+                </Grid>\r\n+            )}\r\n                            \r\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n"
                },
                {
                    "date": 1743363184388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1225,9 +1225,9 @@\n                     />\r\n                 </div>\r\n                 <Grid container spacing={1} mt={1}>\r\n                     <Grid item>\r\n-                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n+                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClearMarking}>\r\n                             Clear Marking\r\n                         </Button>\r\n                     </Grid>\r\n                     <Grid item>\r\n"
                },
                {
                    "date": 1743363192846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1219,9 +1219,9 @@\n                         canvasProps={{\r\n                             width: 300,\r\n                             height: 150,\r\n                             className: \"sigCanvas\",\r\n-                            style: { border: \"1px dashed black\", background: `url(${backgroundImage}) center/cover no-repeat` },\r\n+                            style: { border: \"1px dashed black\", background: `url(${Images.gitl}) center/cover no-repeat` },\r\n                         }}\r\n                     />\r\n                 </div>\r\n                 <Grid container spacing={1} mt={1}>\r\n@@ -1230,9 +1230,9 @@\n                             Clear Marking\r\n                         </Button>\r\n                     </Grid>\r\n                     <Grid item>\r\n-                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n+                        <Button variant=\"contained\" color=\"primary\" onClick={handleSaveMarking}>\r\n                             Save Marking\r\n                         </Button>\r\n                     </Grid>\r\n                 </Grid>\r\n"
                },
                {
                    "date": 1743363230726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1213,15 +1213,15 @@\n                         <Grid item xs={6}>\r\n                 <Typography>Facial Marking:</Typography>\r\n                 <div style={{ position: \"relative\", width: 300, height: 150 }}>\r\n                     <SignatureCanvas\r\n-                        ref={sigCanvasRef}\r\n+                        ref={sigMarkingRef}\r\n                         penColor=\"red\"\r\n                         canvasProps={{\r\n                             width: 300,\r\n                             height: 150,\r\n                             className: \"sigCanvas\",\r\n-                            style: { border: \"1px dashed black\", background: `url(${Images.gitl}) center/cover no-repeat` },\r\n+                            style: { border: \"1px dashed black\", background: `url(${Images.girl}) center/cover no-repeat` },\r\n                         }}\r\n                     />\r\n                 </div>\r\n                 <Grid container spacing={1} mt={1}>\r\n"
                },
                {
                    "date": 1743363365011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,24 +43,37 @@\n     });\r\n \r\n     const sigMarkingRef = useRef(null);\r\n     const [savedImage, setSavedImage] = useState(null);\r\n-   \r\n-    const handleClearMarking = () => {\r\n-        sigMarkingRef.current.clear();\r\n+  \r\n+    const backgroundImage = \"https://example.com/face-diagram.jpg\"; // Replace with actual image URL\r\n+\r\n+    useEffect(() => {\r\n+        const canvas = sigMarkingRef.current.getCanvas();\r\n+        const ctx = canvas.getContext(\"2d\");\r\n+        const img = new Image();\r\n+        img.src = backgroundImage;\r\n+        img.onload = () => {\r\n+            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n+        };\r\n+    }, []);\r\n+\r\n+    const handleClear = () => {\r\n+        const canvas = sigMarkingRef.current.getCanvas();\r\n+        const ctx = canvas.getContext(\"2d\");\r\n+        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n+        const img = new Image();\r\n+        img.src = backgroundImage;\r\n+        img.onload = () => {\r\n+            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n+        };\r\n     };\r\n \r\n-    const handleSaveMarking = () => {\r\n+    const handleSave = () => {\r\n         if (sigMarkingRef.current) {\r\n             const canvas = sigMarkingRef.current.getCanvas();\r\n-            const ctx = canvas.getContext(\"2d\");\r\n-            const img = new Image();\r\n-            img.src = Images.girl;\r\n-            img.onload = () => {\r\n-                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n-                const finalImage = canvas.toDataURL(\"image/png\");\r\n-                setSavedImage(finalImage);\r\n-            };\r\n+            const finalImage = canvas.toDataURL(\"image/png\");\r\n+            setSavedImage(finalImage);\r\n         }\r\n     };\r\n     const signCanvasRefs = useRef([]);\r\n \r\n"
                },
                {
                    "date": 1743363371968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \r\n     const sigMarkingRef = useRef(null);\r\n     const [savedImage, setSavedImage] = useState(null);\r\n   \r\n-    const backgroundImage = \"https://example.com/face-diagram.jpg\"; // Replace with actual image URL\r\n+    const backgroundImage = Images.girl; // Replace with actual image URL\r\n \r\n     useEffect(() => {\r\n         const canvas = sigMarkingRef.current.getCanvas();\r\n         const ctx = canvas.getContext(\"2d\");\r\n"
                },
                {
                    "date": 1743363388494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n             ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n         };\r\n     }, []);\r\n \r\n-    const handleClear = () => {\r\n+    const handleClearMarking = () => {\r\n         const canvas = sigMarkingRef.current.getCanvas();\r\n         const ctx = canvas.getContext(\"2d\");\r\n         ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n         const img = new Image();\r\n@@ -67,9 +67,9 @@\n             ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n         };\r\n     };\r\n \r\n-    const handleSave = () => {\r\n+    const handleSaveMarking = () => {\r\n         if (sigMarkingRef.current) {\r\n             const canvas = sigMarkingRef.current.getCanvas();\r\n             const finalImage = canvas.toDataURL(\"image/png\");\r\n             setSavedImage(finalImage);\r\n"
                },
                {
                    "date": 1743363492221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,12 +67,38 @@\n             ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n         };\r\n     };\r\n \r\n-    const handleSaveMarking = () => {\r\n+    const handleSaveMarking =async () => {\r\n         if (sigMarkingRef.current) {\r\n             const canvas = sigMarkingRef.current.getCanvas();\r\n             const finalImage = canvas.toDataURL(\"image/png\");\r\n+            try {\r\n+                const file = signData;\r\n+                if (file) {\r\n+                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+                }\r\n+\r\n+                let obj = {\r\n+                    document: signData,\r\n+                    filename: moment().unix() + \"_Sign.png\"\r\n+                }\r\n+\r\n+                const response = await axios.post(\r\n+                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n+                    obj\r\n+                );\r\n+\r\n+                console.log(response?.data?.data?.path);\r\n+\r\n+\r\n+                setValue(`furtherFields.${index}.sign`, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+\r\n+\r\n+            } catch (error) {\r\n+                console.log(error);\r\n+\r\n+            }\r\n             setSavedImage(finalImage);\r\n         }\r\n     };\r\n     const signCanvasRefs = useRef([]);\r\n"
                },
                {
                    "date": 1743363498770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,10 @@\n     };\r\n \r\n     const handleSaveMarking =async () => {\r\n         if (sigMarkingRef.current) {\r\n-            const canvas = sigMarkingRef.current.getCanvas();\r\n-            const finalImage = canvas.toDataURL(\"image/png\");\r\n+            const canvas = await sigMarkingRef.current.getCanvas();\r\n+            const finalImage = await canvas.toDataURL(\"image/png\");\r\n             try {\r\n                 const file = signData;\r\n                 if (file) {\r\n                     setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n"
                },
                {
                    "date": 1743363504972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,15 +72,15 @@\n         if (sigMarkingRef.current) {\r\n             const canvas = await sigMarkingRef.current.getCanvas();\r\n             const finalImage = await canvas.toDataURL(\"image/png\");\r\n             try {\r\n-                const file = signData;\r\n+                const file = finalImage;\r\n                 if (file) {\r\n                     setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n                 }\r\n \r\n                 let obj = {\r\n-                    document: signData,\r\n+                    document: finalImage,\r\n                     filename: moment().unix() + \"_Sign.png\"\r\n                 }\r\n \r\n                 const response = await axios.post(\r\n"
                },
                {
                    "date": 1743363512953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n                 }\r\n \r\n                 let obj = {\r\n                     document: finalImage,\r\n-                    filename: moment().unix() + \"_Sign.png\"\r\n+                    filename: moment().unix() + \"_Mapping.png\"\r\n                 }\r\n \r\n                 const response = await axios.post(\r\n                     'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n"
                },
                {
                    "date": 1743363532593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n \r\n                 console.log(response?.data?.data?.path);\r\n \r\n \r\n-                setValue(`furtherFields.${index}.sign`, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+                setSavedImage(, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n \r\n \r\n             } catch (error) {\r\n                 console.log(error);\r\n"
                },
                {
                    "date": 1743363573671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n import { Images } from \"../../../assets/images\";\r\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n+    const [markingLoader, setmarkingLoader] = useState(false)\r\n     const [userData, setUserData] = useState(null)\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n         defaultValues: {\r\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n@@ -90,9 +91,9 @@\n \r\n                 console.log(response?.data?.data?.path);\r\n \r\n \r\n-                setSavedImage(, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+                setSavedImage( 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n \r\n \r\n             } catch (error) {\r\n                 console.log(error);\r\n"
                },
                {
                    "date": 1743363596021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n import { Images } from \"../../../assets/images\";\r\n \r\n const CreateConsentForm = () => {\r\n     const navigate = useNavigate()\r\n-    const [markingLoader, setmarkingLoader] = useState(false)\r\n+    const [markingLoader, setMarkingLoader] = useState(false)\r\n     const [userData, setUserData] = useState(null)\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n         defaultValues: {\r\n             records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n@@ -74,11 +74,9 @@\n             const canvas = await sigMarkingRef.current.getCanvas();\r\n             const finalImage = await canvas.toDataURL(\"image/png\");\r\n             try {\r\n                 const file = finalImage;\r\n-                if (file) {\r\n-                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n-                }\r\n+               \r\n \r\n                 let obj = {\r\n                     document: finalImage,\r\n                     filename: moment().unix() + \"_Mapping.png\"\r\n"
                },
                {
                    "date": 1743363609444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,13 +69,13 @@\n         };\r\n     };\r\n \r\n     const handleSaveMarking =async () => {\r\n+        setMarkingLoader(true)\r\n         if (sigMarkingRef.current) {\r\n             const canvas = await sigMarkingRef.current.getCanvas();\r\n             const finalImage = await canvas.toDataURL(\"image/png\");\r\n             try {\r\n-                const file = finalImage;\r\n                \r\n \r\n                 let obj = {\r\n                     document: finalImage,\r\n"
                },
                {
                    "date": 1743363620890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,8 +97,9 @@\n                 console.log(error);\r\n \r\n             }\r\n             setSavedImage(finalImage);\r\n+            setMarkingLoader(false)\r\n         }\r\n     };\r\n     const signCanvasRefs = useRef([]);\r\n \r\n"
                },
                {
                    "date": 1743363663907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1275,9 +1275,12 @@\n                         </Button>\r\n                     </Grid>\r\n                 </Grid>\r\n             </Grid>\r\n-            {savedImage && (\r\n+            {markingLoader ? <Grid item xs={6}>\r\n+                    <Typography>Saved Image:</Typography>\r\n+                    <img src={savedImage} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n+                </Grid> : (\r\n                 <Grid item xs={6}>\r\n                     <Typography>Saved Image:</Typography>\r\n                     <img src={savedImage} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n                 </Grid>\r\n"
                },
                {
                    "date": 1743363676572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1276,10 +1276,9 @@\n                     </Grid>\r\n                 </Grid>\r\n             </Grid>\r\n             {markingLoader ? <Grid item xs={6}>\r\n-                    <Typography>Saved Image:</Typography>\r\n-                    <img src={savedImage} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n+                    <CircularProgress/>\r\n                 </Grid> : (\r\n                 <Grid item xs={6}>\r\n                     <Typography>Saved Image:</Typography>\r\n                     <img src={savedImage} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n"
                },
                {
                    "date": 1743363683722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     });\r\n \r\n     const sigMarkingRef = useRef(null);\r\n     const [savedImage, setSavedImage] = useState(null);\r\n-  \r\n+\r\n     const backgroundImage = Images.girl; // Replace with actual image URL\r\n \r\n     useEffect(() => {\r\n         const canvas = sigMarkingRef.current.getCanvas();\r\n@@ -68,16 +68,16 @@\n             ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n         };\r\n     };\r\n \r\n-    const handleSaveMarking =async () => {\r\n+    const handleSaveMarking = async () => {\r\n         setMarkingLoader(true)\r\n         if (sigMarkingRef.current) {\r\n             const canvas = await sigMarkingRef.current.getCanvas();\r\n             const finalImage = await canvas.toDataURL(\"image/png\");\r\n             try {\r\n-               \r\n \r\n+\r\n                 let obj = {\r\n                     document: finalImage,\r\n                     filename: moment().unix() + \"_Mapping.png\"\r\n                 }\r\n@@ -89,9 +89,9 @@\n \r\n                 console.log(response?.data?.data?.path);\r\n \r\n \r\n-                setSavedImage( 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+                setSavedImage('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n \r\n \r\n             } catch (error) {\r\n                 console.log(error);\r\n@@ -307,9 +307,9 @@\n     const CreateConsentForm = async () => {\r\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n-                patient_id: patientType == 'existing' ?  selectedPatient?.id : null,\r\n+                patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n                 form_id: null,\r\n                 aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n                 treatment_date: getValues('treatmentDate'),\r\n                 consultation_date: getValues('consultationDate'),\r\n@@ -709,9 +709,9 @@\n \r\n \r\n                 <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(CreateConsentForm)} >\r\n                     <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n-                    Medical History Form\r\n+                        Medical History Form\r\n                     </Typography>\r\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n@@ -895,9 +895,9 @@\n                                         selected={selectedPatient}\r\n                                         onSelect={(value) => {\r\n                                             setSelectedPatient(value);\r\n                                             console.log(\"Selected Patient:\", value);\r\n-                                    \r\n+\r\n                                             setValue('fname', value?.first_name || \"\");\r\n                                             setValue('lname', value?.last_name || \"\");\r\n                                             setValue('email', value?.email || \"\");\r\n                                             setValue('post', value?.post_code || \"\");\r\n@@ -912,19 +912,19 @@\n                                             setValue('genemail', value?.general_practitioner?.email || \"\");\r\n                                             setValue('genphone', value?.general_practitioner?.phone || \"\");\r\n                                             setValue('genaddress', value?.general_practitioner?.address || \"\");\r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n-                                    \r\n+\r\n                                             if (value?.dob) {\r\n                                                 // Convert to Dayjs format\r\n                                                 const parsedDate = dayjs(value.dob);\r\n-                                    \r\n+\r\n                                                 // Check if the conversion is valid\r\n                                                 if (!parsedDate.isValid()) {\r\n                                                     console.error(\"Invalid DOB Format:\", value.dob);\r\n                                                     return;\r\n                                                 }\r\n-                                    \r\n+\r\n                                                 console.log(\"Parsed Date:\", parsedDate);\r\n                                                 setValue(\"selectedDate\", parsedDate);\r\n                                             }\r\n                                         }}\r\n@@ -1248,44 +1248,44 @@\n                         <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n                             Facial Mapping\r\n                         </Typography>\r\n                         <Grid container spacing={2} p={2}>\r\n-                        <Grid item xs={6}>\r\n-                <Typography>Facial Marking:</Typography>\r\n-                <div style={{ position: \"relative\", width: 300, height: 150 }}>\r\n-                    <SignatureCanvas\r\n-                        ref={sigMarkingRef}\r\n-                        penColor=\"red\"\r\n-                        canvasProps={{\r\n-                            width: 300,\r\n-                            height: 150,\r\n-                            className: \"sigCanvas\",\r\n-                            style: { border: \"1px dashed black\", background: `url(${Images.girl}) center/cover no-repeat` },\r\n-                        }}\r\n-                    />\r\n-                </div>\r\n-                <Grid container spacing={1} mt={1}>\r\n-                    <Grid item>\r\n-                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClearMarking}>\r\n-                            Clear Marking\r\n-                        </Button>\r\n-                    </Grid>\r\n-                    <Grid item>\r\n-                        <Button variant=\"contained\" color=\"primary\" onClick={handleSaveMarking}>\r\n-                            Save Marking\r\n-                        </Button>\r\n-                    </Grid>\r\n-                </Grid>\r\n-            </Grid>\r\n-            {markingLoader ? <Grid item xs={6}>\r\n-                    <CircularProgress/>\r\n-                </Grid> : (\r\n-                <Grid item xs={6}>\r\n-                    <Typography>Saved Image:</Typography>\r\n-                    <img src={savedImage} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n-                </Grid>\r\n-            )}\r\n-                           \r\n+                            <Grid item xs={6}>\r\n+                                <Typography>Facial Marking:</Typography>\r\n+                                <div style={{ position: \"relative\", width: 300, height: 150 }}>\r\n+                                    <SignatureCanvas\r\n+                                        ref={sigMarkingRef}\r\n+                                        penColor=\"red\"\r\n+                                        canvasProps={{\r\n+                                            width: 300,\r\n+                                            height: 150,\r\n+                                            className: \"sigCanvas\",\r\n+                                            style: { border: \"1px dashed black\", background: `url(${Images.girl}) center/cover no-repeat` },\r\n+                                        }}\r\n+                                    />\r\n+                                </div>\r\n+                                <Grid container spacing={1} mt={1}>\r\n+                                    <Grid item>\r\n+                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClearMarking}>\r\n+                                            Clear Marking\r\n+                                        </Button>\r\n+                                    </Grid>\r\n+                                    <Grid item>\r\n+                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSaveMarking}>\r\n+                                            Save Marking\r\n+                                        </Button>\r\n+                                    </Grid>\r\n+                                </Grid>\r\n+                            </Grid>\r\n+                            {markingLoader ? <Grid item xs={6}>\r\n+                                <CircularProgress size={50} />\r\n+                            </Grid> : (\r\n+                                <Grid item xs={6}>\r\n+                                    <Typography>Saved Image:</Typography>\r\n+                                    <img src={savedImage} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n+                                </Grid>\r\n+                            )}\r\n+\r\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n"
                },
                {
                    "date": 1743363704008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1280,9 +1280,9 @@\n                                 <CircularProgress size={50} />\r\n                             </Grid> : (\r\n                                 <Grid item xs={6}>\r\n                                     <Typography>Saved Image:</Typography>\r\n-                                    <img src={savedImage} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n+                                    <img src={savedImage ? savedImage : Images.girl} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n                                 </Grid>\r\n                             )}\r\n \r\n                         </Grid>\r\n"
                },
                {
                    "date": 1743363716519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1275,9 +1275,9 @@\n                                         </Button>\r\n                                     </Grid>\r\n                                 </Grid>\r\n                             </Grid>\r\n-                            {markingLoader ? <Grid item xs={6}>\r\n+                            {markingLoader ? <Grid item display={'flex'} xs={6}>\r\n                                 <CircularProgress size={50} />\r\n                             </Grid> : (\r\n                                 <Grid item xs={6}>\r\n                                     <Typography>Saved Image:</Typography>\r\n"
                },
                {
                    "date": 1743363731977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1275,9 +1275,9 @@\n                                         </Button>\r\n                                     </Grid>\r\n                                 </Grid>\r\n                             </Grid>\r\n-                            {markingLoader ? <Grid item display={'flex'} xs={6}>\r\n+                            {markingLoader ? <Grid item display={'flex'} justifyContent={'center'} alignItems={'center'} xs={6}>\r\n                                 <CircularProgress size={50} />\r\n                             </Grid> : (\r\n                                 <Grid item xs={6}>\r\n                                     <Typography>Saved Image:</Typography>\r\n"
                },
                {
                    "date": 1743363749430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1275,9 +1275,9 @@\n                                         </Button>\r\n                                     </Grid>\r\n                                 </Grid>\r\n                             </Grid>\r\n-                            {markingLoader ? <Grid item display={'flex'} justifyContent={'center'} alignItems={'center'} xs={6}>\r\n+                            {markingLoader ? <Grid item display={'flex'} justifyContent={'flex-start'} alignItems={'center'} xs={6}>\r\n                                 <CircularProgress size={50} />\r\n                             </Grid> : (\r\n                                 <Grid item xs={6}>\r\n                                     <Typography>Saved Image:</Typography>\r\n"
                },
                {
                    "date": 1743363783396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1264,9 +1264,9 @@\n                                     />\r\n                                 </div>\r\n                                 <Grid container spacing={1} mt={1}>\r\n                                     <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClearMarking}>\r\n+                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClearMarking} sx={{textTransform:'capitalize'}}>\r\n                                             Clear Marking\r\n                                         </Button>\r\n                                     </Grid>\r\n                                     <Grid item>\r\n"
                },
                {
                    "date": 1743363836972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1269,9 +1269,9 @@\n                                             Clear Marking\r\n                                         </Button>\r\n                                     </Grid>\r\n                                     <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSaveMarking}>\r\n+                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSaveMarking}  sx={{textTransform:'capitalize'}}>\r\n                                             Save Marking\r\n                                         </Button>\r\n                                     </Grid>\r\n                                 </Grid>\r\n@@ -2043,9 +2043,9 @@\n                             ))}\r\n                         </LocalizationProvider>\r\n \r\n                         <Grid p={2}>\r\n-                            <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n+                            <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 ,textTransform:'capitalize'}}>\r\n                                 Add More Further Records\r\n                             </Button>\r\n                         </Grid>\r\n                         <Grid container p={1}>\r\n"
                },
                {
                    "date": 1743363857753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1426,9 +1426,9 @@\n                                             Clear Signature\r\n                                         </Button>\r\n                                     </Grid>\r\n                                     <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n+                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}  sx={{textTransform:'capitalize'}}>\r\n                                             Save Signature\r\n                                         </Button>\r\n                                     </Grid>\r\n \r\n"
                },
                {
                    "date": 1743363868051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1421,9 +1421,9 @@\n                                     }}\r\n                                 />\r\n                                 <Grid container spacing={1} mt={1}>\r\n                                     <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n+                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}  sx={{textTransform:'capitalize'}}>\r\n                                             Clear Signature\r\n                                         </Button>\r\n                                     </Grid>\r\n                                     <Grid item>\r\n@@ -2017,14 +2017,14 @@\n \r\n                                         </Box>\r\n                                         <Grid container spacing={1} mt={1}>\r\n                                             <Grid item>\r\n-                                                <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)}>\r\n+                                                <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)}  sx={{textTransform:'capitalize'}}>\r\n                                                     Clear Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n                                             <Grid item>\r\n-                                                <Button variant=\"contained\" color=\"primary\" onClick={() => updateSignature(index)}>\r\n+                                                <Button variant=\"contained\" color=\"primary\" onClick={() => updateSignature(index)}  sx={{textTransform:'capitalize'}}>\r\n                                                     Save Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n \r\n"
                },
                {
                    "date": 1743363967024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,8 +349,9 @@\n                 treatment_record: fields,\r\n                 extra_notes: getValues('extranotes'),\r\n                 permission_marketing: permissions?.marketing,\r\n                 offers: permissions?.offers,\r\n+                facial_mapping:savedImage\r\n \r\n \r\n             };\r\n \r\n"
                },
                {
                    "date": 1743364161778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -683,8 +683,31 @@\n         } catch (error) {\r\n             console.error(\"Error fetching location:\", error);\r\n         }\r\n     };\r\n+    const getForms = async () => {\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 999\r\n+            };\r\n+\r\n+            const data = await ApiServices.getPatients(params);\r\n+\r\n+\r\n+\r\n+            setPatients(\r\n+                data?.data?.patients?.map((doc) => ({\r\n+                    ...doc,\r\n+                    id: doc?._id, // Example transformation\r\n+                    name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n+                }))\r\n+            );\r\n+\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n+        }\r\n+    };\r\n     useEffect(() => {\r\n         getPatients()\r\n         getDocuments()\r\n     }, [])\r\n"
                },
                {
                    "date": 1743364179602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -690,9 +690,9 @@\n                 page: 1,\r\n                 limit: 999\r\n             };\r\n \r\n-            const data = await ApiServices.getPatients(params);\r\n+            const data = await ApiServices.getConsentForms(params);\r\n \r\n \r\n \r\n             setPatients(\r\n"
                },
                {
                    "date": 1743364186438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -694,9 +694,9 @@\n             const data = await ApiServices.getConsentForms(params);\r\n \r\n \r\n \r\n-            setPatients(\r\n+            setForms(\r\n                 data?.data?.patients?.map((doc) => ({\r\n                     ...doc,\r\n                     id: doc?._id, // Example transformation\r\n                     name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n"
                },
                {
                    "date": 1743364220607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -695,12 +695,12 @@\n \r\n \r\n \r\n             setForms(\r\n-                data?.data?.patients?.map((doc) => ({\r\n+                data?.data?.forms?.map((doc) => ({\r\n                     ...doc,\r\n                     id: doc?._id, // Example transformation\r\n-                    name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n+                    name:  doc?.first_name + ' ' + doc?.last_name, // Another example\r\n                 }))\r\n             );\r\n \r\n         } catch (error) {\r\n"
                },
                {
                    "date": 1743364237070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,9 @@\n     const [beforeImages, setBeforeImages] = useState([])\r\n     const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n     const [afterImages, setAfterImages] = useState([])\r\n     const [imageLoaderAfter, setImageLoaderAfter] = useState(false)\r\n+    const [forms, setForms] = useState([])\r\n \r\n     // Handle Save Signature\r\n     const handleSave = async () => {\r\n         if (sigCanvas.current) {\r\n"
                },
                {
                    "date": 1743364246580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -755,9 +755,9 @@\n                             <SelectField\r\n                                 size={'small'}\r\n                                 newLabel={'Select Form'}\r\n                                 fullWidth={true}\r\n-                                options={[]}\r\n+                                options={forms}\r\n                                 selected={title}\r\n                                 onSelect={(value) => {\r\n                                     setTitle(value)\r\n \r\n"
                },
                {
                    "date": 1743364260038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -756,11 +756,11 @@\n                                 size={'small'}\r\n                                 newLabel={'Select Form'}\r\n                                 fullWidth={true}\r\n                                 options={forms}\r\n-                                selected={title}\r\n+                                selected={selectedForm}\r\n                                 onSelect={(value) => {\r\n-                                    setTitle(value)\r\n+                                    setSelectedForm(value)\r\n \r\n \r\n                                 }}\r\n                                 error={errors?.title?.message}\r\n"
                },
                {
                    "date": 1743364284750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,9 @@\n     const [beforeImages, setBeforeImages] = useState([])\r\n     const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n     const [afterImages, setAfterImages] = useState([])\r\n     const [imageLoaderAfter, setImageLoaderAfter] = useState(false)\r\n+    const [selectedForm, setSelectedForm] = useState(null)\r\n     const [forms, setForms] = useState([])\r\n \r\n     // Handle Save Signature\r\n     const handleSave = async () => {\r\n@@ -762,10 +763,10 @@\n                                     setSelectedForm(value)\r\n \r\n \r\n                                 }}\r\n-                                error={errors?.title?.message}\r\n-                                register={register(\"title\", {\r\n+                                error={errors?.form?.message}\r\n+                                register={register(\"form\", {\r\n                                     required: false,\r\n                                 })}\r\n                             />\r\n \r\n"
                },
                {
                    "date": 1743364308324,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -709,8 +709,9 @@\n             console.error(\"Error fetching location:\", error);\r\n         }\r\n     };\r\n     useEffect(() => {\r\n+        getForms()\r\n         getPatients()\r\n         getDocuments()\r\n     }, [])\r\n     useEffect(() => {\r\n"
                },
                {
                    "date": 1743364463925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -310,9 +310,9 @@\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n                 patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n-                form_id: null,\r\n+                form_id: selectedForm?.id,\r\n                 aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n                 treatment_date: getValues('treatmentDate'),\r\n                 consultation_date: getValues('consultationDate'),\r\n                 first_name: getValues('fname'),\r\n"
                },
                {
                    "date": 1743662741367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -356,29 +356,29 @@\n \r\n \r\n             };\r\n \r\n-            const promise = ApiServices.CreateForm(obj);\r\n+            // const promise = ApiServices.CreateForm(obj);\r\n \r\n-            // Handle the API response properly\r\n-            const response = await promise;\r\n-            console.log(response);\r\n+            // // Handle the API response properly\r\n+            // const response = await promise;\r\n+            // console.log(response);\r\n \r\n-            showPromiseToast(\r\n-                promise,\r\n-                \"Saving...\",\r\n-                \"Added Successfully\",\r\n-                \"Something Went Wrong\"\r\n-            );\r\n+            // showPromiseToast(\r\n+            //     promise,\r\n+            //     \"Saving...\",\r\n+            //     \"Added Successfully\",\r\n+            //     \"Something Went Wrong\"\r\n+            // );\r\n \r\n-            // Navigate if response is successful\r\n-            if (response?.responseCode === 200) {\r\n-                console.log(response);\r\n-                setImageURL(null)\r\n-                navigate('/consent-forms')\r\n+            // // Navigate if response is successful\r\n+            // if (response?.responseCode === 200) {\r\n+            //     console.log(response);\r\n+            //     setImageURL(null)\r\n+            //     navigate('/consent-forms')\r\n \r\n \r\n-            }\r\n+            // }\r\n \r\n         } catch (error) {\r\n             console.log(error);\r\n             showErrorToast(error)\r\n"
                },
                {
                    "date": 1743662751888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -355,8 +355,9 @@\n                 facial_mapping:savedImage\r\n \r\n \r\n             };\r\n+console.log(obj);\r\n \r\n             // const promise = ApiServices.CreateForm(obj);\r\n \r\n             // // Handle the API response properly\r\n"
                },
                {
                    "date": 1743662897766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,10 +305,12 @@\n             console.log(error);\r\n \r\n         }\r\n     };\r\n-    const CreateConsentForm = async () => {\r\n+    const CreateConsentForm = async (formData) => {\r\n         setLoader(true);\r\n+        console.log();\r\n+        \r\n         try {\r\n             let obj = {\r\n                 patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n                 form_id: selectedForm?.id,\r\n@@ -351,13 +353,13 @@\n                 treatment_record: fields,\r\n                 extra_notes: getValues('extranotes'),\r\n                 permission_marketing: permissions?.marketing,\r\n                 offers: permissions?.offers,\r\n-                facial_mapping:savedImage\r\n+                facial_mapping: savedImage\r\n \r\n \r\n             };\r\n-console.log(obj);\r\n+            console.log(obj);\r\n \r\n             // const promise = ApiServices.CreateForm(obj);\r\n \r\n             // // Handle the API response properly\r\n@@ -701,9 +703,9 @@\n             setForms(\r\n                 data?.data?.forms?.map((doc) => ({\r\n                     ...doc,\r\n                     id: doc?._id, // Example transformation\r\n-                    name:  doc?.first_name + ' ' + doc?.last_name, // Another example\r\n+                    name: doc?.first_name + ' ' + doc?.last_name, // Another example\r\n                 }))\r\n             );\r\n \r\n         } catch (error) {\r\n@@ -1292,14 +1294,14 @@\n                                     />\r\n                                 </div>\r\n                                 <Grid container spacing={1} mt={1}>\r\n                                     <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClearMarking} sx={{textTransform:'capitalize'}}>\r\n+                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClearMarking} sx={{ textTransform: 'capitalize' }}>\r\n                                             Clear Marking\r\n                                         </Button>\r\n                                     </Grid>\r\n                                     <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSaveMarking}  sx={{textTransform:'capitalize'}}>\r\n+                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSaveMarking} sx={{ textTransform: 'capitalize' }}>\r\n                                             Save Marking\r\n                                         </Button>\r\n                                     </Grid>\r\n                                 </Grid>\r\n@@ -1449,14 +1451,14 @@\n                                     }}\r\n                                 />\r\n                                 <Grid container spacing={1} mt={1}>\r\n                                     <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}  sx={{textTransform:'capitalize'}}>\r\n+                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear} sx={{ textTransform: 'capitalize' }}>\r\n                                             Clear Signature\r\n                                         </Button>\r\n                                     </Grid>\r\n                                     <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}  sx={{textTransform:'capitalize'}}>\r\n+                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave} sx={{ textTransform: 'capitalize' }}>\r\n                                             Save Signature\r\n                                         </Button>\r\n                                     </Grid>\r\n \r\n@@ -2045,14 +2047,14 @@\n \r\n                                         </Box>\r\n                                         <Grid container spacing={1} mt={1}>\r\n                                             <Grid item>\r\n-                                                <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)}  sx={{textTransform:'capitalize'}}>\r\n+                                                <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)} sx={{ textTransform: 'capitalize' }}>\r\n                                                     Clear Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n                                             <Grid item>\r\n-                                                <Button variant=\"contained\" color=\"primary\" onClick={() => updateSignature(index)}  sx={{textTransform:'capitalize'}}>\r\n+                                                <Button variant=\"contained\" color=\"primary\" onClick={() => updateSignature(index)} sx={{ textTransform: 'capitalize' }}>\r\n                                                     Save Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n \r\n@@ -2071,9 +2073,9 @@\n                             ))}\r\n                         </LocalizationProvider>\r\n \r\n                         <Grid p={2}>\r\n-                            <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 ,textTransform:'capitalize'}}>\r\n+                            <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2, textTransform: 'capitalize' }}>\r\n                                 Add More Further Records\r\n                             </Button>\r\n                         </Grid>\r\n                         <Grid container p={1}>\r\n"
                },
                {
                    "date": 1743662939045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -307,9 +307,9 @@\n         }\r\n     };\r\n     const CreateConsentForm = async (formData) => {\r\n         setLoader(true);\r\n-        console.log();\r\n+        console.log(formData);\r\n         \r\n         try {\r\n             let obj = {\r\n                 patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n@@ -348,9 +348,9 @@\n                 },\r\n                 batch_images: uploadedImages,\r\n                 before_images: beforeImages,\r\n                 after_images: afterImages,\r\n-                further_treatment: furtherFields,\r\n+                further_treatment: fromData?.furtherFields,\r\n                 treatment_record: fields,\r\n                 extra_notes: getValues('extranotes'),\r\n                 permission_marketing: permissions?.marketing,\r\n                 offers: permissions?.offers,\r\n"
                },
                {
                    "date": 1743662947216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -305,11 +305,11 @@\n             console.log(error);\r\n \r\n         }\r\n     };\r\n-    const CreateConsentForm = async (formData) => {\r\n+    const CreateConsentForm = async (fromData) => {\r\n         setLoader(true);\r\n-        console.log(formData);\r\n+        console.log(fromData);\r\n         \r\n         try {\r\n             let obj = {\r\n                 patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n"
                },
                {
                    "date": 1743662956151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,9 +349,9 @@\n                 batch_images: uploadedImages,\r\n                 before_images: beforeImages,\r\n                 after_images: afterImages,\r\n                 further_treatment: fromData?.furtherFields,\r\n-                treatment_record: fields,\r\n+                treatment_record: fromData?.records,\r\n                 extra_notes: getValues('extranotes'),\r\n                 permission_marketing: permissions?.marketing,\r\n                 offers: permissions?.offers,\r\n                 facial_mapping: savedImage\r\n"
                },
                {
                    "date": 1743662994746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -359,29 +359,29 @@\n \r\n             };\r\n             console.log(obj);\r\n \r\n-            // const promise = ApiServices.CreateForm(obj);\r\n+            const promise = ApiServices.CreateForm(obj);\r\n \r\n-            // // Handle the API response properly\r\n-            // const response = await promise;\r\n-            // console.log(response);\r\n+            // Handle the API response properly\r\n+            const response = await promise;\r\n+            console.log(response);\r\n \r\n-            // showPromiseToast(\r\n-            //     promise,\r\n-            //     \"Saving...\",\r\n-            //     \"Added Successfully\",\r\n-            //     \"Something Went Wrong\"\r\n-            // );\r\n+            showPromiseToast(\r\n+                promise,\r\n+                \"Saving...\",\r\n+                \"Added Successfully\",\r\n+                \"Something Went Wrong\"\r\n+            );\r\n \r\n-            // // Navigate if response is successful\r\n-            // if (response?.responseCode === 200) {\r\n-            //     console.log(response);\r\n-            //     setImageURL(null)\r\n-            //     navigate('/consent-forms')\r\n+            // Navigate if response is successful\r\n+            if (response?.responseCode === 200) {\r\n+                console.log(response);\r\n+                setImageURL(null)\r\n+                navigate('/consent-forms')\r\n \r\n \r\n-            // }\r\n+            }\r\n \r\n         } catch (error) {\r\n             console.log(error);\r\n             showErrorToast(error)\r\n"
                },
                {
                    "date": 1744022393974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n \r\n                 console.log(response?.data?.data?.path);\r\n \r\n \r\n-                setSavedImage('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+                setSavedImage( response?.data?.data?.path);\r\n \r\n \r\n             } catch (error) {\r\n                 console.log(error);\r\n"
                },
                {
                    "date": 1744022413915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1310,9 +1310,9 @@\n                                 <CircularProgress size={50} />\r\n                             </Grid> : (\r\n                                 <Grid item xs={6}>\r\n                                     <Typography>Saved Image:</Typography>\r\n-                                    <img src={savedImage ? savedImage : Images.girl} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n+                                    <img src={savedImage ? import.meta.env.VITE_BASE_URL+savedImage : Images.girl} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n                                 </Grid>\r\n                             )}\r\n \r\n                         </Grid>\r\n"
                },
                {
                    "date": 1744022448693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1310,9 +1310,9 @@\n                                 <CircularProgress size={50} />\r\n                             </Grid> : (\r\n                                 <Grid item xs={6}>\r\n                                     <Typography>Saved Image:</Typography>\r\n-                                    <img src={savedImage ? import.meta.env.VITE_BASE_URL+savedImage : Images.girl} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n+                                    <img src={savedImage ? savedImage : Images.girl} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n                                 </Grid>\r\n                             )}\r\n \r\n                         </Grid>\r\n"
                },
                {
                    "date": 1744022499106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -513,9 +513,9 @@\n                 );\r\n \r\n                 const imagePath = response?.data?.data?.path;\r\n                 if (imagePath) {\r\n-                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n+                    const fullImageUrl =  imagePath;\r\n                     uploadedNewBatchImages.push(fullImageUrl);\r\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n"
                },
                {
                    "date": 1744022518849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1672,9 +1672,9 @@\n                                 {uploadedImages?.length > 0 &&\r\n                                     uploadedImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n-                                                src={file}\r\n+                                                src={import.meta.env.VITE_BASE_URL+file}\r\n                                                 alt=\"Uploaded Preview\"\r\n                                                 style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                             />\r\n                                             <Typography\r\n"
                },
                {
                    "date": 1744022534620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -562,9 +562,9 @@\n                 );\r\n \r\n                 const imagePath = response?.data?.data?.path;\r\n                 if (imagePath) {\r\n-                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n+                    const fullImageUrl = imagePath;\r\n                     uploadedNewBeforeImages.push(fullImageUrl);\r\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n"
                },
                {
                    "date": 1744022551894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1808,9 +1808,9 @@\n                                 {beforeImages?.length > 0 &&\r\n                                     beforeImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n-                                                src={file}\r\n+                                                src={beforeImages}\r\n                                                 alt=\"Uploaded Preview\"\r\n                                                 style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                             />\r\n                                             <Typography\r\n"
                },
                {
                    "date": 1744022568106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -610,9 +610,9 @@\n                 );\r\n \r\n                 const imagePath = response?.data?.data?.path;\r\n                 if (imagePath) {\r\n-                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n+                    const fullImageUrl =  imagePath;\r\n                     uploadedNewAfterImages.push(fullImageUrl);\r\n                     console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                 }\r\n             }\r\n@@ -1808,9 +1808,9 @@\n                                 {beforeImages?.length > 0 &&\r\n                                     beforeImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n-                                                src={beforeImages}\r\n+                                                src={import.meta.env.VITE_BASE_URL+file}\r\n                                                 alt=\"Uploaded Preview\"\r\n                                                 style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                             />\r\n                                             <Typography\r\n"
                },
                {
                    "date": 1744022581846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1944,9 +1944,9 @@\n                                 {afterImages?.length > 0 &&\r\n                                     afterImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n-                                                src={file}\r\n+                                                src={import.meta.env.VITE_BASE_URL+file}\r\n                                                 alt=\"Uploaded Preview\"\r\n                                                 style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                             />\r\n                                             <Typography\r\n"
                },
                {
                    "date": 1744022730715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n             } catch (error) {\r\n                 console.log(error);\r\n \r\n             }\r\n-            setSavedImage(finalImage);\r\n+      \r\n             setMarkingLoader(false)\r\n         }\r\n     };\r\n     const signCanvasRefs = useRef([]);\r\n"
                },
                {
                    "date": 1744022753788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1310,9 +1310,9 @@\n                                 <CircularProgress size={50} />\r\n                             </Grid> : (\r\n                                 <Grid item xs={6}>\r\n                                     <Typography>Saved Image:</Typography>\r\n-                                    <img src={savedImage ? savedImage : Images.girl} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n+                                    <img src={savedImage ? import.meta.env.VITE_BASE_URL+savedImage : Images.girl} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n                                 </Grid>\r\n                             )}\r\n \r\n                         </Grid>\r\n"
                },
                {
                    "date": 1744022846966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n                     filename: moment().unix() + \"_Mapping.png\"\r\n                 }\r\n \r\n                 const response = await axios.post(\r\n-                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n+                    'import.meta.env.VITE_BASE_URL/api/system/uploadDoc',\r\n                     obj\r\n                 );\r\n \r\n                 console.log(response?.data?.data?.path);\r\n"
                },
                {
                    "date": 1744022871669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,9 +82,9 @@\n                     filename: moment().unix() + \"_Mapping.png\"\r\n                 }\r\n \r\n                 const response = await axios.post(\r\n-                    'import.meta.env.VITE_BASE_URL/api/system/uploadDoc',\r\n+                    `${import.meta.env.VITE_BASE_URL}/api/system/uploadDoc`,\r\n                     obj\r\n                 );\r\n \r\n                 console.log(response?.data?.data?.path);\r\n"
                },
                {
                    "date": 1744022920268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -502,9 +502,9 @@\n \r\n                 console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n \r\n                 const response = await axios.post(\r\n-                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n+                    `https://cosmetic.theappkit.com/api/system/upload`,\r\n                     formData,\r\n                     {\r\n                         headers: {\r\n                             \"Content-Type\": \"multipart/form-data\",\r\n"
                },
                {
                    "date": 1744022937790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -502,9 +502,9 @@\n \r\n                 console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n \r\n                 const response = await axios.post(\r\n-                    `https://cosmetic.theappkit.com/api/system/upload`,\r\n+                    `${import.meta.env.VITE_BASE_URL}/api/system/upload`,\r\n                     formData,\r\n                     {\r\n                         headers: {\r\n                             \"Content-Type\": \"multipart/form-data\",\r\n@@ -551,9 +551,9 @@\n \r\n                 console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n \r\n                 const response = await axios.post(\r\n-                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n+                    `${import.meta.env.VITE_BASE_URL}/api/system/upload`,\r\n                     formData,\r\n                     {\r\n                         headers: {\r\n                             \"Content-Type\": \"multipart/form-data\",\r\n"
                },
                {
                    "date": 1744022952206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -599,9 +599,9 @@\n \r\n                 console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n \r\n                 const response = await axios.post(\r\n-                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n+                    `${import.meta.env.VITE_BASE_URL}/api/system/upload`,\r\n                     formData,\r\n                     {\r\n                         headers: {\r\n                             \"Content-Type\": \"multipart/form-data\",\r\n"
                },
                {
                    "date": 1744023001283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1449,9 +1449,9 @@\n                                         className: \"sigCanvas\",\r\n                                         style: { border: \"1px dashed black\" },\r\n                                     }}\r\n                                 />\r\n-                                <Grid container spacing={1} mt={1}>\r\n+                                {/* <Grid container spacing={1} mt={1}>\r\n                                     <Grid item>\r\n                                         <Button variant=\"contained\" color=\"secondary\" onClick={handleClear} sx={{ textTransform: 'capitalize' }}>\r\n                                             Clear Signature\r\n                                         </Button>\r\n@@ -1461,9 +1461,9 @@\n                                             Save Signature\r\n                                         </Button>\r\n                                     </Grid>\r\n \r\n-                                </Grid>\r\n+                                </Grid> */}\r\n \r\n \r\n                             </Grid>\r\n                         </Grid>\r\n"
                },
                {
                    "date": 1744023007234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2045,9 +2045,9 @@\n                                                 canvasProps={{ width: 300, height: 150, style: { border: \"1px dashed black\" } }}\r\n                                             />\r\n \r\n                                         </Box>\r\n-                                        <Grid container spacing={1} mt={1}>\r\n+                                        {/* <Grid container spacing={1} mt={1}>\r\n                                             <Grid item>\r\n                                                 <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)} sx={{ textTransform: 'capitalize' }}>\r\n                                                     Clear Signature\r\n                                                 </Button>\r\n@@ -2057,9 +2057,9 @@\n                                                     Save Signature\r\n                                                 </Button>\r\n                                             </Grid>\r\n \r\n-                                        </Grid>\r\n+                                        </Grid> */}\r\n                                     </Grid>\r\n \r\n                                     {/* Remove Button */}\r\n                                     <Grid item xs={1} display=\"flex\" justifyContent=\"flex-end\">\r\n"
                },
                {
                    "date": 1744150433177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,740 +1,681 @@\n-import { useEffect, useRef, useState } from \"react\";\r\n-import ApiServices from \"../../../services/Apis\";\r\n-import { PrimaryButton } from \"../../../components/buttons\";\r\n-import { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, FormLabel, Grid, IconButton, InputAdornment, InputLabel, Paper, Radio, RadioGroup, TextField, Typography } from \"@mui/material\";\r\n-import InputField from \"../../../components/input\";\r\n-import { Controller, useFieldArray, useForm } from \"react-hook-form\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n-import axios from \"axios\";\r\n-import { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\";\r\n-import UploadIcon from \"@mui/icons-material/Upload\";\r\n-import OTPInput from \"react-otp-input\";\r\n-import VisibilityIcon from \"@mui/icons-material/Visibility\";\r\n-import VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\n-import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n-import { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\n-import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n-import SelectField from \"../../../components/select\";\r\n-import SignatureCanvas from \"react-signature-canvas\";\r\n-import moment from \"moment\";\r\n-import DeleteIcon from \"@mui/icons-material/Delete\";\r\n-import UploadFileIcon from '@mui/icons-material/UploadFile';\r\n-import CloseIcon from '@mui/icons-material/Close';\r\n-import dayjs from \"dayjs\";\r\n-import { Images } from \"../../../assets/images\";\r\n+\"use client\"\r\n \r\n+import { useEffect, useRef, useState } from \"react\"\r\n+import ApiServices from \"../../../services/Apis\"\r\n+import { PrimaryButton } from \"../../../components/buttons\"\r\n+import {\r\n+  Box,\r\n+  Button,\r\n+  CircularProgress,\r\n+  Divider,\r\n+  FormControl,\r\n+  FormControlLabel,\r\n+  FormLabel,\r\n+  Grid,\r\n+  IconButton,\r\n+  InputLabel,\r\n+  Paper,\r\n+  Radio,\r\n+  RadioGroup,\r\n+  Typography,\r\n+} from \"@mui/material\"\r\n+import InputField from \"../../../components/input\"\r\n+import { Controller, useFieldArray, useForm } from \"react-hook-form\"\r\n+import { useNavigate } from \"react-router-dom\"\r\n+import axios from \"axios\"\r\n+import { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\"\r\n+import { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\"\r\n+import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\"\r\n+import SelectField from \"../../../components/select\"\r\n+import SignatureCanvas from \"react-signature-canvas\"\r\n+import moment from \"moment\"\r\n+import DeleteIcon from \"@mui/icons-material/Delete\"\r\n+import UploadFileIcon from \"@mui/icons-material/UploadFile\"\r\n+import CloseIcon from \"@mui/icons-material/Close\"\r\n+import dayjs from \"dayjs\"\r\n+import { Images } from \"../../../assets/images\"\r\n+\r\n const CreateConsentForm = () => {\r\n-    const navigate = useNavigate()\r\n-    const [markingLoader, setMarkingLoader] = useState(false)\r\n-    const [userData, setUserData] = useState(null)\r\n-    const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n-        defaultValues: {\r\n-            records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n-            furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n-        },\r\n-    });\r\n-    const { fields: furtherFields, append: appendFurther, remove: removeFurther } = useFieldArray({\r\n-        control,\r\n-        name: \"furtherFields\",\r\n-    });\r\n+  const navigate = useNavigate()\r\n+  const [markingLoader, setMarkingLoader] = useState(false)\r\n+  const [userData, setUserData] = useState(null)\r\n+  const {\r\n+    register,\r\n+    control,\r\n+    handleSubmit,\r\n+    setValue,\r\n+    getValues,\r\n+    formState: { errors },\r\n+    reset,\r\n+    watch,\r\n+  } = useForm({\r\n+    defaultValues: {\r\n+      records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n+      furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n+    },\r\n+  })\r\n+  const {\r\n+    fields: furtherFields,\r\n+    append: appendFurther,\r\n+    remove: removeFurther,\r\n+  } = useFieldArray({\r\n+    control,\r\n+    name: \"furtherFields\",\r\n+  })\r\n \r\n-    const { fields, append, remove } = useFieldArray({\r\n-        control,\r\n-        name: \"records\",\r\n-    });\r\n+  const { fields, append, remove } = useFieldArray({\r\n+    control,\r\n+    name: \"records\",\r\n+  })\r\n \r\n-    const sigMarkingRef = useRef(null);\r\n-    const [savedImage, setSavedImage] = useState(null);\r\n+  const sigMarkingRef = useRef(null)\r\n+  const [savedImage, setSavedImage] = useState(null)\r\n \r\n-    const backgroundImage = Images.girl; // Replace with actual image URL\r\n+  const backgroundImage = Images.girl // Replace with actual image URL\r\n \r\n-    useEffect(() => {\r\n-        const canvas = sigMarkingRef.current.getCanvas();\r\n-        const ctx = canvas.getContext(\"2d\");\r\n-        const img = new Image();\r\n-        img.src = backgroundImage;\r\n-        img.onload = () => {\r\n-            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n-        };\r\n-    }, []);\r\n+  useEffect(() => {\r\n+    const canvas = sigMarkingRef.current.getCanvas()\r\n+    const ctx = canvas.getContext(\"2d\")\r\n+    const img = new Image()\r\n+    img.src = backgroundImage\r\n+    img.onload = () => {\r\n+      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n+    }\r\n+  }, [])\r\n \r\n-    const handleClearMarking = () => {\r\n-        const canvas = sigMarkingRef.current.getCanvas();\r\n-        const ctx = canvas.getContext(\"2d\");\r\n-        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n-        const img = new Image();\r\n-        img.src = backgroundImage;\r\n-        img.onload = () => {\r\n-            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n-        };\r\n-    };\r\n+  const handleClearMarking = () => {\r\n+    const canvas = sigMarkingRef.current.getCanvas()\r\n+    const ctx = canvas.getContext(\"2d\")\r\n+    ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n+    const img = new Image()\r\n+    img.src = backgroundImage\r\n+    img.onload = () => {\r\n+      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n+    }\r\n+  }\r\n \r\n-    const handleSaveMarking = async () => {\r\n-        setMarkingLoader(true)\r\n-        if (sigMarkingRef.current) {\r\n-            const canvas = await sigMarkingRef.current.getCanvas();\r\n-            const finalImage = await canvas.toDataURL(\"image/png\");\r\n-            try {\r\n-\r\n-\r\n-                let obj = {\r\n-                    document: finalImage,\r\n-                    filename: moment().unix() + \"_Mapping.png\"\r\n-                }\r\n-\r\n-                const response = await axios.post(\r\n-                    `${import.meta.env.VITE_BASE_URL}/api/system/uploadDoc`,\r\n-                    obj\r\n-                );\r\n-\r\n-                console.log(response?.data?.data?.path);\r\n-\r\n-\r\n-                setSavedImage( response?.data?.data?.path);\r\n-\r\n-\r\n-            } catch (error) {\r\n-                console.log(error);\r\n-\r\n-            }\r\n-      \r\n-            setMarkingLoader(false)\r\n+  const handleSaveMarking = async () => {\r\n+    setMarkingLoader(true)\r\n+    if (sigMarkingRef.current) {\r\n+      const canvas = await sigMarkingRef.current.getCanvas()\r\n+      const finalImage = await canvas.toDataURL(\"image/png\")\r\n+      try {\r\n+        const obj = {\r\n+          document: finalImage,\r\n+          filename: moment().unix() + \"_Mapping.png\",\r\n         }\r\n-    };\r\n-    const signCanvasRefs = useRef([]);\r\n \r\n-    // Clear Signature Function\r\n-    const clearSignature = (index) => {\r\n-        if (signCanvasRefs.current[index]) {\r\n-            signCanvasRefs.current[index].clear();\r\n-            setValue(`furtherFields.${index}.sign`, \"\");\r\n-        }\r\n-    };\r\n-    // Function to update signature in the form state\r\n-    const updateSignature = async (index) => {\r\n-        if (signCanvasRefs.current[index]) {\r\n-            const signData = await signCanvasRefs.current[index].toDataURL();\r\n-            setValue(`furtherFields.${index}.sign`, signData);\r\n-            try {\r\n-                const file = signData;\r\n-                if (file) {\r\n-                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n-                }\r\n+        const response = await axios.post(`${import.meta.env.VITE_BASE_URL}/api/system/uploadDoc`, obj)\r\n \r\n-                let obj = {\r\n-                    document: signData,\r\n-                    filename: moment().unix() + \"_Sign.png\"\r\n-                }\r\n+        console.log(response?.data?.data?.path)\r\n \r\n-                const response = await axios.post(\r\n-                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n-                    obj\r\n-                );\r\n+        setSavedImage(response?.data?.data?.path)\r\n+      } catch (error) {\r\n+        console.log(error)\r\n+      }\r\n \r\n-                console.log(response?.data?.data?.path);\r\n+      setMarkingLoader(false)\r\n+    }\r\n+  }\r\n+  const signCanvasRefs = useRef([])\r\n \r\n-\r\n-                setValue(`furtherFields.${index}.sign`, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n-\r\n-\r\n-            } catch (error) {\r\n-                console.log(error);\r\n-\r\n-            }\r\n+  // Clear Signature Function\r\n+  const clearSignature = (index) => {\r\n+    if (signCanvasRefs.current[index]) {\r\n+      signCanvasRefs.current[index].clear()\r\n+      setValue(`furtherFields.${index}.sign`, \"\")\r\n+    }\r\n+  }\r\n+  // Function to update signature in the form state\r\n+  const updateSignature = async (index) => {\r\n+    if (signCanvasRefs.current[index]) {\r\n+      const signData = await signCanvasRefs.current[index].toDataURL()\r\n+      setValue(`furtherFields.${index}.sign`, signData)\r\n+      try {\r\n+        const file = signData\r\n+        if (file) {\r\n+          setValue(\"image\", file, { shouldValidate: true }) // Set value and trigger validation\r\n         }\r\n-    };\r\n-    const [title, setTitle] = useState(null)\r\n \r\n-    const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n-    const [otp, setOtp] = useState(\"\");\r\n-    const [otpError, setOtpError] = useState(false);\r\n-    const [timer, setTimer] = useState(30);\r\n-    const [isLoading, setIsLoading] = useState(false);\r\n-    const [open, setOpen] = useState(false)\r\n-    const [password, setPassword] = useState(\"\");\r\n-    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n-\r\n-    const [showPassword2, setShowPassword2] = useState(false);\r\n-    const [otpToken, setOtpToken] = useState(null)\r\n-    const [showPassword, setShowPassword] = useState(false);\r\n-    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n-    const [patientType, setPatientType] = useState(\"existing\");\r\n-    const [patients, setPatients] = useState([])\r\n-    const [selectedPatient, setSelectedPatient] = useState(null)\r\n-    const [documents, setDocuments] = useState([])\r\n-    const [selectedDocument, setSelectedDocument] = useState(null)\r\n-    const sigCanvas = useRef(null);\r\n-    const [signature, setSignature] = useState(null);\r\n-    const [uploadedImages, setUploadedImages] = useState([])\r\n-    const [imageLoader, setImageLoader] = useState(false)\r\n-    const [beforeImages, setBeforeImages] = useState([])\r\n-    const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n-    const [afterImages, setAfterImages] = useState([])\r\n-    const [imageLoaderAfter, setImageLoaderAfter] = useState(false)\r\n-    const [selectedForm, setSelectedForm] = useState(null)\r\n-    const [forms, setForms] = useState([])\r\n-\r\n-    // Handle Save Signature\r\n-    const handleSave = async () => {\r\n-        if (sigCanvas.current) {\r\n-            const dataURL = await sigCanvas.current.toDataURL();\r\n-            setSignature(dataURL);\r\n-            try {\r\n-                const file = dataURL;\r\n-                if (file) {\r\n-                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n-                }\r\n-\r\n-                let obj = {\r\n-                    document: dataURL,\r\n-                    filename: moment().unix() + \"_Sign.png\"\r\n-                }\r\n-\r\n-                const response = await axios.post(\r\n-                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n-                    obj\r\n-                );\r\n-\r\n-                console.log(response?.data?.data?.path);\r\n-\r\n-                setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n-\r\n-\r\n-            } catch (error) {\r\n-                console.log(error);\r\n-\r\n-            }\r\n+        const obj = {\r\n+          document: signData,\r\n+          filename: moment().unix() + \"_Sign.png\",\r\n         }\r\n-    };\r\n \r\n-    // Handle Clear Signature\r\n-    const handleClear = () => {\r\n-        if (sigCanvas.current) {\r\n-            sigCanvas.current.clear();\r\n-            setSignature(null);\r\n-        }\r\n-    };\r\n-    const [permissions, setPermissions] = useState({\r\n-        marketing: \"\",\r\n-        offers: \"\",\r\n-    });\r\n+        const response = await axios.post(\"https://cosmetic.theappkit.com/api/system/uploadDoc\", obj)\r\n \r\n-    const handleChange2 = (event) => {\r\n-        setPermissions({\r\n-            ...permissions,\r\n-            [event.target.name]: event.target.value,\r\n-        });\r\n-    };\r\n-    const handleChange = (event) => {\r\n-        setPatientType(event.target.value);\r\n-    };\r\n-    const {\r\n-        register: register4,\r\n-        handleSubmit: handleSubmit4,\r\n-        setValue: setValue4,\r\n-        getValues: getValues4,\r\n-        reset: reset4,\r\n-        formState: { errors: errors4 },\r\n-    } = useForm();\r\n+        console.log(response?.data?.data?.path)\r\n \r\n-    // Simulate OTP Submission\r\n-    const handleOtpSubmit = () => {\r\n-        if (otp.length !== 4) {\r\n-            setOtpError(true);\r\n-            return;\r\n-        }\r\n-        setIsLoading(true);\r\n-        setTimeout(() => {\r\n-            setIsLoading(false);\r\n-            SubmitOTP()\r\n-            setStep(2); // Move to reset password step\r\n-        }, 2000);\r\n-    };\r\n+        setValue(`furtherFields.${index}.sign`, \"https://cosmetic.theappkit.com\" + response?.data?.data?.path)\r\n+      } catch (error) {\r\n+        console.log(error)\r\n+      }\r\n+    }\r\n+  }\r\n+  const [title, setTitle] = useState(null)\r\n \r\n-    // Simulate Reset Password Submission\r\n-    const handleResetSubmit = () => {\r\n-        if (password !== confirmPassword) {\r\n-            alert(\"Passwords do not match!\");\r\n-            return;\r\n-        }\r\n-        setIsLoading(true);\r\n-        setTimeout(() => {\r\n-            setIsLoading(false);\r\n-            // Close dialog after password reset\r\n-        }, 2000);\r\n-    };\r\n-    const fileInputRef = useRef(null);\r\n+  const [step, setStep] = useState(1) // 1: OTP, 2: Reset Password\r\n+  const [otp, setOtp] = useState(\"\")\r\n+  const [otpError, setOtpError] = useState(false)\r\n+  const [timer, setTimer] = useState(30)\r\n+  const [isLoading, setIsLoading] = useState(false)\r\n+  const [open, setOpen] = useState(false)\r\n+  const [password, setPassword] = useState(\"\")\r\n+  const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n \r\n-    const [loader, setLoader] = useState(false)\r\n+  const [showPassword2, setShowPassword2] = useState(false)\r\n+  const [otpToken, setOtpToken] = useState(null)\r\n+  const [showPassword, setShowPassword] = useState(false)\r\n+  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\r\n+  const [patientType, setPatientType] = useState(\"existing\")\r\n+  const [patients, setPatients] = useState([])\r\n+  const [selectedPatient, setSelectedPatient] = useState(null)\r\n+  const [documents, setDocuments] = useState([])\r\n+  const [selectedDocument, setSelectedDocument] = useState(null)\r\n+  const sigCanvas = useRef(null)\r\n+  const [signature, setSignature] = useState(null)\r\n+  const [uploadedImages, setUploadedImages] = useState([])\r\n+  const [imageLoader, setImageLoader] = useState(false)\r\n+  const [beforeImages, setBeforeImages] = useState([])\r\n+  const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n+  const [afterImages, setAfterImages] = useState([])\r\n+  const [imageLoaderAfter, setImageLoaderAfter] = useState(false)\r\n+  const [selectedForm, setSelectedForm] = useState(null)\r\n+  const [forms, setForms] = useState([])\r\n \r\n-    const [imageURL, setImageURL] = useState()\r\n-    const [hovered, setHovered] = useState(false);\r\n-\r\n-\r\n-\r\n-\r\n-    const handleImageClick = () => {\r\n-        fileInputRef.current.click();\r\n-    };\r\n-\r\n-    const handleFileChange = async (e) => {\r\n-        try {\r\n-            const file = e.target.files[0];\r\n-            if (file) {\r\n-                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n-            }\r\n-            const formData = new FormData();\r\n-            formData.append(\"document\", e.target.files[0]);\r\n-\r\n-            const response = await axios.post(\r\n-                'https://cosmetic.theappkit.com/api/system/upload',\r\n-                formData,\r\n-                {\r\n-                    headers: {\r\n-                        'Content-Type': 'multipart/form-data'\r\n-                    }\r\n-                }\r\n-            );\r\n-\r\n-            console.log(response?.data?.data?.path);\r\n-\r\n-            setImageURL('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n-\r\n-\r\n-        } catch (error) {\r\n-            console.log(error);\r\n-\r\n+  // Handle Save Signature\r\n+  const handleSave = async () => {\r\n+    if (sigCanvas.current) {\r\n+      const dataURL = await sigCanvas.current.toDataURL()\r\n+      setSignature(dataURL)\r\n+      try {\r\n+        const file = dataURL\r\n+        if (file) {\r\n+          setValue(\"image\", file, { shouldValidate: true }) // Set value and trigger validation\r\n         }\r\n-    };\r\n-    const CreateConsentForm = async (fromData) => {\r\n-        setLoader(true);\r\n-        console.log(fromData);\r\n-        \r\n-        try {\r\n-            let obj = {\r\n-                patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n-                form_id: selectedForm?.id,\r\n-                aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n-                treatment_date: getValues('treatmentDate'),\r\n-                consultation_date: getValues('consultationDate'),\r\n-                first_name: getValues('fname'),\r\n-                last_name: getValues('lname'),\r\n-                dob: getValues('selectedDate'),\r\n-                address: getValues('address'),\r\n-                email: getValues('email'),\r\n-                post_code: getValues('post'),\r\n-                phone: getValues('phone'),\r\n-                notes: getValues('notes'),\r\n-                picture: imageURL,\r\n-                kin_details: {\r\n-                    name: getValues('name'),\r\n-                    address: getValues('kinaddress'),\r\n-                    email: getValues('kinemail'),\r\n-                    phone: getValues('kinphone'),\r\n-                },\r\n-                general_practitioner: {\r\n-                    name: getValues('genname'),\r\n-                    address: getValues('genaddress'),\r\n-                    email: getValues('genemail'),\r\n-                    phone: getValues('genphone'),\r\n-                },\r\n-                treatment_plan: {\r\n-                    patient_concerns: getValues('patientConcerns'),\r\n-                    patient_goals: getValues('patientGoal'),\r\n-                    advised_plan: getValues('advisedPlan'),\r\n-                    expected_result: getValues('expectedResult'),\r\n-                    date: getValues('patientDate'),\r\n-                    patient_sign: signature\r\n-                },\r\n-                batch_images: uploadedImages,\r\n-                before_images: beforeImages,\r\n-                after_images: afterImages,\r\n-                further_treatment: fromData?.furtherFields,\r\n-                treatment_record: fromData?.records,\r\n-                extra_notes: getValues('extranotes'),\r\n-                permission_marketing: permissions?.marketing,\r\n-                offers: permissions?.offers,\r\n-                facial_mapping: savedImage\r\n \r\n-\r\n-            };\r\n-            console.log(obj);\r\n-\r\n-            const promise = ApiServices.CreateForm(obj);\r\n-\r\n-            // Handle the API response properly\r\n-            const response = await promise;\r\n-            console.log(response);\r\n-\r\n-            showPromiseToast(\r\n-                promise,\r\n-                \"Saving...\",\r\n-                \"Added Successfully\",\r\n-                \"Something Went Wrong\"\r\n-            );\r\n-\r\n-            // Navigate if response is successful\r\n-            if (response?.responseCode === 200) {\r\n-                console.log(response);\r\n-                setImageURL(null)\r\n-                navigate('/consent-forms')\r\n-\r\n-\r\n-            }\r\n-\r\n-        } catch (error) {\r\n-            console.log(error);\r\n-            showErrorToast(error)\r\n-        } finally {\r\n-\r\n-            setLoader(false);\r\n+        const obj = {\r\n+          document: dataURL,\r\n+          filename: moment().unix() + \"_Sign.png\",\r\n         }\r\n-    };\r\n \r\n-    const SendOtp = async (val) => {\r\n-        if (val != 'resend') {\r\n-            setIsLoading(true)\r\n-        }\r\n+        const response = await axios.post(\"https://cosmetic.theappkit.com/api/system/uploadDoc\", obj)\r\n \r\n+        console.log(response?.data?.data?.path)\r\n \r\n-        setTimer(60);\r\n-        try {\r\n-            let obj = {\r\n-                email: userData?.email\r\n-            };\r\n+        setSignature(\"https://cosmetic.theappkit.com\" + response?.data?.data?.path)\r\n+      } catch (error) {\r\n+        console.log(error)\r\n+      }\r\n+    }\r\n+  }\r\n \r\n-            const data = await ApiServices.SendOtp(obj);\r\n-            console.log(data);\r\n-            if (data.responseCode == 206) {\r\n-                setOtp('')\r\n-                showSuccessToast('Otp Sent Successfully')\r\n+  // Handle Clear Signature\r\n+  const handleClear = () => {\r\n+    if (sigCanvas.current) {\r\n+      sigCanvas.current.clear()\r\n+      setSignature(null)\r\n+    }\r\n+  }\r\n+  const [permissions, setPermissions] = useState({\r\n+    marketing: \"\",\r\n+    offers: \"\",\r\n+  })\r\n \r\n-            }\r\n+  const handleChange2 = (event) => {\r\n+    setPermissions({\r\n+      ...permissions,\r\n+      [event.target.name]: event.target.value,\r\n+    })\r\n+  }\r\n+  const handleChange = (event) => {\r\n+    setPatientType(event.target.value)\r\n+  }\r\n+  const {\r\n+    register: register4,\r\n+    handleSubmit: handleSubmit4,\r\n+    setValue: setValue4,\r\n+    getValues: getValues4,\r\n+    reset: reset4,\r\n+    formState: { errors: errors4 },\r\n+  } = useForm()\r\n \r\n-        } catch (error) {\r\n+  // Simulate OTP Submission\r\n+  const handleOtpSubmit = () => {\r\n+    if (otp.length !== 4) {\r\n+      setOtpError(true)\r\n+      return\r\n+    }\r\n+    setIsLoading(true)\r\n+    setTimeout(() => {\r\n+      setIsLoading(false)\r\n+      SubmitOTP()\r\n+      setStep(2) // Move to reset password step\r\n+    }, 2000)\r\n+  }\r\n \r\n-            console.log(error)\r\n-        }\r\n-        finally {\r\n-            setIsLoading(false)\r\n-            setStep(1)\r\n-            setOpen(true)\r\n-\r\n-        }\r\n+  // Simulate Reset Password Submission\r\n+  const handleResetSubmit = () => {\r\n+    if (password !== confirmPassword) {\r\n+      alert(\"Passwords do not match!\")\r\n+      return\r\n     }\r\n+    setIsLoading(true)\r\n+    setTimeout(() => {\r\n+      setIsLoading(false)\r\n+      // Close dialog after password reset\r\n+    }, 2000)\r\n+  }\r\n+  const fileInputRef = useRef(null)\r\n \r\n-    const UpdatePassword = async (sendData, result) => {\r\n-        setIsLoading(true)\r\n-        console.log(otpToken, \"otpToken2\");\r\n-        try {\r\n-            let obj = {\r\n-                otp_token: otpToken,\r\n-                email: userData?.email,\r\n-                password: getValues4('password'),\r\n-                confirm_password: getValues4('confirmPassword'),\r\n-            };\r\n+  const [loader, setLoader] = useState(false)\r\n \r\n-            const data = await ApiServices.SendOtp(obj);\r\n-            console.log(data);\r\n-            if (data.responseCode == 200) {\r\n-                setOtp('')\r\n+  const [imageURL, setImageURL] = useState()\r\n+  const [hovered, setHovered] = useState(false)\r\n \r\n-                reset4()\r\n-                setConfirmPassword(false)\r\n+  const handleImageClick = () => {\r\n+    fileInputRef.current.click()\r\n+  }\r\n \r\n+  const handleFileChange = async (e) => {\r\n+    try {\r\n+      const file = e.target.files[0]\r\n+      if (file) {\r\n+        setValue(\"image\", file, { shouldValidate: true }) // Set value and trigger validation\r\n+      }\r\n+      const formData = new FormData()\r\n+      formData.append(\"document\", e.target.files[0])\r\n \r\n+      const response = await axios.post(\"https://cosmetic.theappkit.com/api/system/upload\", formData, {\r\n+        headers: {\r\n+          \"Content-Type\": \"multipart/form-data\",\r\n+        },\r\n+      })\r\n \r\n-            }\r\n-        } catch (error) {\r\n-            setOtpError(true)\r\n-        }\r\n-        finally {\r\n-            setIsLoading(false)\r\n-            setOpen(false)\r\n-            showSuccessToast('Password Reset Successfully')\r\n-        }\r\n-    };\r\n+      console.log(response?.data?.data?.path)\r\n \r\n-    const SubmitOTP = async (val) => {\r\n+      setImageURL(\"https://cosmetic.theappkit.com\" + response?.data?.data?.path)\r\n+    } catch (error) {\r\n+      console.log(error)\r\n+    }\r\n+  }\r\n+  const CreateConsentForm = async (fromData) => {\r\n+    setLoader(true)\r\n+    console.log(fromData)\r\n \r\n-        setIsLoading(true)\r\n+    try {\r\n+      const obj = {\r\n+        patient_id: patientType == \"existing\" ? selectedPatient?.id : null,\r\n+        form_id: selectedForm?.id,\r\n+        aftercare_document: patientType == \"existing\" ? selectedDocument?._id : null,\r\n+        treatment_date: getValues(\"treatmentDate\"),\r\n+        consultation_date: getValues(\"consultationDate\"),\r\n+        first_name: getValues(\"fname\"),\r\n+        last_name: getValues(\"lname\"),\r\n+        dob: getValues(\"selectedDate\"),\r\n+        address: getValues(\"address\"),\r\n+        email: getValues(\"email\"),\r\n+        post_code: getValues(\"post\"),\r\n+        phone: getValues(\"phone\"),\r\n+        notes: getValues(\"notes\"),\r\n+        picture: imageURL,\r\n+        kin_details: {\r\n+          name: getValues(\"name\"),\r\n+          address: getValues(\"kinaddress\"),\r\n+          email: getValues(\"kinemail\"),\r\n+          phone: getValues(\"kinphone\"),\r\n+        },\r\n+        general_practitioner: {\r\n+          name: getValues(\"genname\"),\r\n+          address: getValues(\"genaddress\"),\r\n+          email: getValues(\"genemail\"),\r\n+          phone: getValues(\"genphone\"),\r\n+        },\r\n+        treatment_plan: {\r\n+          patient_concerns: getValues(\"patientConcerns\"),\r\n+          patient_goals: getValues(\"patientGoal\"),\r\n+          advised_plan: getValues(\"advisedPlan\"),\r\n+          expected_result: getValues(\"expectedResult\"),\r\n+          date: getValues(\"patientDate\"),\r\n+          patient_sign: signature,\r\n+        },\r\n+        batch_images: uploadedImages,\r\n+        before_images: beforeImages,\r\n+        after_images: afterImages,\r\n+        further_treatment: fromData?.furtherFields,\r\n+        treatment_record: fromData?.records,\r\n+        extra_notes: getValues(\"extranotes\"),\r\n+        permission_marketing: permissions?.marketing,\r\n+        offers: permissions?.offers,\r\n+        facial_mapping: savedImage,\r\n+      }\r\n+      console.log(obj)\r\n \r\n+      const promise = ApiServices.CreateForm(obj)\r\n \r\n+      // Handle the API response properly\r\n+      const response = await promise\r\n+      console.log(response)\r\n \r\n-        try {\r\n-            let obj = {\r\n-                email: userData?.email,\r\n-                otp: otp,\r\n-            };\r\n+      showPromiseToast(promise, \"Saving...\", \"Added Successfully\", \"Something Went Wrong\")\r\n \r\n-            const data = await ApiServices.SendOtp(obj);\r\n-            console.log(data?.data, 'tesetttt');\r\n-            if (data.responseCode == 206) {\r\n-                console.log(data);\r\n-                setOtpToken(data?.data?.otp_token)\r\n+      // Navigate if response is successful\r\n+      if (response?.responseCode === 200) {\r\n+        console.log(response)\r\n+        setImageURL(null)\r\n+        navigate(\"/consent-forms\")\r\n+      }\r\n+    } catch (error) {\r\n+      console.log(error)\r\n+      showErrorToast(error)\r\n+    } finally {\r\n+      setLoader(false)\r\n+    }\r\n+  }\r\n \r\n+  const SendOtp = async (val) => {\r\n+    if (val != \"resend\") {\r\n+      setIsLoading(true)\r\n+    }\r\n \r\n-            }\r\n-        } catch (error) {\r\n-            setOtpError(true)\r\n-        }\r\n-        finally {\r\n-            setIsLoading(false)\r\n+    setTimer(60)\r\n+    try {\r\n+      const obj = {\r\n+        email: userData?.email,\r\n+      }\r\n \r\n-        }\r\n-    };\r\n+      const data = await ApiServices.SendOtp(obj)\r\n+      console.log(data)\r\n+      if (data.responseCode == 206) {\r\n+        setOtp(\"\")\r\n+        showSuccessToast(\"Otp Sent Successfully\")\r\n+      }\r\n+    } catch (error) {\r\n+      console.log(error)\r\n+    } finally {\r\n+      setIsLoading(false)\r\n+      setStep(1)\r\n+      setOpen(true)\r\n+    }\r\n+  }\r\n \r\n-    const handleFileChange2 = async (e) => {\r\n-        setUploadedImages([]);\r\n-        setImageLoader(true);\r\n+  const UpdatePassword = async (sendData, result) => {\r\n+    setIsLoading(true)\r\n+    console.log(otpToken, \"otpToken2\")\r\n+    try {\r\n+      const obj = {\r\n+        otp_token: otpToken,\r\n+        email: userData?.email,\r\n+        password: getValues4(\"password\"),\r\n+        confirm_password: getValues4(\"confirmPassword\"),\r\n+      }\r\n \r\n-        try {\r\n-            const files = e.target.files;\r\n-            if (!files || files.length === 0) return; // Exit if no files are selected\r\n+      const data = await ApiServices.SendOtp(obj)\r\n+      console.log(data)\r\n+      if (data.responseCode == 200) {\r\n+        setOtp(\"\")\r\n \r\n-            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n+        reset4()\r\n+        setConfirmPassword(false)\r\n+      }\r\n+    } catch (error) {\r\n+      setOtpError(true)\r\n+    } finally {\r\n+      setIsLoading(false)\r\n+      setOpen(false)\r\n+      showSuccessToast(\"Password Reset Successfully\")\r\n+    }\r\n+  }\r\n \r\n-            const uploadedNewBatchImages = [];\r\n+  const SubmitOTP = async (val) => {\r\n+    setIsLoading(true)\r\n \r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const formData = new FormData();\r\n-                formData.append(\"document\", files[i]);\r\n+    try {\r\n+      const obj = {\r\n+        email: userData?.email,\r\n+        otp: otp,\r\n+      }\r\n \r\n-                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n+      const data = await ApiServices.SendOtp(obj)\r\n+      console.log(data?.data, \"tesetttt\")\r\n+      if (data.responseCode == 206) {\r\n+        console.log(data)\r\n+        setOtpToken(data?.data?.otp_token)\r\n+      }\r\n+    } catch (error) {\r\n+      setOtpError(true)\r\n+    } finally {\r\n+      setIsLoading(false)\r\n+    }\r\n+  }\r\n \r\n-                const response = await axios.post(\r\n-                    `${import.meta.env.VITE_BASE_URL}/api/system/upload`,\r\n-                    formData,\r\n-                    {\r\n-                        headers: {\r\n-                            \"Content-Type\": \"multipart/form-data\",\r\n-                        },\r\n-                    }\r\n-                );\r\n+  const handleFileChange2 = async (e) => {\r\n+    setUploadedImages([])\r\n+    setImageLoader(true)\r\n \r\n-                const imagePath = response?.data?.data?.path;\r\n-                if (imagePath) {\r\n-                    const fullImageUrl =  imagePath;\r\n-                    uploadedNewBatchImages.push(fullImageUrl);\r\n-                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n-                }\r\n-            }\r\n+    try {\r\n+      const files = e.target.files\r\n+      if (!files || files.length === 0) return // Exit if no files are selected\r\n \r\n-            setUploadedImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n-            console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n-        } catch (error) {\r\n-            console.error(\"Error uploading files:\", error);\r\n-        } finally {\r\n-            setImageLoader(false);\r\n-        }\r\n-    };\r\n+      setValue(\"images\", Array.from(files), { shouldValidate: true }) // Ensure files are stored as an array\r\n \r\n-    const handleRemoveImage = (index) => {\r\n-        setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n-    };\r\n+      const uploadedNewBatchImages = []\r\n \r\n-    const handleFileChange3 = async (e) => {\r\n-        setBeforeImages([]);\r\n-        setImageLoaderBefore(true);\r\n+      for (let i = 0; i < files.length; i++) {\r\n+        const formData = new FormData()\r\n+        formData.append(\"document\", files[i])\r\n \r\n-        try {\r\n-            const files = e.target.files;\r\n-            if (!files || files.length === 0) return; // Exit if no files are selected\r\n+        console.log(\"Uploading file:\", files[i].name) // Debugging log\r\n \r\n-            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n+        const response = await axios.post(`${import.meta.env.VITE_BASE_URL}/api/system/upload`, formData, {\r\n+          headers: {\r\n+            \"Content-Type\": \"multipart/form-data\",\r\n+          },\r\n+        })\r\n \r\n-            const uploadedNewBeforeImages = [];\r\n-\r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const formData = new FormData();\r\n-                formData.append(\"document\", files[i]);\r\n-\r\n-                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n-\r\n-                const response = await axios.post(\r\n-                    `${import.meta.env.VITE_BASE_URL}/api/system/upload`,\r\n-                    formData,\r\n-                    {\r\n-                        headers: {\r\n-                            \"Content-Type\": \"multipart/form-data\",\r\n-                        },\r\n-                    }\r\n-                );\r\n-\r\n-                const imagePath = response?.data?.data?.path;\r\n-                if (imagePath) {\r\n-                    const fullImageUrl = imagePath;\r\n-                    uploadedNewBeforeImages.push(fullImageUrl);\r\n-                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n-                }\r\n-            }\r\n-\r\n-            setBeforeImages(uploadedNewBeforeImages); // Update state with uploaded image URLs\r\n-            console.log(\"All Uploaded Images:\", uploadedNewBeforeImages);\r\n-        } catch (error) {\r\n-            console.error(\"Error uploading files:\", error);\r\n-        } finally {\r\n-            setImageLoaderBefore(false);\r\n+        const imagePath = response?.data?.data?.path\r\n+        if (imagePath) {\r\n+          const fullImageUrl = imagePath\r\n+          uploadedNewBatchImages.push(fullImageUrl)\r\n+          console.log(\"Uploaded Image URL:\", fullImageUrl)\r\n         }\r\n-    };\r\n+      }\r\n \r\n-    const handleRemoveImage2 = (index) => {\r\n-        setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n-    };\r\n-    const handleFileChange4 = async (e) => {\r\n-        setAfterImages([]);\r\n-        setImageLoaderAfter(true);\r\n+      setUploadedImages(uploadedNewBatchImages) // Update state with uploaded image URLs\r\n+      console.log(\"All Uploaded Images:\", uploadedNewBatchImages)\r\n+    } catch (error) {\r\n+      console.error(\"Error uploading files:\", error)\r\n+    } finally {\r\n+      setImageLoader(false)\r\n+    }\r\n+  }\r\n \r\n-        try {\r\n-            const files = e.target.files;\r\n-            if (!files || files.length === 0) return; // Exit if no files are selected\r\n+  const handleRemoveImage = (index) => {\r\n+    setUploadedImages((prevImages) => prevImages.filter((_, i) => i !== index))\r\n+  }\r\n \r\n-            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n+  const handleFileChange3 = async (e) => {\r\n+    setBeforeImages([])\r\n+    setImageLoaderBefore(true)\r\n \r\n-            const uploadedNewAfterImages = [];\r\n+    try {\r\n+      const files = e.target.files\r\n+      if (!files || files.length === 0) return // Exit if no files are selected\r\n \r\n-            for (let i = 0; i < files.length; i++) {\r\n-                const formData = new FormData();\r\n-                formData.append(\"document\", files[i]);\r\n+      setValue(\"images\", Array.from(files), { shouldValidate: true }) // Ensure files are stored as an array\r\n \r\n-                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n+      const uploadedNewBeforeImages = []\r\n \r\n-                const response = await axios.post(\r\n-                    `${import.meta.env.VITE_BASE_URL}/api/system/upload`,\r\n-                    formData,\r\n-                    {\r\n-                        headers: {\r\n-                            \"Content-Type\": \"multipart/form-data\",\r\n-                        },\r\n-                    }\r\n-                );\r\n+      for (let i = 0; i < files.length; i++) {\r\n+        const formData = new FormData()\r\n+        formData.append(\"document\", files[i])\r\n \r\n-                const imagePath = response?.data?.data?.path;\r\n-                if (imagePath) {\r\n-                    const fullImageUrl =  imagePath;\r\n-                    uploadedNewAfterImages.push(fullImageUrl);\r\n-                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n-                }\r\n-            }\r\n+        console.log(\"Uploading file:\", files[i].name) // Debugging log\r\n \r\n-            setAfterImages(uploadedNewAfterImages); // Update state with uploaded image URLs\r\n-            console.log(\"All Uploaded Images:\", uploadedNewAfterImages);\r\n-        } catch (error) {\r\n-            console.error(\"Error uploading files:\", error);\r\n-        } finally {\r\n-            setImageLoaderAfter(false);\r\n-        }\r\n-    };\r\n+        const response = await axios.post(`${import.meta.env.VITE_BASE_URL}/api/system/upload`, formData, {\r\n+          headers: {\r\n+            \"Content-Type\": \"multipart/form-data\",\r\n+          },\r\n+        })\r\n \r\n-    const handleRemoveImage3 = (index) => {\r\n-        setAfterImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n-    };\r\n-    useEffect(() => {\r\n-        let interval;\r\n-        if (timer > 0) {\r\n-            interval = setInterval(() => {\r\n-                setTimer((prev) => prev - 1);\r\n-            }, 1000);\r\n-        } else {\r\n-            clearInterval(interval);\r\n+        const imagePath = response?.data?.data?.path\r\n+        if (imagePath) {\r\n+          const fullImageUrl = imagePath\r\n+          uploadedNewBeforeImages.push(fullImageUrl)\r\n+          console.log(\"Uploaded Image URL:\", fullImageUrl)\r\n         }\r\n-        return () => clearInterval(interval);\r\n-    }, [timer]);\r\n+      }\r\n \r\n-    const getDocuments = async () => {\r\n-        try {\r\n-            let params = {\r\n-                page: 1,\r\n-                limit: 999\r\n-            };\r\n+      setBeforeImages(uploadedNewBeforeImages) // Update state with uploaded image URLs\r\n+      console.log(\"All Uploaded Images:\", uploadedNewBeforeImages)\r\n+    } catch (error) {\r\n+      console.error(\"Error uploading files:\", error)\r\n+    } finally {\r\n+      setImageLoaderBefore(false)\r\n+    }\r\n+  }\r\n \r\n-            const data = await ApiServices.getAfterCareDocuments(params);\r\n+  const handleRemoveImage2 = (index) => {\r\n+    setBeforeImages((prevImages) => prevImages.filter((_, i) => i !== index))\r\n+  }\r\n+  const handleFileChange4 = async (e) => {\r\n+    setAfterImages([])\r\n+    setImageLoaderAfter(true)\r\n \r\n+    try {\r\n+      const files = e.target.files\r\n+      if (!files || files.length === 0) return // Exit if no files are selected\r\n \r\n+      setValue(\"images\", Array.from(files), { shouldValidate: true }) // Ensure files are stored as an array\r\n \r\n-            setDocuments(\r\n-                data?.data?.documents?.map((doc) => ({\r\n+      const uploadedNewAfterImages = []\r\n \r\n-                    id: doc?._id, // Example transformation\r\n-                    name: doc.title, // Another example\r\n-                }))\r\n-            );\r\n+      for (let i = 0; i < files.length; i++) {\r\n+        const formData = new FormData()\r\n+        formData.append(\"document\", files[i])\r\n \r\n+        console.log(\"Uploading file:\", files[i].name) // Debugging log\r\n \r\n+        const response = await axios.post(`${import.meta.env.VITE_BASE_URL}/api/system/upload`, formData, {\r\n+          headers: {\r\n+            \"Content-Type\": \"multipart/form-data\",\r\n+          },\r\n+        })\r\n \r\n-        } catch (error) {\r\n-            console.error(\"Error fetching location:\", error);\r\n+        const imagePath = response?.data?.data?.path\r\n+        if (imagePath) {\r\n+          const fullImageUrl = imagePath\r\n+          uploadedNewAfterImages.push(fullImageUrl)\r\n+          console.log(\"Uploaded Image URL:\", fullImageUrl)\r\n         }\r\n-    };\r\n-    const getPatients = async () => {\r\n-        try {\r\n-            let params = {\r\n-                page: 1,\r\n-                limit: 999\r\n-            };\r\n+      }\r\n \r\n-            const data = await ApiServices.getPatients(params);\r\n+      setAfterImages(uploadedNewAfterImages) // Update state with uploaded image URLs\r\n+      console.log(\"All Uploaded Images:\", uploadedNewAfterImages)\r\n+    } catch (error) {\r\n+      console.error(\"Error uploading files:\", error)\r\n+    } finally {\r\n+      setImageLoaderAfter(false)\r\n+    }\r\n+  }\r\n \r\n+  const handleRemoveImage3 = (index) => {\r\n+    setAfterImages((prevImages) => prevImages.filter((_, i) => i !== index))\r\n+  }\r\n+  useEffect(() => {\r\n+    let interval\r\n+    if (timer > 0) {\r\n+      interval = setInterval(() => {\r\n+        setTimer((prev) => prev - 1)\r\n+      }, 1000)\r\n+    } else {\r\n+      clearInterval(interval)\r\n+    }\r\n+    return () => clearInterval(interval)\r\n+  }, [timer])\r\n \r\n+  const getDocuments = async () => {\r\n+    try {\r\n+      const params = {\r\n+        page: 1,\r\n+        limit: 999,\r\n+      }\r\n \r\n-            setPatients(\r\n-                data?.data?.patients?.map((doc) => ({\r\n-                    ...doc,\r\n-                    id: doc?._id, // Example transformation\r\n-                    name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n-                }))\r\n-            );\r\n+      const data = await ApiServices.getAfterCareDocuments(params)\r\n \r\n-        } catch (error) {\r\n-            console.error(\"Error fetching location:\", error);\r\n-        }\r\n-    };\r\n-    const getForms = async () => {\r\n-        try {\r\n-            let params = {\r\n-                page: 1,\r\n-                limit: 999\r\n-            };\r\n+      setDocuments(\r\n+        data?.data?.documents?.map((doc) => ({\r\n+          id: doc?._id, // Example transformation\r\n+          name: doc.title, // Another example\r\n+        })),\r\n+      )\r\n+    } catch (error) {\r\n+      console.error(\"Error fetching location:\", error)\r\n+    }\r\n+  }\r\n+  const getPatients = async () => {\r\n+    try {\r\n+      const params = {\r\n+        page: 1,\r\n+        limit: 999,\r\n+      }\r\n \r\n-            const data = await ApiServices.getConsentForms(params);\r\n+      const data = await ApiServices.getPatients(params)\r\n \r\n+      setPatients(\r\n+        data?.data?.patients?.map((doc) => ({\r\n+          ...doc,\r\n+          id: doc?._id, // Example transformation\r\n+          name: doc.title + \" \" + doc?.first_name + \" \" + doc?.last_name, // Another example\r\n+        })),\r\n+      )\r\n+    } catch (error) {\r\n+      console.error(\"Error fetching location:\", error)\r\n+    }\r\n+  }\r\n+  const getForms = async () => {\r\n+    try {\r\n+      const params = {\r\n+        page: 1,\r\n+        limit: 999,\r\n+      }\r\n \r\n+      const data = await ApiServices.getConsentForms(params)\r\n \r\n-            setForms(\r\n-                data?.data?.forms?.map((doc) => ({\r\n-                    ...doc,\r\n-                    id: doc?._id, // Example transformation\r\n-                    name: doc?.first_name + ' ' + doc?.last_name, // Another example\r\n-                }))\r\n-            );\r\n+      setForms(\r\n+        data?.data?.forms?.map((doc) => ({\r\n+          ...doc,\r\n+          id: doc?._id, // Example transformation\r\n+          name: doc?.first_name + \" \" + doc?.last_name, // Another example\r\n+        })),\r\n+      )\r\n+    } catch (error) {\r\n+      console.error(\"Error fetching location:\", error)\r\n+    }\r\n+  }\r\n+  useEffect(() => {\r\n+    getForms()\r\n+    getPatients()\r\n+    getDocuments()\r\n+  }, [])\r\n+  useEffect(() => {\r\n+    // Disable drawing on the single canvas\r\n+    if (sigCanvas.current) {\r\n+      sigCanvas.current.off()\r\n+    }\r\n \r\n-        } catch (error) {\r\n-            console.error(\"Error fetching location:\", error);\r\n-        }\r\n-    };\r\n-    useEffect(() => {\r\n-        getForms()\r\n-        getPatients()\r\n-        getDocuments()\r\n-    }, [])\r\n-    useEffect(() => {\r\n-        // Disable drawing on the single canvas\r\n-        if (sigCanvas.current) {\r\n-            sigCanvas.current.off();\r\n-        }\r\n+    // Disable drawing on all multiple canvases\r\n+    signCanvasRefs.current.forEach((canvas) => {\r\n+      if (canvas) {\r\n+        canvas.off()\r\n+      }\r\n+    })\r\n+  }, [])\r\n \r\n-        // Disable drawing on all multiple canvases\r\n-        signCanvasRefs.current.forEach((canvas) => {\r\n-            if (canvas) {\r\n-                canvas.off();\r\n-            }\r\n-        });\r\n-    }, []);\r\n+  return (\r\n+    <div>\r\n \r\n-    return (\r\n-        <div>\r\n-\r\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n \r\n \r\n \r\n@@ -745,9 +686,9 @@\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n \r\n-                        <Grid item xs={3} mt={2}>\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n                             <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                 fontSize: \"14px\",\r\n@@ -774,9 +715,9 @@\n                                 })}\r\n                             />\r\n \r\n                         </Grid>\r\n-                        <Grid item xs={3} mt={2}>\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n                                     {/* Single Date Selection */}\r\n                                     <Grid item xs={12}>\r\n@@ -829,9 +770,9 @@\n \r\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n-                        <Grid item xs={3} mt={2}>\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n                                     {/* Single Date Selection */}\r\n                                     <Grid item xs={12}>\r\n@@ -886,9 +827,9 @@\n                             </LocalizationProvider>\r\n                         </Grid>\r\n                         <Grid container p={2} spacing={2} >\r\n \r\n-                            <Grid item xs={3} mt={2}>\r\n+                            <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n                                 <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n@@ -905,9 +846,9 @@\n                                         <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n                             </Grid>\r\n-                            <Grid item xs={3} mt={2}>\r\n+                            <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n                                 {patientType == 'existing' && <> <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n@@ -964,9 +905,9 @@\n                                         })}\r\n                                     />\r\n                                 </>}\r\n                             </Grid>\r\n-                            <Grid item xs={3} mt={2}>\r\n+                            <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n                                 {patientType == 'existing' && <><InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n@@ -993,9 +934,9 @@\n                                         })}\r\n                                     /> </>}\r\n                             </Grid>\r\n                         </Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Patient First Name\"}\r\n                             error={errors?.fname?.message}\r\n@@ -1004,9 +945,9 @@\n                                     \"Please enter your fname.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Patient Last Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\" Patient Last Name\"}\r\n                             error={errors?.lname?.message}\r\n@@ -1015,9 +956,9 @@\n                                     \"Please enter your lname.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Patient Email :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Patient Email\"}\r\n                             error={errors?.email?.message}\r\n@@ -1027,9 +968,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={3} mt={2}>\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n                                     {/* Single Date Selection */}\r\n                                     <Grid item xs={12}>\r\n@@ -1082,9 +1023,9 @@\n \r\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Phone Number :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Phone Number\"}\r\n                             error={errors?.phone?.message}\r\n@@ -1093,9 +1034,9 @@\n                                     \"Please enter your phone.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Post Code :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Post Code\"}\r\n                             error={errors?.post?.message}\r\n@@ -1104,9 +1045,9 @@\n                                     \"Please enter your postcode.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Address :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Address\"}\r\n                             error={errors?.address?.message}\r\n@@ -1115,9 +1056,9 @@\n                                     \"Please enter your address.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Notes :\"}\r\n                             multiline\r\n                             rows={3}\r\n                             size={'small'}\r\n@@ -1138,9 +1079,9 @@\n                     </Typography>\r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n \r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Name :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Name\"}\r\n                             error={errors?.name?.message}\r\n@@ -1150,9 +1091,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Email :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Email\"}\r\n                             error={errors?.kinemail?.message}\r\n@@ -1162,9 +1103,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Phone Number :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Phone Number\"}\r\n                             error={errors?.kinphone?.message}\r\n@@ -1174,9 +1115,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Address :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Address\"}\r\n                             error={errors?.kinaddress?.message}\r\n@@ -1196,9 +1137,9 @@\n                     </Typography>\r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n \r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Name :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Name\"}\r\n                             error={errors?.genname?.message}\r\n@@ -1208,9 +1149,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Email :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Email\"}\r\n                             error={errors?.genemail?.message}\r\n@@ -1220,9 +1161,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Phone Number :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Phone Number\"}\r\n                             error={errors?.genphone?.message}\r\n@@ -1232,9 +1173,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={3} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Address :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Address\"}\r\n                             error={errors?.genaddress?.message}\r\n@@ -1248,9 +1189,9 @@\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n                         <Grid container spacing={2} p={2}>\r\n                             {/* Marketing Permission */}\r\n-                            <Grid item xs={6} mt={2}>\r\n+                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n                                 <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n \r\n                                     <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n@@ -1260,9 +1201,9 @@\n                                 </FormControl>\r\n                             </Grid>\r\n \r\n                             {/* Offers & Reminders Permission */}\r\n-                            <Grid item xs={6} mt={2}>\r\n+                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n                                 <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n \r\n                                     <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n@@ -1278,9 +1219,9 @@\n                         <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n                             Facial Mapping\r\n                         </Typography>\r\n                         <Grid container spacing={2} p={2}>\r\n-                            <Grid item xs={6}>\r\n+                            <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                                 <Typography>Facial Marking:</Typography>\r\n                                 <div style={{ position: \"relative\", width: 300, height: 150 }}>\r\n                                     <SignatureCanvas\r\n                                         ref={sigMarkingRef}\r\n@@ -1305,12 +1246,12 @@\n                                         </Button>\r\n                                     </Grid>\r\n                                 </Grid>\r\n                             </Grid>\r\n-                            {markingLoader ? <Grid item display={'flex'} justifyContent={'flex-start'} alignItems={'center'} xs={6}>\r\n+                            {markingLoader ? <Grid item display={'flex'} justifyContent={'flex-start'} alignItems={'center'} xs={12} sm={12} md={6} lg={6}>\r\n                                 <CircularProgress size={50} />\r\n                             </Grid> : (\r\n-                                <Grid item xs={6}>\r\n+                                <Grid item xs={12} sm={12} md={6} lg={6}>\r\n                                     <Typography>Saved Image:</Typography>\r\n                                     <img src={savedImage ? import.meta.env.VITE_BASE_URL+savedImage : Images.girl} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n                                 </Grid>\r\n                             )}\r\n@@ -1324,9 +1265,9 @@\n                         </Typography>\r\n \r\n                         <Grid container spacing={2} p={2}>\r\n                             {/* Patient Concerns */}\r\n-                            <Grid item xs={6} mt={2}>\r\n+                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n                                 <InputField\r\n                                     label=\"Patient concerns\"\r\n                                     size=\"small\"\r\n                                     placeholder=\"Patient concerns\"\r\n@@ -1337,9 +1278,9 @@\n                                 />\r\n                             </Grid>\r\n \r\n                             {/* Patient Goal */}\r\n-                            <Grid item xs={6} mt={2}>\r\n+                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n                                 <InputField\r\n                                     label=\"Patient goal\"\r\n                                     size=\"small\"\r\n                                     placeholder=\"Patient goal\"\r\n@@ -1350,9 +1291,9 @@\n                                 />\r\n                             </Grid>\r\n \r\n                             {/* Advised Plan/Product */}\r\n-                            <Grid item xs={6} mt={2}>\r\n+                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n                                 <InputField\r\n                                     label=\"Advised Plan/product\"\r\n                                     size=\"small\"\r\n                                     placeholder=\"Advised Plan/product\"\r\n@@ -1363,9 +1304,9 @@\n                                 />\r\n                             </Grid>\r\n \r\n                             {/* Expected Result */}\r\n-                            <Grid item xs={6} mt={2}>\r\n+                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n                                 <InputField\r\n                                     label=\"Expected Result\"\r\n                                     size=\"small\"\r\n                                     placeholder=\"Expected Result\"\r\n@@ -1380,9 +1321,9 @@\n                             I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n                         </Typography>\r\n                         <Grid container spacing={5} p={2} alignItems=\"center\">\r\n                             {/* Date Field */}\r\n-                            <Grid item xs={6} mt={2}>\r\n+                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n                                 <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                     <Grid container spacing={2}>\r\n                                         {/* Single Date Selection */}\r\n                                         <Grid item xs={12}>\r\n@@ -1437,9 +1378,9 @@\n                                 </LocalizationProvider>\r\n                             </Grid>\r\n \r\n                             {/* Signature Canvas */}\r\n-                            <Grid item xs={6} mt={2}>\r\n+                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n                                 <Typography>Patient Signature:</Typography>\r\n                                 <SignatureCanvas\r\n                                     ref={sigCanvas}\r\n                                     penColor=\"black\"\r\n@@ -1478,9 +1419,9 @@\n                             {fields.map((item, index) => (\r\n                                 <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n \r\n                                     {/* Patient Date Selection */}\r\n-                                    <Grid item xs={3}>\r\n+                                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n                                         <Box>\r\n                                             <InputLabel\r\n                                                 sx={{\r\n                                                     textTransform: \"capitalize\",\r\n@@ -1528,9 +1469,9 @@\n                                         </Box>\r\n                                     </Grid>\r\n \r\n                                     {/* Amount Field */}\r\n-                                    <Grid item xs={3} mt={2}>\r\n+                                    <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n                                         <InputField\r\n                                             label=\"Amount\"\r\n                                             placeholder=\"Order Amount\"\r\n                                             size=\"small\"\r\n@@ -1540,9 +1481,9 @@\n \r\n \r\n \r\n                                     {/* Description Field */}\r\n-                                    <Grid item xs={4}>\r\n+                                    <Grid item xs={12} sm={6} md={6} lg={4}>\r\n                                         <InputField\r\n                                             label=\"Description\"\r\n                                             multiline\r\n                                             rows={3}\r\n@@ -1550,9 +1491,9 @@\n                                             register={register(`records.${index}.description`)}\r\n                                         />\r\n                                     </Grid>\r\n                                     {/* Remove Button (only for additional fields) */}\r\n-                                    <Grid item xs={1}>\r\n+                                    <Grid item xs={12} sm={1} md={1} lg={1}>\r\n                                         {index > 0 && (\r\n                                             <IconButton color=\"error\" onClick={() => remove(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n@@ -1576,9 +1517,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={5}>\r\n+                        <Grid item xs={12} sm={12} md={6} lg={5}>\r\n                             <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", mt: 2,\r\n                                 textAlign: \"left\",\r\n                                 fontWeight: 600,\r\n@@ -1672,9 +1613,9 @@\n                                 {uploadedImages?.length > 0 &&\r\n                                     uploadedImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n-                                                src={import.meta.env.VITE_BASE_URL+file}\r\n+                                                src={import.meta.env.VITE_BASE_URL+file || \"/placeholder.svg\"}\r\n                                                 alt=\"Uploaded Preview\"\r\n                                                 style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                             />\r\n                                             <Typography\r\n@@ -1712,9 +1653,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={5}>\r\n+                        <Grid item xs={12} sm={12} md={6} lg={5}>\r\n                             <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", mt: 2,\r\n                                 textAlign: \"left\",\r\n                                 fontWeight: 600,\r\n@@ -1808,9 +1749,9 @@\n                                 {beforeImages?.length > 0 &&\r\n                                     beforeImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n-                                                src={import.meta.env.VITE_BASE_URL+file}\r\n+                                                src={import.meta.env.VITE_BASE_URL+file || \"/placeholder.svg\"}\r\n                                                 alt=\"Uploaded Preview\"\r\n                                                 style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                             />\r\n                                             <Typography\r\n@@ -1848,9 +1789,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={5}>\r\n+                        <Grid item xs={12} sm={12} md={6} lg={5}>\r\n                             <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", mt: 2,\r\n                                 textAlign: \"left\",\r\n                                 fontWeight: 600,\r\n@@ -1927,8 +1868,14 @@\n                                                 {errors.media3.message}\r\n                                             </Typography>\r\n                                         )}\r\n                                     </>\r\n+                                )}\\\r\n+                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n+                                                {errors.media3.message}\r\n+                                            </Typography>\r\n+                                        )}\r\n+                                    </>\r\n                                 )}\r\n                             />\r\n                         </Grid>\r\n \r\n@@ -1944,9 +1891,9 @@\n                                 {afterImages?.length > 0 &&\r\n                                     afterImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n-                                                src={import.meta.env.VITE_BASE_URL+file}\r\n+                                                src={import.meta.env.VITE_BASE_URL+file || \"/placeholder.svg\"}\r\n                                                 alt=\"Uploaded Preview\"\r\n                                                 style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                             />\r\n                                             <Typography\r\n@@ -1990,9 +1937,9 @@\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {furtherFields.map((item, index) => (\r\n                                 <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n                                     {/* Date Selection */}\r\n-                                    <Grid item xs={5}>\r\n+                                    <Grid item xs={12} sm={12} md={6} lg={5}>\r\n                                         <Box>\r\n                                             <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1.5 }}>\r\n                                                 Further Date :*\r\n                                             </InputLabel>\r\n@@ -2033,9 +1980,9 @@\n                                         </Typography>\r\n                                     </Grid>\r\n \r\n                                     {/* Signature Field */}\r\n-                                    <Grid item xs={5}>\r\n+                                    <Grid item xs={12} sm={12} md={6} lg={5}>\r\n                                         <Box>\r\n                                             <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1 }}>\r\n                                                 Signature :*\r\n                                             </InputLabel>\r\n@@ -2061,9 +2008,9 @@\n                                         </Grid> */}\r\n                                     </Grid>\r\n \r\n                                     {/* Remove Button */}\r\n-                                    <Grid item xs={1} display=\"flex\" justifyContent=\"flex-end\">\r\n+                                    <Grid item xs={12} sm={1} md={1} lg={1} display=\"flex\" justifyContent=\"flex-end\">\r\n                                         {furtherFields.length > 1 && (\r\n                                             <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n@@ -2080,9 +2027,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Grid item xs={6} mt={2}><InputField\r\n+                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n                             label={\"Notes :\"}\r\n                             multiline\r\n                             rows={3}\r\n                             size={'small'}\r\n@@ -2100,8 +2047,8 @@\n                     </Box>\r\n                 </Box>\r\n             </Paper>\r\n         </div >\r\n-    )\r\n+  )\r\n }\r\n \r\n export default CreateConsentForm\r\n"
                },
                {
                    "date": 1744150451524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,681 +1,740 @@\n-\"use client\"\r\n+import { useEffect, useRef, useState } from \"react\";\r\n+import ApiServices from \"../../../services/Apis\";\r\n+import { PrimaryButton } from \"../../../components/buttons\";\r\n+import { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, FormLabel, Grid, IconButton, InputAdornment, InputLabel, Paper, Radio, RadioGroup, TextField, Typography } from \"@mui/material\";\r\n+import InputField from \"../../../components/input\";\r\n+import { Controller, useFieldArray, useForm } from \"react-hook-form\";\r\n+import { useNavigate } from \"react-router-dom\";\r\n+import axios from \"axios\";\r\n+import { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\";\r\n+import UploadIcon from \"@mui/icons-material/Upload\";\r\n+import OTPInput from \"react-otp-input\";\r\n+import VisibilityIcon from \"@mui/icons-material/Visibility\";\r\n+import VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\n+import { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\n+import { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\n+import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\n+import SelectField from \"../../../components/select\";\r\n+import SignatureCanvas from \"react-signature-canvas\";\r\n+import moment from \"moment\";\r\n+import DeleteIcon from \"@mui/icons-material/Delete\";\r\n+import UploadFileIcon from '@mui/icons-material/UploadFile';\r\n+import CloseIcon from '@mui/icons-material/Close';\r\n+import dayjs from \"dayjs\";\r\n+import { Images } from \"../../../assets/images\";\r\n \r\n-import { useEffect, useRef, useState } from \"react\"\r\n-import ApiServices from \"../../../services/Apis\"\r\n-import { PrimaryButton } from \"../../../components/buttons\"\r\n-import {\r\n-  Box,\r\n-  Button,\r\n-  CircularProgress,\r\n-  Divider,\r\n-  FormControl,\r\n-  FormControlLabel,\r\n-  FormLabel,\r\n-  Grid,\r\n-  IconButton,\r\n-  InputLabel,\r\n-  Paper,\r\n-  Radio,\r\n-  RadioGroup,\r\n-  Typography,\r\n-} from \"@mui/material\"\r\n-import InputField from \"../../../components/input\"\r\n-import { Controller, useFieldArray, useForm } from \"react-hook-form\"\r\n-import { useNavigate } from \"react-router-dom\"\r\n-import axios from \"axios\"\r\n-import { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\"\r\n-import { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\"\r\n-import { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\"\r\n-import SelectField from \"../../../components/select\"\r\n-import SignatureCanvas from \"react-signature-canvas\"\r\n-import moment from \"moment\"\r\n-import DeleteIcon from \"@mui/icons-material/Delete\"\r\n-import UploadFileIcon from \"@mui/icons-material/UploadFile\"\r\n-import CloseIcon from \"@mui/icons-material/Close\"\r\n-import dayjs from \"dayjs\"\r\n-import { Images } from \"../../../assets/images\"\r\n-\r\n const CreateConsentForm = () => {\r\n-  const navigate = useNavigate()\r\n-  const [markingLoader, setMarkingLoader] = useState(false)\r\n-  const [userData, setUserData] = useState(null)\r\n-  const {\r\n-    register,\r\n-    control,\r\n-    handleSubmit,\r\n-    setValue,\r\n-    getValues,\r\n-    formState: { errors },\r\n-    reset,\r\n-    watch,\r\n-  } = useForm({\r\n-    defaultValues: {\r\n-      records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n-      furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n-    },\r\n-  })\r\n-  const {\r\n-    fields: furtherFields,\r\n-    append: appendFurther,\r\n-    remove: removeFurther,\r\n-  } = useFieldArray({\r\n-    control,\r\n-    name: \"furtherFields\",\r\n-  })\r\n+    const navigate = useNavigate()\r\n+    const [markingLoader, setMarkingLoader] = useState(false)\r\n+    const [userData, setUserData] = useState(null)\r\n+    const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n+        defaultValues: {\r\n+            records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n+            furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n+        },\r\n+    });\r\n+    const { fields: furtherFields, append: appendFurther, remove: removeFurther } = useFieldArray({\r\n+        control,\r\n+        name: \"furtherFields\",\r\n+    });\r\n \r\n-  const { fields, append, remove } = useFieldArray({\r\n-    control,\r\n-    name: \"records\",\r\n-  })\r\n+    const { fields, append, remove } = useFieldArray({\r\n+        control,\r\n+        name: \"records\",\r\n+    });\r\n \r\n-  const sigMarkingRef = useRef(null)\r\n-  const [savedImage, setSavedImage] = useState(null)\r\n+    const sigMarkingRef = useRef(null);\r\n+    const [savedImage, setSavedImage] = useState(null);\r\n \r\n-  const backgroundImage = Images.girl // Replace with actual image URL\r\n+    const backgroundImage = Images.girl; // Replace with actual image URL\r\n \r\n-  useEffect(() => {\r\n-    const canvas = sigMarkingRef.current.getCanvas()\r\n-    const ctx = canvas.getContext(\"2d\")\r\n-    const img = new Image()\r\n-    img.src = backgroundImage\r\n-    img.onload = () => {\r\n-      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n-    }\r\n-  }, [])\r\n+    useEffect(() => {\r\n+        const canvas = sigMarkingRef.current.getCanvas();\r\n+        const ctx = canvas.getContext(\"2d\");\r\n+        const img = new Image();\r\n+        img.src = backgroundImage;\r\n+        img.onload = () => {\r\n+            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n+        };\r\n+    }, []);\r\n \r\n-  const handleClearMarking = () => {\r\n-    const canvas = sigMarkingRef.current.getCanvas()\r\n-    const ctx = canvas.getContext(\"2d\")\r\n-    ctx.clearRect(0, 0, canvas.width, canvas.height)\r\n-    const img = new Image()\r\n-    img.src = backgroundImage\r\n-    img.onload = () => {\r\n-      ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n-    }\r\n-  }\r\n+    const handleClearMarking = () => {\r\n+        const canvas = sigMarkingRef.current.getCanvas();\r\n+        const ctx = canvas.getContext(\"2d\");\r\n+        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n+        const img = new Image();\r\n+        img.src = backgroundImage;\r\n+        img.onload = () => {\r\n+            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\r\n+        };\r\n+    };\r\n \r\n-  const handleSaveMarking = async () => {\r\n-    setMarkingLoader(true)\r\n-    if (sigMarkingRef.current) {\r\n-      const canvas = await sigMarkingRef.current.getCanvas()\r\n-      const finalImage = await canvas.toDataURL(\"image/png\")\r\n-      try {\r\n-        const obj = {\r\n-          document: finalImage,\r\n-          filename: moment().unix() + \"_Mapping.png\",\r\n+    const handleSaveMarking = async () => {\r\n+        setMarkingLoader(true)\r\n+        if (sigMarkingRef.current) {\r\n+            const canvas = await sigMarkingRef.current.getCanvas();\r\n+            const finalImage = await canvas.toDataURL(\"image/png\");\r\n+            try {\r\n+\r\n+\r\n+                let obj = {\r\n+                    document: finalImage,\r\n+                    filename: moment().unix() + \"_Mapping.png\"\r\n+                }\r\n+\r\n+                const response = await axios.post(\r\n+                    `${import.meta.env.VITE_BASE_URL}/api/system/uploadDoc`,\r\n+                    obj\r\n+                );\r\n+\r\n+                console.log(response?.data?.data?.path);\r\n+\r\n+\r\n+                setSavedImage( response?.data?.data?.path);\r\n+\r\n+\r\n+            } catch (error) {\r\n+                console.log(error);\r\n+\r\n+            }\r\n+      \r\n+            setMarkingLoader(false)\r\n         }\r\n+    };\r\n+    const signCanvasRefs = useRef([]);\r\n \r\n-        const response = await axios.post(`${import.meta.env.VITE_BASE_URL}/api/system/uploadDoc`, obj)\r\n+    // Clear Signature Function\r\n+    const clearSignature = (index) => {\r\n+        if (signCanvasRefs.current[index]) {\r\n+            signCanvasRefs.current[index].clear();\r\n+            setValue(`furtherFields.${index}.sign`, \"\");\r\n+        }\r\n+    };\r\n+    // Function to update signature in the form state\r\n+    const updateSignature = async (index) => {\r\n+        if (signCanvasRefs.current[index]) {\r\n+            const signData = await signCanvasRefs.current[index].toDataURL();\r\n+            setValue(`furtherFields.${index}.sign`, signData);\r\n+            try {\r\n+                const file = signData;\r\n+                if (file) {\r\n+                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+                }\r\n \r\n-        console.log(response?.data?.data?.path)\r\n+                let obj = {\r\n+                    document: signData,\r\n+                    filename: moment().unix() + \"_Sign.png\"\r\n+                }\r\n \r\n-        setSavedImage(response?.data?.data?.path)\r\n-      } catch (error) {\r\n-        console.log(error)\r\n-      }\r\n+                const response = await axios.post(\r\n+                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n+                    obj\r\n+                );\r\n \r\n-      setMarkingLoader(false)\r\n-    }\r\n-  }\r\n-  const signCanvasRefs = useRef([])\r\n+                console.log(response?.data?.data?.path);\r\n \r\n-  // Clear Signature Function\r\n-  const clearSignature = (index) => {\r\n-    if (signCanvasRefs.current[index]) {\r\n-      signCanvasRefs.current[index].clear()\r\n-      setValue(`furtherFields.${index}.sign`, \"\")\r\n-    }\r\n-  }\r\n-  // Function to update signature in the form state\r\n-  const updateSignature = async (index) => {\r\n-    if (signCanvasRefs.current[index]) {\r\n-      const signData = await signCanvasRefs.current[index].toDataURL()\r\n-      setValue(`furtherFields.${index}.sign`, signData)\r\n-      try {\r\n-        const file = signData\r\n-        if (file) {\r\n-          setValue(\"image\", file, { shouldValidate: true }) // Set value and trigger validation\r\n+\r\n+                setValue(`furtherFields.${index}.sign`, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+\r\n+\r\n+            } catch (error) {\r\n+                console.log(error);\r\n+\r\n+            }\r\n         }\r\n+    };\r\n+    const [title, setTitle] = useState(null)\r\n \r\n-        const obj = {\r\n-          document: signData,\r\n-          filename: moment().unix() + \"_Sign.png\",\r\n+    const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n+    const [otp, setOtp] = useState(\"\");\r\n+    const [otpError, setOtpError] = useState(false);\r\n+    const [timer, setTimer] = useState(30);\r\n+    const [isLoading, setIsLoading] = useState(false);\r\n+    const [open, setOpen] = useState(false)\r\n+    const [password, setPassword] = useState(\"\");\r\n+    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n+\r\n+    const [showPassword2, setShowPassword2] = useState(false);\r\n+    const [otpToken, setOtpToken] = useState(null)\r\n+    const [showPassword, setShowPassword] = useState(false);\r\n+    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n+    const [patientType, setPatientType] = useState(\"existing\");\r\n+    const [patients, setPatients] = useState([])\r\n+    const [selectedPatient, setSelectedPatient] = useState(null)\r\n+    const [documents, setDocuments] = useState([])\r\n+    const [selectedDocument, setSelectedDocument] = useState(null)\r\n+    const sigCanvas = useRef(null);\r\n+    const [signature, setSignature] = useState(null);\r\n+    const [uploadedImages, setUploadedImages] = useState([])\r\n+    const [imageLoader, setImageLoader] = useState(false)\r\n+    const [beforeImages, setBeforeImages] = useState([])\r\n+    const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n+    const [afterImages, setAfterImages] = useState([])\r\n+    const [imageLoaderAfter, setImageLoaderAfter] = useState(false)\r\n+    const [selectedForm, setSelectedForm] = useState(null)\r\n+    const [forms, setForms] = useState([])\r\n+\r\n+    // Handle Save Signature\r\n+    const handleSave = async () => {\r\n+        if (sigCanvas.current) {\r\n+            const dataURL = await sigCanvas.current.toDataURL();\r\n+            setSignature(dataURL);\r\n+            try {\r\n+                const file = dataURL;\r\n+                if (file) {\r\n+                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+                }\r\n+\r\n+                let obj = {\r\n+                    document: dataURL,\r\n+                    filename: moment().unix() + \"_Sign.png\"\r\n+                }\r\n+\r\n+                const response = await axios.post(\r\n+                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n+                    obj\r\n+                );\r\n+\r\n+                console.log(response?.data?.data?.path);\r\n+\r\n+                setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+\r\n+\r\n+            } catch (error) {\r\n+                console.log(error);\r\n+\r\n+            }\r\n         }\r\n+    };\r\n \r\n-        const response = await axios.post(\"https://cosmetic.theappkit.com/api/system/uploadDoc\", obj)\r\n+    // Handle Clear Signature\r\n+    const handleClear = () => {\r\n+        if (sigCanvas.current) {\r\n+            sigCanvas.current.clear();\r\n+            setSignature(null);\r\n+        }\r\n+    };\r\n+    const [permissions, setPermissions] = useState({\r\n+        marketing: \"\",\r\n+        offers: \"\",\r\n+    });\r\n \r\n-        console.log(response?.data?.data?.path)\r\n+    const handleChange2 = (event) => {\r\n+        setPermissions({\r\n+            ...permissions,\r\n+            [event.target.name]: event.target.value,\r\n+        });\r\n+    };\r\n+    const handleChange = (event) => {\r\n+        setPatientType(event.target.value);\r\n+    };\r\n+    const {\r\n+        register: register4,\r\n+        handleSubmit: handleSubmit4,\r\n+        setValue: setValue4,\r\n+        getValues: getValues4,\r\n+        reset: reset4,\r\n+        formState: { errors: errors4 },\r\n+    } = useForm();\r\n \r\n-        setValue(`furtherFields.${index}.sign`, \"https://cosmetic.theappkit.com\" + response?.data?.data?.path)\r\n-      } catch (error) {\r\n-        console.log(error)\r\n-      }\r\n-    }\r\n-  }\r\n-  const [title, setTitle] = useState(null)\r\n+    // Simulate OTP Submission\r\n+    const handleOtpSubmit = () => {\r\n+        if (otp.length !== 4) {\r\n+            setOtpError(true);\r\n+            return;\r\n+        }\r\n+        setIsLoading(true);\r\n+        setTimeout(() => {\r\n+            setIsLoading(false);\r\n+            SubmitOTP()\r\n+            setStep(2); // Move to reset password step\r\n+        }, 2000);\r\n+    };\r\n \r\n-  const [step, setStep] = useState(1) // 1: OTP, 2: Reset Password\r\n-  const [otp, setOtp] = useState(\"\")\r\n-  const [otpError, setOtpError] = useState(false)\r\n-  const [timer, setTimer] = useState(30)\r\n-  const [isLoading, setIsLoading] = useState(false)\r\n-  const [open, setOpen] = useState(false)\r\n-  const [password, setPassword] = useState(\"\")\r\n-  const [confirmPassword, setConfirmPassword] = useState(\"\")\r\n+    // Simulate Reset Password Submission\r\n+    const handleResetSubmit = () => {\r\n+        if (password !== confirmPassword) {\r\n+            alert(\"Passwords do not match!\");\r\n+            return;\r\n+        }\r\n+        setIsLoading(true);\r\n+        setTimeout(() => {\r\n+            setIsLoading(false);\r\n+            // Close dialog after password reset\r\n+        }, 2000);\r\n+    };\r\n+    const fileInputRef = useRef(null);\r\n \r\n-  const [showPassword2, setShowPassword2] = useState(false)\r\n-  const [otpToken, setOtpToken] = useState(null)\r\n-  const [showPassword, setShowPassword] = useState(false)\r\n-  const [showConfirmPassword, setShowConfirmPassword] = useState(false)\r\n-  const [patientType, setPatientType] = useState(\"existing\")\r\n-  const [patients, setPatients] = useState([])\r\n-  const [selectedPatient, setSelectedPatient] = useState(null)\r\n-  const [documents, setDocuments] = useState([])\r\n-  const [selectedDocument, setSelectedDocument] = useState(null)\r\n-  const sigCanvas = useRef(null)\r\n-  const [signature, setSignature] = useState(null)\r\n-  const [uploadedImages, setUploadedImages] = useState([])\r\n-  const [imageLoader, setImageLoader] = useState(false)\r\n-  const [beforeImages, setBeforeImages] = useState([])\r\n-  const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n-  const [afterImages, setAfterImages] = useState([])\r\n-  const [imageLoaderAfter, setImageLoaderAfter] = useState(false)\r\n-  const [selectedForm, setSelectedForm] = useState(null)\r\n-  const [forms, setForms] = useState([])\r\n+    const [loader, setLoader] = useState(false)\r\n \r\n-  // Handle Save Signature\r\n-  const handleSave = async () => {\r\n-    if (sigCanvas.current) {\r\n-      const dataURL = await sigCanvas.current.toDataURL()\r\n-      setSignature(dataURL)\r\n-      try {\r\n-        const file = dataURL\r\n-        if (file) {\r\n-          setValue(\"image\", file, { shouldValidate: true }) // Set value and trigger validation\r\n+    const [imageURL, setImageURL] = useState()\r\n+    const [hovered, setHovered] = useState(false);\r\n+\r\n+\r\n+\r\n+\r\n+    const handleImageClick = () => {\r\n+        fileInputRef.current.click();\r\n+    };\r\n+\r\n+    const handleFileChange = async (e) => {\r\n+        try {\r\n+            const file = e.target.files[0];\r\n+            if (file) {\r\n+                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n+            }\r\n+            const formData = new FormData();\r\n+            formData.append(\"document\", e.target.files[0]);\r\n+\r\n+            const response = await axios.post(\r\n+                'https://cosmetic.theappkit.com/api/system/upload',\r\n+                formData,\r\n+                {\r\n+                    headers: {\r\n+                        'Content-Type': 'multipart/form-data'\r\n+                    }\r\n+                }\r\n+            );\r\n+\r\n+            console.log(response?.data?.data?.path);\r\n+\r\n+            setImageURL('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n+\r\n+\r\n+        } catch (error) {\r\n+            console.log(error);\r\n+\r\n         }\r\n+    };\r\n+    const CreateConsentForm = async (fromData) => {\r\n+        setLoader(true);\r\n+        console.log(fromData);\r\n+        \r\n+        try {\r\n+            let obj = {\r\n+                patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n+                form_id: selectedForm?.id,\r\n+                aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n+                treatment_date: getValues('treatmentDate'),\r\n+                consultation_date: getValues('consultationDate'),\r\n+                first_name: getValues('fname'),\r\n+                last_name: getValues('lname'),\r\n+                dob: getValues('selectedDate'),\r\n+                address: getValues('address'),\r\n+                email: getValues('email'),\r\n+                post_code: getValues('post'),\r\n+                phone: getValues('phone'),\r\n+                notes: getValues('notes'),\r\n+                picture: imageURL,\r\n+                kin_details: {\r\n+                    name: getValues('name'),\r\n+                    address: getValues('kinaddress'),\r\n+                    email: getValues('kinemail'),\r\n+                    phone: getValues('kinphone'),\r\n+                },\r\n+                general_practitioner: {\r\n+                    name: getValues('genname'),\r\n+                    address: getValues('genaddress'),\r\n+                    email: getValues('genemail'),\r\n+                    phone: getValues('genphone'),\r\n+                },\r\n+                treatment_plan: {\r\n+                    patient_concerns: getValues('patientConcerns'),\r\n+                    patient_goals: getValues('patientGoal'),\r\n+                    advised_plan: getValues('advisedPlan'),\r\n+                    expected_result: getValues('expectedResult'),\r\n+                    date: getValues('patientDate'),\r\n+                    patient_sign: signature\r\n+                },\r\n+                batch_images: uploadedImages,\r\n+                before_images: beforeImages,\r\n+                after_images: afterImages,\r\n+                further_treatment: fromData?.furtherFields,\r\n+                treatment_record: fromData?.records,\r\n+                extra_notes: getValues('extranotes'),\r\n+                permission_marketing: permissions?.marketing,\r\n+                offers: permissions?.offers,\r\n+                facial_mapping: savedImage\r\n \r\n-        const obj = {\r\n-          document: dataURL,\r\n-          filename: moment().unix() + \"_Sign.png\",\r\n+\r\n+            };\r\n+            console.log(obj);\r\n+\r\n+            const promise = ApiServices.CreateForm(obj);\r\n+\r\n+            // Handle the API response properly\r\n+            const response = await promise;\r\n+            console.log(response);\r\n+\r\n+            showPromiseToast(\r\n+                promise,\r\n+                \"Saving...\",\r\n+                \"Added Successfully\",\r\n+                \"Something Went Wrong\"\r\n+            );\r\n+\r\n+            // Navigate if response is successful\r\n+            if (response?.responseCode === 200) {\r\n+                console.log(response);\r\n+                setImageURL(null)\r\n+                navigate('/consent-forms')\r\n+\r\n+\r\n+            }\r\n+\r\n+        } catch (error) {\r\n+            console.log(error);\r\n+            showErrorToast(error)\r\n+        } finally {\r\n+\r\n+            setLoader(false);\r\n         }\r\n+    };\r\n \r\n-        const response = await axios.post(\"https://cosmetic.theappkit.com/api/system/uploadDoc\", obj)\r\n+    const SendOtp = async (val) => {\r\n+        if (val != 'resend') {\r\n+            setIsLoading(true)\r\n+        }\r\n \r\n-        console.log(response?.data?.data?.path)\r\n \r\n-        setSignature(\"https://cosmetic.theappkit.com\" + response?.data?.data?.path)\r\n-      } catch (error) {\r\n-        console.log(error)\r\n-      }\r\n-    }\r\n-  }\r\n+        setTimer(60);\r\n+        try {\r\n+            let obj = {\r\n+                email: userData?.email\r\n+            };\r\n \r\n-  // Handle Clear Signature\r\n-  const handleClear = () => {\r\n-    if (sigCanvas.current) {\r\n-      sigCanvas.current.clear()\r\n-      setSignature(null)\r\n-    }\r\n-  }\r\n-  const [permissions, setPermissions] = useState({\r\n-    marketing: \"\",\r\n-    offers: \"\",\r\n-  })\r\n+            const data = await ApiServices.SendOtp(obj);\r\n+            console.log(data);\r\n+            if (data.responseCode == 206) {\r\n+                setOtp('')\r\n+                showSuccessToast('Otp Sent Successfully')\r\n \r\n-  const handleChange2 = (event) => {\r\n-    setPermissions({\r\n-      ...permissions,\r\n-      [event.target.name]: event.target.value,\r\n-    })\r\n-  }\r\n-  const handleChange = (event) => {\r\n-    setPatientType(event.target.value)\r\n-  }\r\n-  const {\r\n-    register: register4,\r\n-    handleSubmit: handleSubmit4,\r\n-    setValue: setValue4,\r\n-    getValues: getValues4,\r\n-    reset: reset4,\r\n-    formState: { errors: errors4 },\r\n-  } = useForm()\r\n+            }\r\n \r\n-  // Simulate OTP Submission\r\n-  const handleOtpSubmit = () => {\r\n-    if (otp.length !== 4) {\r\n-      setOtpError(true)\r\n-      return\r\n-    }\r\n-    setIsLoading(true)\r\n-    setTimeout(() => {\r\n-      setIsLoading(false)\r\n-      SubmitOTP()\r\n-      setStep(2) // Move to reset password step\r\n-    }, 2000)\r\n-  }\r\n+        } catch (error) {\r\n \r\n-  // Simulate Reset Password Submission\r\n-  const handleResetSubmit = () => {\r\n-    if (password !== confirmPassword) {\r\n-      alert(\"Passwords do not match!\")\r\n-      return\r\n+            console.log(error)\r\n+        }\r\n+        finally {\r\n+            setIsLoading(false)\r\n+            setStep(1)\r\n+            setOpen(true)\r\n+\r\n+        }\r\n     }\r\n-    setIsLoading(true)\r\n-    setTimeout(() => {\r\n-      setIsLoading(false)\r\n-      // Close dialog after password reset\r\n-    }, 2000)\r\n-  }\r\n-  const fileInputRef = useRef(null)\r\n \r\n-  const [loader, setLoader] = useState(false)\r\n+    const UpdatePassword = async (sendData, result) => {\r\n+        setIsLoading(true)\r\n+        console.log(otpToken, \"otpToken2\");\r\n+        try {\r\n+            let obj = {\r\n+                otp_token: otpToken,\r\n+                email: userData?.email,\r\n+                password: getValues4('password'),\r\n+                confirm_password: getValues4('confirmPassword'),\r\n+            };\r\n \r\n-  const [imageURL, setImageURL] = useState()\r\n-  const [hovered, setHovered] = useState(false)\r\n+            const data = await ApiServices.SendOtp(obj);\r\n+            console.log(data);\r\n+            if (data.responseCode == 200) {\r\n+                setOtp('')\r\n \r\n-  const handleImageClick = () => {\r\n-    fileInputRef.current.click()\r\n-  }\r\n+                reset4()\r\n+                setConfirmPassword(false)\r\n \r\n-  const handleFileChange = async (e) => {\r\n-    try {\r\n-      const file = e.target.files[0]\r\n-      if (file) {\r\n-        setValue(\"image\", file, { shouldValidate: true }) // Set value and trigger validation\r\n-      }\r\n-      const formData = new FormData()\r\n-      formData.append(\"document\", e.target.files[0])\r\n \r\n-      const response = await axios.post(\"https://cosmetic.theappkit.com/api/system/upload\", formData, {\r\n-        headers: {\r\n-          \"Content-Type\": \"multipart/form-data\",\r\n-        },\r\n-      })\r\n \r\n-      console.log(response?.data?.data?.path)\r\n+            }\r\n+        } catch (error) {\r\n+            setOtpError(true)\r\n+        }\r\n+        finally {\r\n+            setIsLoading(false)\r\n+            setOpen(false)\r\n+            showSuccessToast('Password Reset Successfully')\r\n+        }\r\n+    };\r\n \r\n-      setImageURL(\"https://cosmetic.theappkit.com\" + response?.data?.data?.path)\r\n-    } catch (error) {\r\n-      console.log(error)\r\n-    }\r\n-  }\r\n-  const CreateConsentForm = async (fromData) => {\r\n-    setLoader(true)\r\n-    console.log(fromData)\r\n+    const SubmitOTP = async (val) => {\r\n \r\n-    try {\r\n-      const obj = {\r\n-        patient_id: patientType == \"existing\" ? selectedPatient?.id : null,\r\n-        form_id: selectedForm?.id,\r\n-        aftercare_document: patientType == \"existing\" ? selectedDocument?._id : null,\r\n-        treatment_date: getValues(\"treatmentDate\"),\r\n-        consultation_date: getValues(\"consultationDate\"),\r\n-        first_name: getValues(\"fname\"),\r\n-        last_name: getValues(\"lname\"),\r\n-        dob: getValues(\"selectedDate\"),\r\n-        address: getValues(\"address\"),\r\n-        email: getValues(\"email\"),\r\n-        post_code: getValues(\"post\"),\r\n-        phone: getValues(\"phone\"),\r\n-        notes: getValues(\"notes\"),\r\n-        picture: imageURL,\r\n-        kin_details: {\r\n-          name: getValues(\"name\"),\r\n-          address: getValues(\"kinaddress\"),\r\n-          email: getValues(\"kinemail\"),\r\n-          phone: getValues(\"kinphone\"),\r\n-        },\r\n-        general_practitioner: {\r\n-          name: getValues(\"genname\"),\r\n-          address: getValues(\"genaddress\"),\r\n-          email: getValues(\"genemail\"),\r\n-          phone: getValues(\"genphone\"),\r\n-        },\r\n-        treatment_plan: {\r\n-          patient_concerns: getValues(\"patientConcerns\"),\r\n-          patient_goals: getValues(\"patientGoal\"),\r\n-          advised_plan: getValues(\"advisedPlan\"),\r\n-          expected_result: getValues(\"expectedResult\"),\r\n-          date: getValues(\"patientDate\"),\r\n-          patient_sign: signature,\r\n-        },\r\n-        batch_images: uploadedImages,\r\n-        before_images: beforeImages,\r\n-        after_images: afterImages,\r\n-        further_treatment: fromData?.furtherFields,\r\n-        treatment_record: fromData?.records,\r\n-        extra_notes: getValues(\"extranotes\"),\r\n-        permission_marketing: permissions?.marketing,\r\n-        offers: permissions?.offers,\r\n-        facial_mapping: savedImage,\r\n-      }\r\n-      console.log(obj)\r\n+        setIsLoading(true)\r\n \r\n-      const promise = ApiServices.CreateForm(obj)\r\n \r\n-      // Handle the API response properly\r\n-      const response = await promise\r\n-      console.log(response)\r\n \r\n-      showPromiseToast(promise, \"Saving...\", \"Added Successfully\", \"Something Went Wrong\")\r\n+        try {\r\n+            let obj = {\r\n+                email: userData?.email,\r\n+                otp: otp,\r\n+            };\r\n \r\n-      // Navigate if response is successful\r\n-      if (response?.responseCode === 200) {\r\n-        console.log(response)\r\n-        setImageURL(null)\r\n-        navigate(\"/consent-forms\")\r\n-      }\r\n-    } catch (error) {\r\n-      console.log(error)\r\n-      showErrorToast(error)\r\n-    } finally {\r\n-      setLoader(false)\r\n-    }\r\n-  }\r\n+            const data = await ApiServices.SendOtp(obj);\r\n+            console.log(data?.data, 'tesetttt');\r\n+            if (data.responseCode == 206) {\r\n+                console.log(data);\r\n+                setOtpToken(data?.data?.otp_token)\r\n \r\n-  const SendOtp = async (val) => {\r\n-    if (val != \"resend\") {\r\n-      setIsLoading(true)\r\n-    }\r\n \r\n-    setTimer(60)\r\n-    try {\r\n-      const obj = {\r\n-        email: userData?.email,\r\n-      }\r\n+            }\r\n+        } catch (error) {\r\n+            setOtpError(true)\r\n+        }\r\n+        finally {\r\n+            setIsLoading(false)\r\n \r\n-      const data = await ApiServices.SendOtp(obj)\r\n-      console.log(data)\r\n-      if (data.responseCode == 206) {\r\n-        setOtp(\"\")\r\n-        showSuccessToast(\"Otp Sent Successfully\")\r\n-      }\r\n-    } catch (error) {\r\n-      console.log(error)\r\n-    } finally {\r\n-      setIsLoading(false)\r\n-      setStep(1)\r\n-      setOpen(true)\r\n-    }\r\n-  }\r\n+        }\r\n+    };\r\n \r\n-  const UpdatePassword = async (sendData, result) => {\r\n-    setIsLoading(true)\r\n-    console.log(otpToken, \"otpToken2\")\r\n-    try {\r\n-      const obj = {\r\n-        otp_token: otpToken,\r\n-        email: userData?.email,\r\n-        password: getValues4(\"password\"),\r\n-        confirm_password: getValues4(\"confirmPassword\"),\r\n-      }\r\n+    const handleFileChange2 = async (e) => {\r\n+        setUploadedImages([]);\r\n+        setImageLoader(true);\r\n \r\n-      const data = await ApiServices.SendOtp(obj)\r\n-      console.log(data)\r\n-      if (data.responseCode == 200) {\r\n-        setOtp(\"\")\r\n+        try {\r\n+            const files = e.target.files;\r\n+            if (!files || files.length === 0) return; // Exit if no files are selected\r\n \r\n-        reset4()\r\n-        setConfirmPassword(false)\r\n-      }\r\n-    } catch (error) {\r\n-      setOtpError(true)\r\n-    } finally {\r\n-      setIsLoading(false)\r\n-      setOpen(false)\r\n-      showSuccessToast(\"Password Reset Successfully\")\r\n-    }\r\n-  }\r\n+            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n \r\n-  const SubmitOTP = async (val) => {\r\n-    setIsLoading(true)\r\n+            const uploadedNewBatchImages = [];\r\n \r\n-    try {\r\n-      const obj = {\r\n-        email: userData?.email,\r\n-        otp: otp,\r\n-      }\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const formData = new FormData();\r\n+                formData.append(\"document\", files[i]);\r\n \r\n-      const data = await ApiServices.SendOtp(obj)\r\n-      console.log(data?.data, \"tesetttt\")\r\n-      if (data.responseCode == 206) {\r\n-        console.log(data)\r\n-        setOtpToken(data?.data?.otp_token)\r\n-      }\r\n-    } catch (error) {\r\n-      setOtpError(true)\r\n-    } finally {\r\n-      setIsLoading(false)\r\n-    }\r\n-  }\r\n+                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n \r\n-  const handleFileChange2 = async (e) => {\r\n-    setUploadedImages([])\r\n-    setImageLoader(true)\r\n+                const response = await axios.post(\r\n+                    `${import.meta.env.VITE_BASE_URL}/api/system/upload`,\r\n+                    formData,\r\n+                    {\r\n+                        headers: {\r\n+                            \"Content-Type\": \"multipart/form-data\",\r\n+                        },\r\n+                    }\r\n+                );\r\n \r\n-    try {\r\n-      const files = e.target.files\r\n-      if (!files || files.length === 0) return // Exit if no files are selected\r\n+                const imagePath = response?.data?.data?.path;\r\n+                if (imagePath) {\r\n+                    const fullImageUrl =  imagePath;\r\n+                    uploadedNewBatchImages.push(fullImageUrl);\r\n+                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n+                }\r\n+            }\r\n \r\n-      setValue(\"images\", Array.from(files), { shouldValidate: true }) // Ensure files are stored as an array\r\n+            setUploadedImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n+        } catch (error) {\r\n+            console.error(\"Error uploading files:\", error);\r\n+        } finally {\r\n+            setImageLoader(false);\r\n+        }\r\n+    };\r\n \r\n-      const uploadedNewBatchImages = []\r\n+    const handleRemoveImage = (index) => {\r\n+        setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n+    };\r\n \r\n-      for (let i = 0; i < files.length; i++) {\r\n-        const formData = new FormData()\r\n-        formData.append(\"document\", files[i])\r\n+    const handleFileChange3 = async (e) => {\r\n+        setBeforeImages([]);\r\n+        setImageLoaderBefore(true);\r\n \r\n-        console.log(\"Uploading file:\", files[i].name) // Debugging log\r\n+        try {\r\n+            const files = e.target.files;\r\n+            if (!files || files.length === 0) return; // Exit if no files are selected\r\n \r\n-        const response = await axios.post(`${import.meta.env.VITE_BASE_URL}/api/system/upload`, formData, {\r\n-          headers: {\r\n-            \"Content-Type\": \"multipart/form-data\",\r\n-          },\r\n-        })\r\n+            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n \r\n-        const imagePath = response?.data?.data?.path\r\n-        if (imagePath) {\r\n-          const fullImageUrl = imagePath\r\n-          uploadedNewBatchImages.push(fullImageUrl)\r\n-          console.log(\"Uploaded Image URL:\", fullImageUrl)\r\n+            const uploadedNewBeforeImages = [];\r\n+\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const formData = new FormData();\r\n+                formData.append(\"document\", files[i]);\r\n+\r\n+                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n+\r\n+                const response = await axios.post(\r\n+                    `${import.meta.env.VITE_BASE_URL}/api/system/upload`,\r\n+                    formData,\r\n+                    {\r\n+                        headers: {\r\n+                            \"Content-Type\": \"multipart/form-data\",\r\n+                        },\r\n+                    }\r\n+                );\r\n+\r\n+                const imagePath = response?.data?.data?.path;\r\n+                if (imagePath) {\r\n+                    const fullImageUrl = imagePath;\r\n+                    uploadedNewBeforeImages.push(fullImageUrl);\r\n+                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n+                }\r\n+            }\r\n+\r\n+            setBeforeImages(uploadedNewBeforeImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewBeforeImages);\r\n+        } catch (error) {\r\n+            console.error(\"Error uploading files:\", error);\r\n+        } finally {\r\n+            setImageLoaderBefore(false);\r\n         }\r\n-      }\r\n+    };\r\n \r\n-      setUploadedImages(uploadedNewBatchImages) // Update state with uploaded image URLs\r\n-      console.log(\"All Uploaded Images:\", uploadedNewBatchImages)\r\n-    } catch (error) {\r\n-      console.error(\"Error uploading files:\", error)\r\n-    } finally {\r\n-      setImageLoader(false)\r\n-    }\r\n-  }\r\n+    const handleRemoveImage2 = (index) => {\r\n+        setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n+    };\r\n+    const handleFileChange4 = async (e) => {\r\n+        setAfterImages([]);\r\n+        setImageLoaderAfter(true);\r\n \r\n-  const handleRemoveImage = (index) => {\r\n-    setUploadedImages((prevImages) => prevImages.filter((_, i) => i !== index))\r\n-  }\r\n+        try {\r\n+            const files = e.target.files;\r\n+            if (!files || files.length === 0) return; // Exit if no files are selected\r\n \r\n-  const handleFileChange3 = async (e) => {\r\n-    setBeforeImages([])\r\n-    setImageLoaderBefore(true)\r\n+            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n \r\n-    try {\r\n-      const files = e.target.files\r\n-      if (!files || files.length === 0) return // Exit if no files are selected\r\n+            const uploadedNewAfterImages = [];\r\n \r\n-      setValue(\"images\", Array.from(files), { shouldValidate: true }) // Ensure files are stored as an array\r\n+            for (let i = 0; i < files.length; i++) {\r\n+                const formData = new FormData();\r\n+                formData.append(\"document\", files[i]);\r\n \r\n-      const uploadedNewBeforeImages = []\r\n+                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n \r\n-      for (let i = 0; i < files.length; i++) {\r\n-        const formData = new FormData()\r\n-        formData.append(\"document\", files[i])\r\n+                const response = await axios.post(\r\n+                    `${import.meta.env.VITE_BASE_URL}/api/system/upload`,\r\n+                    formData,\r\n+                    {\r\n+                        headers: {\r\n+                            \"Content-Type\": \"multipart/form-data\",\r\n+                        },\r\n+                    }\r\n+                );\r\n \r\n-        console.log(\"Uploading file:\", files[i].name) // Debugging log\r\n+                const imagePath = response?.data?.data?.path;\r\n+                if (imagePath) {\r\n+                    const fullImageUrl =  imagePath;\r\n+                    uploadedNewAfterImages.push(fullImageUrl);\r\n+                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n+                }\r\n+            }\r\n \r\n-        const response = await axios.post(`${import.meta.env.VITE_BASE_URL}/api/system/upload`, formData, {\r\n-          headers: {\r\n-            \"Content-Type\": \"multipart/form-data\",\r\n-          },\r\n-        })\r\n+            setAfterImages(uploadedNewAfterImages); // Update state with uploaded image URLs\r\n+            console.log(\"All Uploaded Images:\", uploadedNewAfterImages);\r\n+        } catch (error) {\r\n+            console.error(\"Error uploading files:\", error);\r\n+        } finally {\r\n+            setImageLoaderAfter(false);\r\n+        }\r\n+    };\r\n \r\n-        const imagePath = response?.data?.data?.path\r\n-        if (imagePath) {\r\n-          const fullImageUrl = imagePath\r\n-          uploadedNewBeforeImages.push(fullImageUrl)\r\n-          console.log(\"Uploaded Image URL:\", fullImageUrl)\r\n+    const handleRemoveImage3 = (index) => {\r\n+        setAfterImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n+    };\r\n+    useEffect(() => {\r\n+        let interval;\r\n+        if (timer > 0) {\r\n+            interval = setInterval(() => {\r\n+                setTimer((prev) => prev - 1);\r\n+            }, 1000);\r\n+        } else {\r\n+            clearInterval(interval);\r\n         }\r\n-      }\r\n+        return () => clearInterval(interval);\r\n+    }, [timer]);\r\n \r\n-      setBeforeImages(uploadedNewBeforeImages) // Update state with uploaded image URLs\r\n-      console.log(\"All Uploaded Images:\", uploadedNewBeforeImages)\r\n-    } catch (error) {\r\n-      console.error(\"Error uploading files:\", error)\r\n-    } finally {\r\n-      setImageLoaderBefore(false)\r\n-    }\r\n-  }\r\n+    const getDocuments = async () => {\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 999\r\n+            };\r\n \r\n-  const handleRemoveImage2 = (index) => {\r\n-    setBeforeImages((prevImages) => prevImages.filter((_, i) => i !== index))\r\n-  }\r\n-  const handleFileChange4 = async (e) => {\r\n-    setAfterImages([])\r\n-    setImageLoaderAfter(true)\r\n+            const data = await ApiServices.getAfterCareDocuments(params);\r\n \r\n-    try {\r\n-      const files = e.target.files\r\n-      if (!files || files.length === 0) return // Exit if no files are selected\r\n \r\n-      setValue(\"images\", Array.from(files), { shouldValidate: true }) // Ensure files are stored as an array\r\n \r\n-      const uploadedNewAfterImages = []\r\n+            setDocuments(\r\n+                data?.data?.documents?.map((doc) => ({\r\n \r\n-      for (let i = 0; i < files.length; i++) {\r\n-        const formData = new FormData()\r\n-        formData.append(\"document\", files[i])\r\n+                    id: doc?._id, // Example transformation\r\n+                    name: doc.title, // Another example\r\n+                }))\r\n+            );\r\n \r\n-        console.log(\"Uploading file:\", files[i].name) // Debugging log\r\n \r\n-        const response = await axios.post(`${import.meta.env.VITE_BASE_URL}/api/system/upload`, formData, {\r\n-          headers: {\r\n-            \"Content-Type\": \"multipart/form-data\",\r\n-          },\r\n-        })\r\n \r\n-        const imagePath = response?.data?.data?.path\r\n-        if (imagePath) {\r\n-          const fullImageUrl = imagePath\r\n-          uploadedNewAfterImages.push(fullImageUrl)\r\n-          console.log(\"Uploaded Image URL:\", fullImageUrl)\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n         }\r\n-      }\r\n+    };\r\n+    const getPatients = async () => {\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 999\r\n+            };\r\n \r\n-      setAfterImages(uploadedNewAfterImages) // Update state with uploaded image URLs\r\n-      console.log(\"All Uploaded Images:\", uploadedNewAfterImages)\r\n-    } catch (error) {\r\n-      console.error(\"Error uploading files:\", error)\r\n-    } finally {\r\n-      setImageLoaderAfter(false)\r\n-    }\r\n-  }\r\n+            const data = await ApiServices.getPatients(params);\r\n \r\n-  const handleRemoveImage3 = (index) => {\r\n-    setAfterImages((prevImages) => prevImages.filter((_, i) => i !== index))\r\n-  }\r\n-  useEffect(() => {\r\n-    let interval\r\n-    if (timer > 0) {\r\n-      interval = setInterval(() => {\r\n-        setTimer((prev) => prev - 1)\r\n-      }, 1000)\r\n-    } else {\r\n-      clearInterval(interval)\r\n-    }\r\n-    return () => clearInterval(interval)\r\n-  }, [timer])\r\n \r\n-  const getDocuments = async () => {\r\n-    try {\r\n-      const params = {\r\n-        page: 1,\r\n-        limit: 999,\r\n-      }\r\n \r\n-      const data = await ApiServices.getAfterCareDocuments(params)\r\n+            setPatients(\r\n+                data?.data?.patients?.map((doc) => ({\r\n+                    ...doc,\r\n+                    id: doc?._id, // Example transformation\r\n+                    name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n+                }))\r\n+            );\r\n \r\n-      setDocuments(\r\n-        data?.data?.documents?.map((doc) => ({\r\n-          id: doc?._id, // Example transformation\r\n-          name: doc.title, // Another example\r\n-        })),\r\n-      )\r\n-    } catch (error) {\r\n-      console.error(\"Error fetching location:\", error)\r\n-    }\r\n-  }\r\n-  const getPatients = async () => {\r\n-    try {\r\n-      const params = {\r\n-        page: 1,\r\n-        limit: 999,\r\n-      }\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n+        }\r\n+    };\r\n+    const getForms = async () => {\r\n+        try {\r\n+            let params = {\r\n+                page: 1,\r\n+                limit: 999\r\n+            };\r\n \r\n-      const data = await ApiServices.getPatients(params)\r\n+            const data = await ApiServices.getConsentForms(params);\r\n \r\n-      setPatients(\r\n-        data?.data?.patients?.map((doc) => ({\r\n-          ...doc,\r\n-          id: doc?._id, // Example transformation\r\n-          name: doc.title + \" \" + doc?.first_name + \" \" + doc?.last_name, // Another example\r\n-        })),\r\n-      )\r\n-    } catch (error) {\r\n-      console.error(\"Error fetching location:\", error)\r\n-    }\r\n-  }\r\n-  const getForms = async () => {\r\n-    try {\r\n-      const params = {\r\n-        page: 1,\r\n-        limit: 999,\r\n-      }\r\n \r\n-      const data = await ApiServices.getConsentForms(params)\r\n \r\n-      setForms(\r\n-        data?.data?.forms?.map((doc) => ({\r\n-          ...doc,\r\n-          id: doc?._id, // Example transformation\r\n-          name: doc?.first_name + \" \" + doc?.last_name, // Another example\r\n-        })),\r\n-      )\r\n-    } catch (error) {\r\n-      console.error(\"Error fetching location:\", error)\r\n-    }\r\n-  }\r\n-  useEffect(() => {\r\n-    getForms()\r\n-    getPatients()\r\n-    getDocuments()\r\n-  }, [])\r\n-  useEffect(() => {\r\n-    // Disable drawing on the single canvas\r\n-    if (sigCanvas.current) {\r\n-      sigCanvas.current.off()\r\n-    }\r\n+            setForms(\r\n+                data?.data?.forms?.map((doc) => ({\r\n+                    ...doc,\r\n+                    id: doc?._id, // Example transformation\r\n+                    name: doc?.first_name + ' ' + doc?.last_name, // Another example\r\n+                }))\r\n+            );\r\n \r\n-    // Disable drawing on all multiple canvases\r\n-    signCanvasRefs.current.forEach((canvas) => {\r\n-      if (canvas) {\r\n-        canvas.off()\r\n-      }\r\n-    })\r\n-  }, [])\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n+        }\r\n+    };\r\n+    useEffect(() => {\r\n+        getForms()\r\n+        getPatients()\r\n+        getDocuments()\r\n+    }, [])\r\n+    useEffect(() => {\r\n+        // Disable drawing on the single canvas\r\n+        if (sigCanvas.current) {\r\n+            sigCanvas.current.off();\r\n+        }\r\n \r\n-  return (\r\n-    <div>\r\n+        // Disable drawing on all multiple canvases\r\n+        signCanvasRefs.current.forEach((canvas) => {\r\n+            if (canvas) {\r\n+                canvas.off();\r\n+            }\r\n+        });\r\n+    }, []);\r\n \r\n+    return (\r\n+        <div>\r\n+\r\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n \r\n \r\n \r\n@@ -686,9 +745,9 @@\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n \r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n+                        <Grid item xs={3} mt={2}>\r\n                             <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                 fontSize: \"14px\",\r\n@@ -715,9 +774,9 @@\n                                 })}\r\n                             />\r\n \r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n+                        <Grid item xs={3} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n                                     {/* Single Date Selection */}\r\n                                     <Grid item xs={12}>\r\n@@ -770,9 +829,9 @@\n \r\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n+                        <Grid item xs={3} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n                                     {/* Single Date Selection */}\r\n                                     <Grid item xs={12}>\r\n@@ -827,9 +886,9 @@\n                             </LocalizationProvider>\r\n                         </Grid>\r\n                         <Grid container p={2} spacing={2} >\r\n \r\n-                            <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n+                            <Grid item xs={3} mt={2}>\r\n                                 <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n@@ -846,9 +905,9 @@\n                                         <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n                             </Grid>\r\n-                            <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n+                            <Grid item xs={3} mt={2}>\r\n                                 {patientType == 'existing' && <> <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n@@ -905,9 +964,9 @@\n                                         })}\r\n                                     />\r\n                                 </>}\r\n                             </Grid>\r\n-                            <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n+                            <Grid item xs={3} mt={2}>\r\n                                 {patientType == 'existing' && <><InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                     fontSize: \"14px\",\r\n@@ -934,9 +993,9 @@\n                                         })}\r\n                                     /> </>}\r\n                             </Grid>\r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient First Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Patient First Name\"}\r\n                             error={errors?.fname?.message}\r\n@@ -945,9 +1004,9 @@\n                                     \"Please enter your fname.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient Last Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\" Patient Last Name\"}\r\n                             error={errors?.lname?.message}\r\n@@ -956,9 +1015,9 @@\n                                     \"Please enter your lname.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Patient Email :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Patient Email\"}\r\n                             error={errors?.email?.message}\r\n@@ -968,9 +1027,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n+                        <Grid item xs={3} mt={2}>\r\n                             <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                 <Grid container spacing={2}>\r\n                                     {/* Single Date Selection */}\r\n                                     <Grid item xs={12}>\r\n@@ -1023,9 +1082,9 @@\n \r\n \r\n                             </LocalizationProvider>\r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Phone Number :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Phone Number\"}\r\n                             error={errors?.phone?.message}\r\n@@ -1034,9 +1093,9 @@\n                                     \"Please enter your phone.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Post Code :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Post Code\"}\r\n                             error={errors?.post?.message}\r\n@@ -1045,9 +1104,9 @@\n                                     \"Please enter your postcode.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Address :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Address\"}\r\n                             error={errors?.address?.message}\r\n@@ -1056,9 +1115,9 @@\n                                     \"Please enter your address.\"\r\n \r\n                             })}\r\n                         /></Grid>\r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Notes :\"}\r\n                             multiline\r\n                             rows={3}\r\n                             size={'small'}\r\n@@ -1079,9 +1138,9 @@\n                     </Typography>\r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n \r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Name :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Name\"}\r\n                             error={errors?.name?.message}\r\n@@ -1091,9 +1150,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Email :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Email\"}\r\n                             error={errors?.kinemail?.message}\r\n@@ -1103,9 +1162,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Phone Number :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Phone Number\"}\r\n                             error={errors?.kinphone?.message}\r\n@@ -1115,9 +1174,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Address :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Address\"}\r\n                             error={errors?.kinaddress?.message}\r\n@@ -1137,9 +1196,9 @@\n                     </Typography>\r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n \r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Name :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Name\"}\r\n                             error={errors?.genname?.message}\r\n@@ -1149,9 +1208,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Email :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Email\"}\r\n                             error={errors?.genemail?.message}\r\n@@ -1161,9 +1220,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Phone Number :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Phone Number\"}\r\n                             error={errors?.genphone?.message}\r\n@@ -1173,9 +1232,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={3} mt={2}><InputField\r\n                             label={\"Address :\"}\r\n                             size={'small'}\r\n                             placeholder={\"Address\"}\r\n                             error={errors?.genaddress?.message}\r\n@@ -1189,9 +1248,9 @@\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n                         <Grid container spacing={2} p={2}>\r\n                             {/* Marketing Permission */}\r\n-                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n+                            <Grid item xs={6} mt={2}>\r\n                                 <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n \r\n                                     <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n@@ -1201,9 +1260,9 @@\n                                 </FormControl>\r\n                             </Grid>\r\n \r\n                             {/* Offers & Reminders Permission */}\r\n-                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n+                            <Grid item xs={6} mt={2}>\r\n                                 <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n \r\n                                     <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n@@ -1219,9 +1278,9 @@\n                         <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n                             Facial Mapping\r\n                         </Typography>\r\n                         <Grid container spacing={2} p={2}>\r\n-                            <Grid item xs={12} sm={12} md={6} lg={6}>\r\n+                            <Grid item xs={6}>\r\n                                 <Typography>Facial Marking:</Typography>\r\n                                 <div style={{ position: \"relative\", width: 300, height: 150 }}>\r\n                                     <SignatureCanvas\r\n                                         ref={sigMarkingRef}\r\n@@ -1246,12 +1305,12 @@\n                                         </Button>\r\n                                     </Grid>\r\n                                 </Grid>\r\n                             </Grid>\r\n-                            {markingLoader ? <Grid item display={'flex'} justifyContent={'flex-start'} alignItems={'center'} xs={12} sm={12} md={6} lg={6}>\r\n+                            {markingLoader ? <Grid item display={'flex'} justifyContent={'flex-start'} alignItems={'center'} xs={6}>\r\n                                 <CircularProgress size={50} />\r\n                             </Grid> : (\r\n-                                <Grid item xs={12} sm={12} md={6} lg={6}>\r\n+                                <Grid item xs={6}>\r\n                                     <Typography>Saved Image:</Typography>\r\n                                     <img src={savedImage ? import.meta.env.VITE_BASE_URL+savedImage : Images.girl} alt=\"Marked Face\" style={{ width: 300, height: 150, border: \"1px solid black\" }} />\r\n                                 </Grid>\r\n                             )}\r\n@@ -1265,9 +1324,9 @@\n                         </Typography>\r\n \r\n                         <Grid container spacing={2} p={2}>\r\n                             {/* Patient Concerns */}\r\n-                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n+                            <Grid item xs={6} mt={2}>\r\n                                 <InputField\r\n                                     label=\"Patient concerns\"\r\n                                     size=\"small\"\r\n                                     placeholder=\"Patient concerns\"\r\n@@ -1278,9 +1337,9 @@\n                                 />\r\n                             </Grid>\r\n \r\n                             {/* Patient Goal */}\r\n-                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n+                            <Grid item xs={6} mt={2}>\r\n                                 <InputField\r\n                                     label=\"Patient goal\"\r\n                                     size=\"small\"\r\n                                     placeholder=\"Patient goal\"\r\n@@ -1291,9 +1350,9 @@\n                                 />\r\n                             </Grid>\r\n \r\n                             {/* Advised Plan/Product */}\r\n-                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n+                            <Grid item xs={6} mt={2}>\r\n                                 <InputField\r\n                                     label=\"Advised Plan/product\"\r\n                                     size=\"small\"\r\n                                     placeholder=\"Advised Plan/product\"\r\n@@ -1304,9 +1363,9 @@\n                                 />\r\n                             </Grid>\r\n \r\n                             {/* Expected Result */}\r\n-                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n+                            <Grid item xs={6} mt={2}>\r\n                                 <InputField\r\n                                     label=\"Expected Result\"\r\n                                     size=\"small\"\r\n                                     placeholder=\"Expected Result\"\r\n@@ -1321,9 +1380,9 @@\n                             I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n                         </Typography>\r\n                         <Grid container spacing={5} p={2} alignItems=\"center\">\r\n                             {/* Date Field */}\r\n-                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n+                            <Grid item xs={6} mt={2}>\r\n                                 <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                     <Grid container spacing={2}>\r\n                                         {/* Single Date Selection */}\r\n                                         <Grid item xs={12}>\r\n@@ -1378,9 +1437,9 @@\n                                 </LocalizationProvider>\r\n                             </Grid>\r\n \r\n                             {/* Signature Canvas */}\r\n-                            <Grid item xs={12} sm={12} md={6} lg={6} mt={2}>\r\n+                            <Grid item xs={6} mt={2}>\r\n                                 <Typography>Patient Signature:</Typography>\r\n                                 <SignatureCanvas\r\n                                     ref={sigCanvas}\r\n                                     penColor=\"black\"\r\n@@ -1419,9 +1478,9 @@\n                             {fields.map((item, index) => (\r\n                                 <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n \r\n                                     {/* Patient Date Selection */}\r\n-                                    <Grid item xs={12} sm={6} md={4} lg={3}>\r\n+                                    <Grid item xs={3}>\r\n                                         <Box>\r\n                                             <InputLabel\r\n                                                 sx={{\r\n                                                     textTransform: \"capitalize\",\r\n@@ -1469,9 +1528,9 @@\n                                         </Box>\r\n                                     </Grid>\r\n \r\n                                     {/* Amount Field */}\r\n-                                    <Grid item xs={12} sm={6} md={4} lg={3} mt={2}>\r\n+                                    <Grid item xs={3} mt={2}>\r\n                                         <InputField\r\n                                             label=\"Amount\"\r\n                                             placeholder=\"Order Amount\"\r\n                                             size=\"small\"\r\n@@ -1481,9 +1540,9 @@\n \r\n \r\n \r\n                                     {/* Description Field */}\r\n-                                    <Grid item xs={12} sm={6} md={6} lg={4}>\r\n+                                    <Grid item xs={4}>\r\n                                         <InputField\r\n                                             label=\"Description\"\r\n                                             multiline\r\n                                             rows={3}\r\n@@ -1491,9 +1550,9 @@\n                                             register={register(`records.${index}.description`)}\r\n                                         />\r\n                                     </Grid>\r\n                                     {/* Remove Button (only for additional fields) */}\r\n-                                    <Grid item xs={12} sm={1} md={1} lg={1}>\r\n+                                    <Grid item xs={1}>\r\n                                         {index > 0 && (\r\n                                             <IconButton color=\"error\" onClick={() => remove(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n@@ -1517,9 +1576,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={12} md={6} lg={5}>\r\n+                        <Grid item xs={12} sm={5}>\r\n                             <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", mt: 2,\r\n                                 textAlign: \"left\",\r\n                                 fontWeight: 600,\r\n@@ -1613,9 +1672,9 @@\n                                 {uploadedImages?.length > 0 &&\r\n                                     uploadedImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n-                                                src={import.meta.env.VITE_BASE_URL+file || \"/placeholder.svg\"}\r\n+                                                src={import.meta.env.VITE_BASE_URL+file}\r\n                                                 alt=\"Uploaded Preview\"\r\n                                                 style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                             />\r\n                                             <Typography\r\n@@ -1653,9 +1712,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={12} md={6} lg={5}>\r\n+                        <Grid item xs={12} sm={5}>\r\n                             <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", mt: 2,\r\n                                 textAlign: \"left\",\r\n                                 fontWeight: 600,\r\n@@ -1749,9 +1808,9 @@\n                                 {beforeImages?.length > 0 &&\r\n                                     beforeImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n-                                                src={import.meta.env.VITE_BASE_URL+file || \"/placeholder.svg\"}\r\n+                                                src={import.meta.env.VITE_BASE_URL+file}\r\n                                                 alt=\"Uploaded Preview\"\r\n                                                 style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                             />\r\n                                             <Typography\r\n@@ -1789,9 +1848,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={12} md={6} lg={5}>\r\n+                        <Grid item xs={12} sm={5}>\r\n                             <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", mt: 2,\r\n                                 textAlign: \"left\",\r\n                                 fontWeight: 600,\r\n@@ -1868,14 +1927,8 @@\n                                                 {errors.media3.message}\r\n                                             </Typography>\r\n                                         )}\r\n                                     </>\r\n-                                )}\\\r\n-                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n-                                                {errors.media3.message}\r\n-                                            </Typography>\r\n-                                        )}\r\n-                                    </>\r\n                                 )}\r\n                             />\r\n                         </Grid>\r\n \r\n@@ -1891,9 +1944,9 @@\n                                 {afterImages?.length > 0 &&\r\n                                     afterImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             <img\r\n-                                                src={import.meta.env.VITE_BASE_URL+file || \"/placeholder.svg\"}\r\n+                                                src={import.meta.env.VITE_BASE_URL+file}\r\n                                                 alt=\"Uploaded Preview\"\r\n                                                 style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                             />\r\n                                             <Typography\r\n@@ -1937,9 +1990,9 @@\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {furtherFields.map((item, index) => (\r\n                                 <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n                                     {/* Date Selection */}\r\n-                                    <Grid item xs={12} sm={12} md={6} lg={5}>\r\n+                                    <Grid item xs={5}>\r\n                                         <Box>\r\n                                             <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1.5 }}>\r\n                                                 Further Date :*\r\n                                             </InputLabel>\r\n@@ -1980,9 +2033,9 @@\n                                         </Typography>\r\n                                     </Grid>\r\n \r\n                                     {/* Signature Field */}\r\n-                                    <Grid item xs={12} sm={12} md={6} lg={5}>\r\n+                                    <Grid item xs={5}>\r\n                                         <Box>\r\n                                             <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1 }}>\r\n                                                 Signature :*\r\n                                             </InputLabel>\r\n@@ -2008,9 +2061,9 @@\n                                         </Grid> */}\r\n                                     </Grid>\r\n \r\n                                     {/* Remove Button */}\r\n-                                    <Grid item xs={12} sm={1} md={1} lg={1} display=\"flex\" justifyContent=\"flex-end\">\r\n+                                    <Grid item xs={1} display=\"flex\" justifyContent=\"flex-end\">\r\n                                         {furtherFields.length > 1 && (\r\n                                             <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n                                                 <DeleteIcon />\r\n                                             </IconButton>\r\n@@ -2027,9 +2080,9 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        <Grid item xs={12} sm={6} md={4} lg={3} mt={2}><InputField\r\n+                        <Grid item xs={6} mt={2}><InputField\r\n                             label={\"Notes :\"}\r\n                             multiline\r\n                             rows={3}\r\n                             size={'small'}\r\n@@ -2047,8 +2100,8 @@\n                     </Box>\r\n                 </Box>\r\n             </Paper>\r\n         </div >\r\n-  )\r\n+    )\r\n }\r\n \r\n export default CreateConsentForm\r\n"
                },
                {
                    "date": 1744150467005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-\"use client\"\r\n \r\n+\r\n import { useEffect, useRef, useState } from \"react\"\r\n import ApiServices from \"../../../services/Apis\"\r\n import { PrimaryButton } from \"../../../components/buttons\"\r\n import {\r\n"
                },
                {
                    "date": 1744150546229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -745,9 +745,9 @@\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n \r\n-                        <Grid item lg={3} md={4} sm={6} mt={2}>\r\n+                        <Grid item lg={3} md={4} sm={6} xs={6} mt={2}>\r\n                             <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n                                 fontSize: \"14px\",\r\n"
                }
            ],
            "date": 1743247669952,
            "name": "Commit-0",
            "content": "import { Box, Chip, IconButton, Paper, Typography } from \"@mui/material\"\r\nimport DataTable from \"../../../components/DataTable\"\r\nimport { useEffect, useState } from \"react\"\r\nimport NorthEastIcon from '@mui/icons-material/NorthEast';\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport moment from \"moment\";\r\nimport LocationOnOutlinedIcon from '@mui/icons-material/LocationOnOutlined';\r\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\nimport DriveFileRenameOutlineIcon from '@mui/icons-material/DriveFileRenameOutline';\r\nimport ConfirmationDialog from \"../../../components/confirmDialog\";\r\nimport { showErrorToast, showPromiseToast } from \"../../../components/Toaster\";\r\nimport SimpleDialog from \"../../../components/dialog\";\r\nimport { Grid } from \"rsuite\";\r\nimport InputField from \"../../../components/input\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport SelectField from \"../../../components/select\";\r\n\r\n\r\nconst ConsentForms = () => {\r\n    const [active, setActive] = useState(false)\r\n    const navigate = useNavigate()\r\n    const [status, setStatus] = useState(null)\r\n    const [data, setData] = useState([])\r\n    const [confirmationDialog, setConfirmationDialog] = useState(false)\r\n    const [selectedRow, setSelectedRow] = useState(null)\r\n    const [open, setOpen] = useState(false)\r\n    const {\r\n        register: register2,\r\n        handleSubmit: handleSubmit2,\r\n        setValue: setValue2,\r\n        getValues: getValues2,\r\n        reset,\r\n        formState: { errors: errors2 },\r\n\r\n    } = useForm();\r\n\r\n    const getData = async () => {\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 999\r\n            };\r\n\r\n            const data = await ApiServices.getAfterCareDocuments(params);\r\n\r\n\r\n            setData(data?.data?.documents)\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    // // Dummy data\r\n    // const data = [\r\n    //     { id: 1, firstName: \"John\", lastName: \"Doe\", age: 30, city: \"New York\" },\r\n    //     { id: 2, firstName: \"Jane\", lastName: \"Smith\", age: 25, city: \"Los Angeles\" },\r\n    //     { id: 3, firstName: \"Bob\", lastName: \"Johnson\", age: 35, city: \"Chicago\" },\r\n    //     { id: 4, firstName: \"Alice\", lastName: \"Brown\", age: 28, city: \"Houston\" },\r\n    //     { id: 5, firstName: \"Charlie\", lastName: \"Davis\", age: 42, city: \"Phoenix\" },\r\n    //     { id: 6, firstName: \"Eva\", lastName: \"Wilson\", age: 31, city: \"Philadelphia\" },\r\n    //     { id: 7, firstName: \"Frank\", lastName: \"Moore\", age: 29, city: \"San Antonio\" },\r\n    //     { id: 8, firstName: \"Grace\", lastName: \"Taylor\", age: 36, city: \"San Diego\" },\r\n    //     { id: 9, firstName: \"Henry\", lastName: \"Anderson\", age: 41, city: \"Dallas\" },\r\n    //     { id: 10, firstName: \"Ivy\", lastName: \"Thomas\", age: 27, city: \"San Jose\" },\r\n    // ]\r\n\r\n    // Column definitions with sorting\r\n    const columns = [\r\n        {\r\n            header: \"Title\",\r\n            accessorKey: \"title\",\r\n\r\n        },\r\n        {\r\n            header: \"Content\",\r\n            accessorKey: \"content\",\r\n\r\n        },\r\n     \r\n      \r\n        {\r\n            header: \"Actions\",\r\n            cell: ({ row }) => (\r\n\r\n                <Box variant=\"contained\" color=\"primary\" sx={{ cursor: 'pointer', display: 'flex', gap: 2 }} >\r\n                    <IconButton onClick={() => { navigate(`/patient-detail/${row?.original?._id}`) }}>\r\n                        <NorthEastIcon sx={{ fontSize: '16px' }} />\r\n                    </IconButton>\r\n                    <IconButton onClick={() => navigate(`/update-aftercare-document/${row?.original?._id}`)}>\r\n                        <DriveFileRenameOutlineIcon sx={{ fontSize: '16px' }} />\r\n                    </IconButton>\r\n\r\n                    <IconButton onClick={() => { setSelectedRow(row?.original); setConfirmationDialog(true) }}>\r\n                        <DeleteOutlineIcon sx={{ fontSize: '16px' }} />\r\n                    </IconButton>\r\n                </Box>\r\n            ),\r\n        },\r\n\r\n    ]\r\n\r\n    const HandleDelete = async () => {\r\n\r\n        try {\r\n            let obj = {\r\n                id: selectedRow?._id\r\n            };\r\n\r\n            const promise = ApiServices.DeleteAfterCareDoc(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            showErrorToast(error)\r\n        }\r\n        finally {\r\n            getData()\r\n        }\r\n\r\n    };\r\n    const UpdateStaff = async () => {\r\n\r\n        try {\r\n            let obj = {\r\n                id: selectedRow?._id,\r\n                in_active: status?.id\r\n            };\r\n\r\n            const promise = ApiServices.UpdateStaff(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            setOpen(false)\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        finally {\r\n            getData()\r\n        }\r\n\r\n    };\r\n    useEffect(() => {\r\n        getData()\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <SimpleDialog\r\n                open={open}\r\n                onClose={() => setOpen(false)}\r\n                width={'300px'}\r\n                title={'Update Status'}\r\n            >\r\n                <Box component=\"form\" onSubmit={handleSubmit2(UpdateStaff)}>\r\n                    <Grid container >\r\n                        <Grid item xs={12} sm={12} mt={2}>\r\n\r\n                            <Typography variant=\"p\" sx={{ mt: 1, fontWeight: 500 }}>\r\n                                Type:\r\n                            </Typography>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                newLabel={'Select Type'}\r\n                                fullWidth={true}\r\n                                options={[{ id: false, name: 'Active' }, { id: true, name: 'InActive' }]}\r\n                                selected={status}\r\n                                onSelect={(value) => {\r\n                                    setStatus(value)\r\n                                    getData(value)\r\n\r\n                                }}\r\n                            // error={errors2?.type?.message}\r\n                            // register={register2(\"type\", {\r\n                            //     required: 'Please select type.',\r\n                            // })}\r\n                            />\r\n\r\n                        </Grid>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        <Box sx={{ display: 'flex', justifyContent: 'center' }} >\r\n\r\n                            <PrimaryButton bgcolor={'black'} title=\"Submit\" type=\"submit\" />\r\n\r\n                        </Box>\r\n\r\n                    </Grid>\r\n                </Box>\r\n            </SimpleDialog>\r\n            <ConfirmationDialog\r\n                open={confirmationDialog}\r\n                onClose={() => setConfirmationDialog(false)}\r\n                message={\"Are you sure you want to delete?\"}\r\n                action={async () => {\r\n                    setConfirmationDialog(false);\r\n                    HandleDelete()\r\n\r\n                }}\r\n            />\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff !important', borderRadius: '12px' }}>\r\n                <Box sx={{ p: 2 }}>\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                    <Typography variant=\"h4\" sx={{ mt: 4,mb:4, fontWeight: 600 }}>\r\n                    Aftercare Documents\r\n                </Typography>\r\n                        <PrimaryButton onClick={() => navigate('/create-aftercare-document')} title={\"Create\"} />\r\n                    </Box>\r\n                    {<DataTable data={data} columns={columns} />}\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ConsentForms\r\n"
        }
    ]
}