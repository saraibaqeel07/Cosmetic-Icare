{
    "sourceFile": "src/layouts/Dashboard/Pages/BlockSlots.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744118122098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744118122098,
            "name": "Commit-0",
            "content": "import { useForm, Controller } from \"react-hook-form\";\r\nimport { Box, Grid, Typography, Button, Chip, InputLabel, IconButton } from \"@mui/material\";\r\nimport { DatePicker, LocalizationProvider, TimePicker } from \"@mui/x-date-pickers\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport dayjs from \"dayjs\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { showPromiseToast } from \"../../../components/Toaster\";\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport SelectField from \"../../../components/select\";\r\nimport InputField from \"../../../components/input\";\r\nimport DataTable from \"../../../components/DataTable\";\r\nimport moment from \"moment\";\r\nimport DeleteOutlineIcon from '@mui/icons-material/DeleteOutline';\r\nimport ConfirmationDialog from \"../../../components/confirmDialog\";\r\n\r\nconst BlockSlots = () => {\r\n    let suggestedDays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\r\n\r\n    const [selectedChips, setSelectedChips] = useState([])\r\n    const [timeData, setTimeData] = useState(null)\r\n    const [loader, setLoader] = useState(false)\r\n    const [selectedDates, setSelectedDates] = useState([]);\r\n    const [timeSlot, setTimeSlot] = useState(null)\r\n\r\n    const handleDateChange = (newDate) => {\r\n        const formattedDate = dayjs(newDate).format(\"YYYY-MM-DD\");\r\n\r\n        setSelectedDates((prevDates) => {\r\n            if (prevDates.includes(formattedDate)) {\r\n                return prevDates.filter((date) => date !== formattedDate);\r\n            } else {\r\n                return [...prevDates, formattedDate];\r\n            }\r\n        });\r\n    };\r\n    const { control, handleSubmit, setValue, register, formState: { errors }, watch, getValues, reset\r\n} = useForm();\r\n\r\nconst getData = async () => {\r\n    try {\r\n\r\n\r\n        const data = await ApiServices.getBlockSlots();\r\n        console.log(data);\r\n        setData(data?.data?.blockedSlots)\r\n\r\n\r\n\r\n\r\n    } catch (error) {\r\n        console.error(\"Error fetching location:\", error);\r\n    }\r\n};\r\nconst handleClick = (item) => {\r\n    console.log(item);\r\n\r\n    setSelectedChips((prevSelected) => {\r\n        const name = typeof item === \"string\" ? item : item;\r\n        const isAlreadySelected = prevSelected.some((chip) => chip === name);\r\n\r\n        if (isAlreadySelected) {\r\n            console.log(\"Removing:\", name);\r\n            return prevSelected.filter((chip) => chip == name);\r\n        } else {\r\n            console.log(\"Adding:\", name);\r\n            return [...prevSelected, name]; // Store only the name\r\n        }\r\n    });\r\n};\r\n\r\nconsole.log(watch());\r\nconst [data, setData] = useState()\r\nconst [confirmationDialog, setConfirmationDialog] = useState(false)\r\nconst [selectedRow, setSelectedRow] = useState(null)\r\n\r\n\r\n\r\n\r\nconst columns = [\r\n    {\r\n        header: \"Created At\",\r\n        accessorKey: \"created_at\",\r\n        cell: ({ getValue }) => moment(getValue()).format(\"MM-DD-YYYY\"),\r\n    },\r\n    {\r\n        header: \"Date\",\r\n        accessorKey: \"date\",\r\n        cell: ({ getValue }) => moment(getValue()).format(\"MM-DD-YYYY\"),\r\n    },\r\n    {\r\n        header: \"TimeSlot\",\r\n        accessorKey: \"timeslot\",\r\n        cell: ({ getValue }) => {\r\n            const timeslot = getValue();\r\n            return (\r\n                <Box>\r\n                    {timeslot}\r\n                </Box>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        header: \"Duration\",\r\n        accessorKey: \"duration\",\r\n        cell: ({ getValue }) => {\r\n            const duration = getValue();\r\n            return (\r\n                <Box>\r\n                    {duration}\r\n                </Box>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        header: \"Reason\",\r\n        accessorKey: \"reason\",\r\n        cell: ({ getValue }) => {\r\n            const reason = getValue();\r\n            return (\r\n                <Box>\r\n                    {reason}\r\n                </Box>\r\n            );\r\n        },\r\n    },\r\n    {\r\n        header: \"Actions\",\r\n        cell: ({ row }) => (\r\n\r\n            <Box variant=\"contained\" color=\"primary\" sx={{ cursor: 'pointer', display: 'flex', gap: 2 }} >\r\n\r\n             \r\n                \r\n                <IconButton onClick={() => { setSelectedRow(row?.original); setConfirmationDialog(true) }}>\r\n                    <DeleteOutlineIcon sx={{ fontSize: '16px' }} />\r\n                </IconButton>\r\n            </Box>\r\n        ),\r\n    },\r\n\r\n]\r\n\r\nconst HandleDelete = async () => {\r\n\r\n    try {\r\n        let obj = {\r\n            id: selectedRow?._id\r\n        };\r\n\r\n        const promise = ApiServices.DeleteBlockSlot(obj);\r\n\r\n        // Handle the API response properly\r\n        const response = await promise;\r\n        console.log(response);\r\n\r\n        showPromiseToast(\r\n            promise,\r\n            \"Saving...\",\r\n            \"Added Successfully\",\r\n            \"Something Went Wrong\"\r\n        );\r\n\r\n\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n    finally {\r\n        getData()\r\n    }\r\n\r\n};\r\n\r\nconst formatTime = (isoString) => new Date(isoString).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit', hour12: false });\r\nconst onSubmit = async (data) => {\r\n    setLoader(true);\r\n    console.log(selectedDates);\r\n    const transformedArray = selectedDates.map(date => ({\r\n        date: date,\r\n        timeslot: formatTime(getValues('timeSlot')),\r\n        duration: Number(timeSlot?.id),\r\n        reason: getValues('reason')\r\n\r\n    }));\r\n\r\n    console.log(transformedArray);\r\n\r\n    try {\r\n        let obj = {\r\n\r\n            slots: transformedArray\r\n\r\n        };\r\n        console.log(obj);\r\n\r\n\r\n        const promise = ApiServices.AddBlockSlots(obj);\r\n\r\n        // Handle the API response properly\r\n        const response = await promise;\r\n        console.log(response);\r\n\r\n        showPromiseToast(\r\n            promise,\r\n            \"Saving...\",\r\n            \"Added Successfully\",\r\n            \"Something Went Wrong\"\r\n        );\r\n        getData()\r\n        reset()\r\n        setTimeSlot(null)\r\n        setSelectedDates([])\r\n     \r\n    } catch (error) {\r\n        console.log(error);\r\n    } finally {\r\n        setLoader(false);\r\n    }\r\n};\r\nuseEffect(() => {\r\n    getData()\r\n}, [])\r\n\r\nuseEffect(() => {\r\n    if (!timeData) return;\r\n\r\n    console.log(timeData);\r\n\r\n    const defaultStartTime = timeData.start_time\r\n        ? dayjs(timeData.start_time, \"HH:mm\")\r\n        : dayjs().hour(9).minute(0);\r\n\r\n    const defaultEndTime = timeData.end_time\r\n        ? dayjs(timeData.end_time, \"HH:mm\")\r\n        : dayjs().hour(17).minute(0);\r\n\r\n    const defaultBreakStartTime = timeData.break_start\r\n        ? dayjs(timeData.break_start, \"HH:mm\")\r\n        : dayjs().hour(12).minute(0);\r\n\r\n    const defaultBreakEndTime = timeData.break_end\r\n        ? dayjs(timeData.break_end, \"HH:mm\")\r\n        : dayjs().hour(12).minute(30);\r\n\r\n    setValue(\"startTime\", defaultStartTime);\r\n    setValue(\"endTime\", defaultEndTime);\r\n    setValue(\"breakStartTime\", defaultBreakStartTime);\r\n    setValue(\"breakEndTime\", defaultBreakEndTime);\r\n}, [timeData]);\r\n\r\n\r\n\r\nreturn (\r\n    <div>\r\n          <ConfirmationDialog\r\n                open={confirmationDialog}\r\n                onClose={() => setConfirmationDialog(false)}\r\n                message={\"Are you sure you want to delete?\"}\r\n                action={async () => {\r\n                    setConfirmationDialog(false);\r\n                    HandleDelete()\r\n\r\n                }}\r\n            />\r\n        <Typography variant=\"h5\" sx={{ mb: 4, fontWeight: 500 }}>\r\n            BlockSlots\r\n        </Typography>\r\n        <Box component=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n            <Grid container spacing={2}>\r\n                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                    <Grid item xs={5}>\r\n                        <Box>\r\n                            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 1 }}>\r\n                                Dates :*\r\n                            </InputLabel>\r\n                            <Controller\r\n                                name=\"selectedDates\"\r\n                                control={control}\r\n                                rules={{ required: selectedDates?.length > 0 ? false : \"Please select at least one date\" }}\r\n                                render={({ field }) => (\r\n                                    <>\r\n                                        <DatePicker\r\n                                            slotProps={{\r\n                                                textField: {\r\n                                                    size: \"small\",\r\n                                                    fullWidth: true,\r\n                                                    sx: {\r\n                                                        \"& .MuiOutlinedInput-root\": {\r\n                                                            \"& fieldset\": { border: \"2px solid black\" }, // Default border\r\n                                                            \"&:hover fieldset\": { border: \"2px solid black\" }, // On hover\r\n                                                            \"&.Mui-focused fieldset\": { border: \"2px solid black !important\" } // On focus\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                            }}\r\n                                            value={null}\r\n                                            onChange={handleDateChange}\r\n                                        />\r\n                                        <Box mt={1}>\r\n                                            {selectedDates.map((date) => (\r\n                                                <Chip\r\n                                                    key={date}\r\n                                                    label={date}\r\n                                                    onDelete={() =>\r\n                                                        setSelectedDates((prev) =>\r\n                                                            prev.filter((d) => d !== date)\r\n                                                        )\r\n                                                    }\r\n                                                    sx={{ margin: 0.5 }}\r\n                                                />\r\n                                            ))}\r\n                                        </Box>\r\n                                        <input\r\n                                            type=\"hidden\"\r\n                                            {...field}\r\n                                            value={JSON.stringify(selectedDates)}\r\n                                        />\r\n                                    </>\r\n                                )}\r\n                            />\r\n                            {errors.selectedDates && (\r\n                                <Typography color=\"error\">\r\n                                    {errors.selectedDates.message}\r\n                                </Typography>\r\n                            )}\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={5} display={'flex'} gap={2}>\r\n                        <Box width=\"100%\">\r\n                            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 1 }}>\r\n                                Time Slot :*\r\n                            </InputLabel>\r\n                            <Controller\r\n                                name=\"timeSlot\"\r\n                                control={control}\r\n                                rules={{ required: \"Time Slot is required\" }}\r\n                                render={({ field }) => (\r\n                                    <TimePicker\r\n                                        ampm={false}\r\n                                        {...field}\r\n                                        value={field.value || null}\r\n                                        onChange={(newValue) => field.onChange(newValue)}\r\n                                        slotProps={{\r\n                                            textField: {\r\n                                                size: \"small\",\r\n                                                fullWidth: true,\r\n                                                sx: {\r\n                                                    \"& .MuiOutlinedInput-root\": {\r\n                                                        \"& fieldset\": { border: \"2px solid black\" }, // Default border\r\n                                                        \"&:hover fieldset\": { border: \"2px solid black\" }, // On hover\r\n                                                        \"&.Mui-focused fieldset\": { border: \"2px solid black !important\" } // On focus\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                )}\r\n                            />\r\n                            {errors.timeSlot && (\r\n                                <Typography color=\"error\">{errors.timeSlot.message}</Typography>\r\n                            )}\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={5}>\r\n                        <SelectField\r\n                            size={'small'}\r\n                            label={'Duration :*'}\r\n                            options={[\r\n                                { id: \"30\", name: \"30\" },\r\n                                { id: \"60\", name: \"60\" },\r\n                                { id: \"90\", name: \"90\" },\r\n                                { id: \"120\", name: \"120\" }\r\n                            ]}\r\n                            selected={timeSlot}\r\n                            onSelect={(value) => setTimeSlot(value)}\r\n                            error={errors?.duration?.message}\r\n                            register={register(\"duration\", {\r\n                                required: 'Please select duration.',\r\n                            })}\r\n                            sx={{\r\n                                \"& .MuiOutlinedInput-root\": {\r\n                                    \"& fieldset\": { border: \"2px solid black\" }, // Default border\r\n                                    \"&:hover fieldset\": { border: \"2px solid black\" }, // On hover\r\n                                    \"&.Mui-focused fieldset\": { border: \"2px solid black !important\" } // On focus\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </LocalizationProvider>\r\n                <Grid item xs={5}><InputField\r\n                    label={\"Reason :*\"}\r\n                    size={'small'}\r\n                    multiline\r\n                    rows={4}\r\n                    placeholder={\"Reason \"}\r\n                    error={errors?.reason?.message}\r\n                    register={register(\"reason\", {\r\n                        required:\r\n                            \"Please enter your reason.\"\r\n\r\n                    })}\r\n                /></Grid>\r\n\r\n            </Grid>\r\n\r\n\r\n            <Box display={'flex'} justifyContent={'flex-end'} mt={4}>\r\n                <PrimaryButton loader={loader} disabled={loader}type={'submit'} title={\"Submit\"} />\r\n            </Box>\r\n\r\n\r\n        </Box>\r\n        <Typography variant=\"h5\" sx={{ mb: 4, fontWeight: 500,mt:2 }}>\r\n            Blocked Slots\r\n        </Typography>\r\n        {data?.length > 0 && <DataTable data={data} columns={columns} />}\r\n    </div>\r\n);\r\n};\r\n\r\nexport default BlockSlots;\r\n"
        }
    ]
}