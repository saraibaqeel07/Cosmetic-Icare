{
    "sourceFile": "src/layouts/Dashboard/Pages/CreateQuestions.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1744118122093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1744118122093,
            "name": "Commit-0",
            "content": "import { Box, Grid, Typography, Chip, IconButton, InputLabel, Paper } from \"@mui/material\";\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport InputField from \"../../../components/input\";\r\nimport { showPromiseToast } from \"../../../components/Toaster\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport SelectField from \"../../../components/select\";\r\n\r\nconst CreateQuestions = () => {\r\n    const { register, handleSubmit, getValues, setValue, formState: { errors } } = useForm();\r\n    const navigate = useNavigate();\r\n    const [loader, setLoader] = useState(false);\r\n    const [options, setOptions] = useState([]);\r\n    const [type, setType] = useState(null)\r\n\r\n    const handleAddOption = () => {\r\n        const newOption = getValues('newOption').trim();\r\n        setValue('newOption', '')\r\n        if (newOption) {\r\n            setOptions([...options, { id: Date.now(), value: newOption }]);\r\n            // Clear input after adding option\r\n            // You can also reset the form field using setValue from react-hook-form if needed\r\n        }\r\n    };\r\n\r\n    const handleDeleteOption = (id) => {\r\n        const updatedOptions = options.filter(option => option.id !== id);\r\n        setOptions(updatedOptions);\r\n    };\r\n\r\n    const CreateQuestion = async () => {\r\n        setLoader(true);\r\n        try {\r\n            let obj = {\r\n                question: getValues('question'),\r\n                description: getValues('description'),\r\n                options: options.map(option => option.value),\r\n                type: type?.id,\r\n                order: 1\r\n            };\r\n\r\n            const promise = ApiServices.CreateQuestion(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Navigate if response is successful\r\n            if (response?.responseCode === 200) {\r\n                navigate(\"/appointments-questions\"); // Change to your desired route\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper sx={{ width: \"100%\", boxShadow: 'none',height:'auto' }}>\r\n                <Typography variant=\"h5\" sx={{ mb: 4, fontWeight: 500 }}>\r\n                    Create Question\r\n                </Typography>\r\n\r\n                <Box component={'form'} onSubmit={handleSubmit(CreateQuestion)} >\r\n                    <Grid container mt={4} gap={2}>\r\n                        <Grid item xs={5}>\r\n                            <InputField\r\n                                label={\"Question :*\"}\r\n                                size={'small'}\r\n                                placeholder={\"Question\"}\r\n                                error={errors?.question?.message}\r\n                                register={register(\"question\", {\r\n                                    required: \"Please enter your question.\"\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={5} sm={5} >\r\n\r\n                            <SelectField\r\n                                size={'small'}\r\n                                label={'Type : *'}\r\n                                fullWidth={true}\r\n                                options={[{ id: 'demographic', name: 'Demographic' }, { id: 'past_data', name: 'Past Data' }]}\r\n                                selected={type}\r\n                                onSelect={(value) => {\r\n                                    setType(value)\r\n\r\n\r\n                                }}\r\n                                error={errors?.type?.message}\r\n                                register={register(\"type\", {\r\n                                    required: 'Please select type.',\r\n                                })}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item xs={12}>\r\n                            <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block' }}>\r\n\r\n                                Options :*\r\n                            </InputLabel>\r\n                            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', gap: 1, width: '49%' }}>\r\n                                <InputField\r\n\r\n                                    size={'small'}\r\n                                    placeholder={\"Add options\"}\r\n                                    register={register(\"newOption\")}\r\n                                    onKeyDown={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            e.preventDefault();\r\n                                            handleAddOption();\r\n                                        }\r\n                                    }}\r\n                                />\r\n                                <PrimaryButton sx={{ mb: 1 }} onClick={handleAddOption} title={\"Add\"} />\r\n                            </Box>\r\n                            {options?.map(option => (\r\n                                <Chip\r\n                                    key={option.id}\r\n                                    label={option.value}\r\n                                    onDelete={() => handleDeleteOption(option.id)}\r\n                                    sx={{ margin: '0.5rem' }}\r\n                                />\r\n                            ))}\r\n                        </Grid>\r\n                        <Grid item xs={5}><InputField\r\n                            label={\"Description :\"}\r\n                            size={'small'}\r\n                            multiline\r\n                            rows={4}\r\n                            placeholder={\"Description \"}\r\n                            error={errors?.description?.message}\r\n                            register={register(\"description\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n                    </Grid>\r\n\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '85%', mt: 2 }}>\r\n                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Submit\"} />\r\n                    </Box>\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateQuestions;\r\n"
        }
    ]
}