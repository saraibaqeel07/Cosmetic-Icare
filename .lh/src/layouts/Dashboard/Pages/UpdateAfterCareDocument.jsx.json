{
    "sourceFile": "src/layouts/Dashboard/Pages/UpdateAfterCareDocument.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1744023553732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1744023571984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n \r\n                 console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n \r\n                 const response = await axios.post(\r\n-                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n+                    `${import.meta.env.VITE_BASE_URL}/api/system/upload`,\r\n                     formData,\r\n                     {\r\n                         headers: {\r\n                             \"Content-Type\": \"multipart/form-data\",\r\n"
                },
                {
                    "date": 1744023596155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,9 @@\n                                 {uploadedImages?.length > 0 &&\r\n                                     uploadedImages.map((file, index) => (\r\n                                         <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                             {/* Clickable Document Icon */}\r\n-                                            <a href={file} target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: \"none\", color: \"inherit\" }}>\r\n+                                            <a href={import.meta.env.VITE_BASE_URL+file} target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: \"none\", color: \"inherit\" }}>\r\n                                                 <DescriptionIcon sx={{ fontSize: 50, color: \"#1976d2\", cursor: \"pointer\" }} />\r\n                                             </a>\r\n \r\n                                             {/* File Name */}\r\n"
                }
            ],
            "date": 1744023553732,
            "name": "Commit-0",
            "content": "import { useEffect, useRef, useState } from \"react\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Grid, IconButton, InputAdornment, InputLabel, Paper, TextField, Typography } from \"@mui/material\";\r\nimport InputField from \"../../../components/input\";\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\";\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport CloudUploadIcon from \"@mui/icons-material/CloudUpload\";\r\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\r\nimport DescriptionIcon from \"@mui/icons-material/Description\"; // Import document icon\r\n\r\n\r\n\r\nconst UpdateAfterCareDocument = () => {\r\n    const navigate = useNavigate()\r\n\r\n    const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm();\r\n    const [uploadedImages, setUploadedImages] = useState([]);\r\n\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n    const {\r\n        register: register4,\r\n        handleSubmit: handleSubmit4,\r\n        setValue: setValue4,\r\n        getValues: getValues4,\r\n        reset: reset4,\r\n        formState: { errors: errors4 },\r\n    } = useForm();\r\n\r\n    const { id } = useParams()\r\n    const fileInputRef = useRef(null);\r\n\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const [imageURL, setImageURL] = useState()\r\n    const [hovered, setHovered] = useState(false);\r\n\r\n\r\n\r\n\r\n    const handleRemoveImage = (index) => {\r\n        setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n    };\r\n\r\n    const UpdateAfterCareDocument = async () => {\r\n        setLoader(true);\r\n        try {\r\n            let obj = {\r\n                _id:id,\r\n                title: getValues('title'),\r\n                content: getValues('content'),\r\n\r\n                documents: uploadedImages\r\n\r\n            };\r\n\r\n            const promise = ApiServices.UpdateAfterCareDocument(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Navigate if response is successful\r\n            if (response?.responseCode === 200) {\r\n                console.log(response);\r\n                setImageURL(null)\r\n                navigate('/staff')\r\n\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            showErrorToast(error)\r\n        } finally {\r\n\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n\r\n    const [imageLoader, setImageLoader] = useState(false)\r\n\r\n    const handleFileChange = async (e) => {\r\n        setUploadedImages([\r\n\r\n        ])\r\n        setImageLoader(true)\r\n        try {\r\n            const files = e.target.files;\r\n            console.log(files.length);\r\n            if (files.length === 0) return; // Exit if no files are selected\r\n\r\n            setValue(\"images\", files, { shouldValidate: true }); // Store all files\r\n\r\n            const uploadedImages = [];\r\n            console.log(files.length);\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                const formData = new FormData();\r\n                formData.append(\"document\", files[i]);\r\n\r\n                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n\r\n                const response = await axios.post(\r\n                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n                    formData,\r\n                    {\r\n                        headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                const imagePath = response?.data?.data?.path;\r\n                if (imagePath) {\r\n                    uploadedImages.push( imagePath);\r\n                    console.log(\"Uploaded Image URL:\", \"https://cosmetic.theappkit.com\" + imagePath);\r\n                }\r\n            }\r\n\r\n            setImageLoader(false)\r\n            setUploadedImages(uploadedImages); // Store all uploaded image URLs\r\n            console.log(\"All Uploaded Images:\", uploadedImages);\r\n\r\n        } catch (error) {\r\n            console.error(\"Error uploading files:\", error);\r\n        }\r\n    };\r\n\r\n    const getData = async () => {\r\n        try {\r\n\r\n            let params = {\r\n                id: id\r\n            }\r\n            const data = await ApiServices.getAfterCareDocumentDetail(params);\r\n\r\n\r\n            console.log(data);\r\n\r\n            setValue('title', data?.data?.document?.title)\r\n            setValue('content', data?.data?.document?.content)\r\n            setUploadedImages(data?.data?.document?.documents)\r\n            setImageURL(data?.data?.userDetails?.picture)\r\n            setValue(\"media\", { shouldValidate: true });\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getData()\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#ffff', borderRadius: '12px' }}>\r\n\r\n\r\n\r\n                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(UpdateAfterCareDocument)} >\r\n\r\n\r\n                    <Grid container mt={4} spacing={2}>\r\n\r\n\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Title :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Title\"}\r\n                            error={errors?.title?.message}\r\n                            register={register(\"title\", {\r\n                                required:\r\n                                    \"Please enter your title.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Content :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Content\"}\r\n                            error={errors?.content?.message}\r\n                            register={register(\"content\", {\r\n                                required:\r\n                                    \"Please enter your content.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={12} sm={5}>\r\n                        <InputLabel sx={{    textTransform: \"capitalize\",mt:2,\r\n              textAlign: \"left\",\r\n              fontWeight: 600,\r\n              fontSize: \"14px\",\r\n              color: \"#333\",\r\n              marginBottom: \"4px\", }}>\r\n\r\n                                Upload  Documents :*\r\n                            </InputLabel>\r\n\r\n                            <Controller\r\n                                name=\"media\"\r\n                                control={control}\r\n                                rules={{\r\n                                    required: \"At least one media file is required\",\r\n                                    validate: (value) => {\r\n                                        if (!value || value.length === 0) {\r\n                                            return \"At least one media file is required\";\r\n                                        }\r\n                                        for (let i = 0; i < value.length; i++) {\r\n                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n                                                return \"Each file must be smaller than 10MB\";\r\n                                            }\r\n                                            const allowedTypes = [\r\n                                                \"image/\",\r\n                                               \r\n                                                \"application/pdf\",\r\n                                                \"application/msword\",\r\n                                                \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\r\n                                            ];\r\n                                            if (!allowedTypes.some(type => value[i].type.startsWith(type))) {\r\n                                                return \"Only images,PDFs, and Word documents are allowed\";\r\n                                            }\r\n                                        }\r\n                                        return true;\r\n                                    },\r\n                                }}\r\n                                render={({ field: { onChange } }) => (\r\n                                    <>\r\n                                        <Box\r\n                                            sx={{\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                textAlign: \"center\",\r\n                                                cursor: \"pointer\",\r\n                                                backgroundColor: \"#f9f9f9\",\r\n                                                height: '135px',\r\n                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                            }}\r\n                                            onClick={() => document.getElementById(\"upload-media\").click()}\r\n                                        >\r\n                                            {!imageLoader ? (\r\n                                                <>\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        accept=\"image/*,.pdf,.doc,.docx\"\r\n                                                        multiple\r\n                                                        style={{ display: \"none\" }}\r\n                                                        id=\"upload-media\"\r\n                                                        onChange={(e) => {\r\n                                                            const files = Array.from(e.target.files);\r\n                                                            onChange(files); // Update react-hook-form\r\n                                                            handleFileChange(e); // Handle upload logic\r\n                                                        }}\r\n                                                    />\r\n                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n                                                        Drag & drop or click to upload files\r\n                                                    </Typography>\r\n                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n                                                        Allowed: Images, PDFs, DOC, DOCX (Max 10MB per file)\r\n                                                    </Typography>\r\n                                                </>\r\n                                            ) : (\r\n                                                <CircularProgress size={90} />\r\n                                            )}\r\n                                        </Box>\r\n\r\n                                        {errors.media && (\r\n                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n                                                {errors.media.message}\r\n                                            </Typography>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            />\r\n\r\n\r\n\r\n\r\n\r\n\r\n                        </Grid>\r\n\r\n\r\n\r\n\r\n                        <Grid container p={2}>\r\n\r\n\r\n                            {uploadedImages?.length > 0 &&\r\n                                <Grid item xs={12}>\r\n                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n\r\n                                        Uploaded Documents :\r\n                                    </InputLabel>\r\n                                </Grid>}\r\n                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n                                {uploadedImages?.length > 0 &&\r\n                                    uploadedImages.map((file, index) => (\r\n                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                            {/* Clickable Document Icon */}\r\n                                            <a href={file} target=\"_blank\" rel=\"noopener noreferrer\" style={{ textDecoration: \"none\", color: \"inherit\" }}>\r\n                                                <DescriptionIcon sx={{ fontSize: 50, color: \"#1976d2\", cursor: \"pointer\" }} />\r\n                                            </a>\r\n\r\n                                            {/* File Name */}\r\n                                            <Typography\r\n                                                variant=\"caption\"\r\n                                                sx={{\r\n                                                    display: \"block\",\r\n                                                    mt: 1,\r\n                                                    maxWidth: \"150px\",\r\n                                                    whiteSpace: \"nowrap\",\r\n                                                    overflow: \"hidden\",\r\n                                                    textOverflow: \"ellipsis\",\r\n                                                }}\r\n                                            >\r\n                                                {file.split(\"/\").pop()}\r\n                                            </Typography>\r\n\r\n                                            {/* Remove Button */}\r\n                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n                                                <IconButton\r\n                                                    onClick={() => handleRemoveImage(index)}\r\n                                                    sx={{\r\n                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n                                                        color: \"#fff\",\r\n                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n                                                        width: 20,\r\n                                                        height: 20,\r\n                                                        borderRadius: \"50%\",\r\n                                                        p: 0.5,\r\n                                                    }}\r\n                                                >\r\n                                                    <CloseIcon fontSize=\"small\" />\r\n                                                </IconButton>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    ))}\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                        <PrimaryButton loader={loader} disabled={imageLoader || loader} type={'submit'} title={\"Update\"} />\r\n                    </Box>\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UpdateAfterCareDocument\r\n"
        }
    ]
}