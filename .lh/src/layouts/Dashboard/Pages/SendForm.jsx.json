{
    "sourceFile": "src/layouts/Dashboard/Pages/SendForm.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1743288558031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1743288785632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { PrimaryButton } from \"../../../components/buttons\";\r\n import { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, FormLabel, Grid, IconButton, InputAdornment, InputLabel, Paper, Radio, RadioGroup, TextField, Typography } from \"@mui/material\";\r\n import InputField from \"../../../components/input\";\r\n import { Controller, useFieldArray, useForm } from \"react-hook-form\";\r\n-import { useNavigate } from \"react-router-dom\";\r\n+import { useNavigate, useParams } from \"react-router-dom\";\r\n import axios from \"axios\";\r\n import { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\";\r\n import UploadIcon from \"@mui/icons-material/Upload\";\r\n import OTPInput from \"react-otp-input\";\r\n@@ -20,11 +20,13 @@\n import DeleteIcon from \"@mui/icons-material/Delete\";\r\n import UploadFileIcon from '@mui/icons-material/UploadFile';\r\n import CloseIcon from '@mui/icons-material/Close';\r\n import dayjs from \"dayjs\";\r\n+import { id } from \"date-fns/locale\";\r\n \r\n \r\n-const SendForm = () => {\r\n+const UpdateConsentForm = () => {\r\n+    const { id } = useParams()\r\n     const navigate = useNavigate()\r\n     const [userData, setUserData] = useState(null)\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n         defaultValues: {\r\n@@ -85,9 +87,9 @@\n             }\r\n         }\r\n     };\r\n     const [title, setTitle] = useState(null)\r\n-\r\n+    const [formData, setFormData] = useState(null)\r\n     const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n     const [otp, setOtp] = useState(\"\");\r\n     const [otpError, setOtpError] = useState(false);\r\n     const [timer, setTimer] = useState(30);\r\n@@ -245,13 +247,16 @@\n             console.log(error);\r\n \r\n         }\r\n     };\r\n-    const SendForm = async () => {\r\n+    const UpdateConsentForm = async (formData) => {\r\n+        console.log(formData);\r\n+\r\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n-                patient_id: patientType == 'existing' ?  selectedPatient?.id : null,\r\n+                _id: id,\r\n+                patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n                 form_id: null,\r\n                 aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n                 treatment_date: getValues('treatmentDate'),\r\n                 consultation_date: getValues('consultationDate'),\r\n@@ -286,18 +291,19 @@\n                 },\r\n                 batch_images: uploadedImages,\r\n                 before_images: beforeImages,\r\n                 after_images: afterImages,\r\n-                further_treatment: furtherFields,\r\n-                treatment_record: fields,\r\n+                further_treatment: formData?.furtherFields,\r\n+                treatment_record: formData?.records,\r\n                 extra_notes: getValues('extranotes'),\r\n                 permission_marketing: permissions?.marketing,\r\n                 offers: permissions?.offers,\r\n \r\n \r\n             };\r\n+            console.log(obj);\r\n \r\n-            const promise = ApiServices.CreateForm(obj);\r\n+            const promise = ApiServices.UpdateForm(obj);\r\n \r\n             // Handle the API response properly\r\n             const response = await promise;\r\n             console.log(response);\r\n@@ -308,9 +314,9 @@\n                 \"Added Successfully\",\r\n                 \"Something Went Wrong\"\r\n             );\r\n \r\n-            // Navigate if response is successful\r\n+           \r\n             if (response?.responseCode === 200) {\r\n                 console.log(response);\r\n                 setImageURL(null)\r\n                 navigate('/consent-forms')\r\n@@ -325,8 +331,9 @@\n \r\n             setLoader(false);\r\n         }\r\n     };\r\n+    console.log(watch());\r\n \r\n     const SendOtp = async (val) => {\r\n         if (val != 'resend') {\r\n             setIsLoading(true)\r\n@@ -641,19 +648,108 @@\n                 canvas.off();\r\n             }\r\n         });\r\n     }, []);\r\n+    const getData = async () => {\r\n+        try {\r\n+            let params = {\r\n+                id: id,\r\n \r\n+            };\r\n+\r\n+            const data = await ApiServices.getFormDetail(params);\r\n+            let form = data?.data?.form\r\n+            setValue('treatmentDate', dayjs(form?.treatment_date))\r\n+            setValue('consultationDate', dayjs(form?.consultation_date))\r\n+            setPermissions({\r\n+                marketing: form?.permission_marketing ? 'yes' : 'no',\r\n+                offers: form?.offers ? 'yes' : 'no',\r\n+            })\r\n+            setFormData(form)\r\n+            setValue(\"media\", { shouldValidate: true });\r\n+            setValue(\"media2\", { shouldValidate: true });\r\n+            setValue(\"media3\", { shouldValidate: true });\r\n+            setSignature(form?.treatment_plan?.patient_sign)\r\n+            setValue('patientDate', dayjs(form?.treatment_plan?.date))\r\n+            setValue('patientConcerns', form?.treatment_plan?.patient_concerns)\r\n+            setValue('patientGoal', form?.treatment_plan?.patient_goals)\r\n+            setValue('advisedPlan', form?.treatment_plan?.advised_plan)\r\n+            setValue('expectedResult', form?.treatment_plan?.expected_result)\r\n+            let recordData = form?.treatment_record?.map((doc) => ({\r\n+                ...doc,\r\n+\r\n+                date: dayjs(doc?.date)\r\n+            }))\r\n+            let furtherData = form?.further_treatment?.map((doc) => ({\r\n+                ...doc,\r\n+\r\n+                date: dayjs(doc?.date)\r\n+            }))\r\n+            setValue(\"records\", recordData);\r\n+            setValue(\"furtherFields\", furtherData);\r\n+            setValue(\"extranotes\", form?.extra_notes);\r\n+            setUploadedImages(form?.batch_images)\r\n+            setBeforeImages(form?.before_images)\r\n+            setAfterImages(form?.after_images)\r\n+\r\n+        } catch (error) {\r\n+            console.error(\"Error fetching location:\", error);\r\n+        }\r\n+    };\r\n+    console.log(permissions);\r\n+\r\n+    useEffect(() => {\r\n+        getData()\r\n+    }, [])\r\n+    useEffect(() => {\r\n+        let value = patients?.find(item => item?._id == formData?.patient_id)\r\n+        setSelectedPatient(patients?.find(item => item?._id == formData?.patient_id))\r\n+        setSelectedDocument(documents?.find(item => item?._id == formData?.aftercare_document))\r\n+\r\n+        setValue('fname', value?.first_name || \"\");\r\n+        setValue('lname', value?.last_name || \"\");\r\n+        setValue('email', value?.email || \"\");\r\n+        setValue('post', value?.post_code || \"\");\r\n+        setValue('phone', value?.phone || \"\");\r\n+        setValue('address', value?.address || \"\");\r\n+        setValue('notes', value?.notes || \"\");\r\n+        setValue('name', value?.kin_details?.name || \"\");\r\n+        setValue('kinemail', value?.kin_details?.email || \"\");\r\n+        setValue('kinphone', value?.kin_details?.phone || \"\");\r\n+        setValue('kinaddress', value?.kin_details?.address || \"\");\r\n+        setValue('genname', value?.general_practitioner?.name || \"\");\r\n+        setValue('genemail', value?.general_practitioner?.email || \"\");\r\n+        setValue('genphone', value?.general_practitioner?.phone || \"\");\r\n+        setValue('genaddress', value?.general_practitioner?.address || \"\");\r\n+        console.log(\"Raw DOB:\", value?.dob);\r\n+\r\n+        if (value?.dob) {\r\n+            // Convert to Dayjs format\r\n+            const parsedDate = dayjs(value.dob);\r\n+\r\n+            // Check if the conversion is valid\r\n+            if (!parsedDate.isValid()) {\r\n+                console.error(\"Invalid DOB Format:\", value.dob);\r\n+                return;\r\n+            }\r\n+\r\n+            console.log(\"Parsed Date:\", parsedDate);\r\n+            setValue(\"selectedDate\", parsedDate);\r\n+        }\r\n+\r\n+    }, [patients, documents])\r\n+\r\n+\r\n     return (\r\n         <div>\r\n \r\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#eff6ff', borderRadius: '12px' }}>\r\n \r\n \r\n \r\n-                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(SendForm)} >\r\n+                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(UpdateConsentForm)} >\r\n                     <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n-                    Medical History Form\r\n+                        Medical History Form\r\n                     </Typography>\r\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n@@ -832,14 +928,15 @@\n                                     <SelectField\r\n                                         size={'small'}\r\n                                         newLabel={'Select Patient'}\r\n                                         fullWidth={true}\r\n+                                        disabled={true}\r\n                                         options={patients}\r\n                                         selected={selectedPatient}\r\n                                         onSelect={(value) => {\r\n                                             setSelectedPatient(value);\r\n                                             console.log(\"Selected Patient:\", value);\r\n-                                    \r\n+\r\n                                             setValue('fname', value?.first_name || \"\");\r\n                                             setValue('lname', value?.last_name || \"\");\r\n                                             setValue('email', value?.email || \"\");\r\n                                             setValue('post', value?.post_code || \"\");\r\n@@ -854,19 +951,19 @@\n                                             setValue('genemail', value?.general_practitioner?.email || \"\");\r\n                                             setValue('genphone', value?.general_practitioner?.phone || \"\");\r\n                                             setValue('genaddress', value?.general_practitioner?.address || \"\");\r\n                                             console.log(\"Raw DOB:\", value?.dob);\r\n-                                    \r\n+\r\n                                             if (value?.dob) {\r\n                                                 // Convert to Dayjs format\r\n                                                 const parsedDate = dayjs(value.dob);\r\n-                                    \r\n+\r\n                                                 // Check if the conversion is valid\r\n                                                 if (!parsedDate.isValid()) {\r\n                                                     console.error(\"Invalid DOB Format:\", value.dob);\r\n                                                     return;\r\n                                                 }\r\n-                                    \r\n+\r\n                                                 console.log(\"Parsed Date:\", parsedDate);\r\n                                                 setValue(\"selectedDate\", parsedDate);\r\n                                             }\r\n                                         }}\r\n@@ -1337,10 +1434,8 @@\n                         </Grid>\r\n                         <Grid container p={1}>\r\n                             <Divider sx={{ mt: 4, width: '100%' }} />\r\n                         </Grid>\r\n-                        {console.log(watch('records'))\r\n-                        }\r\n                         <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n \r\n                         <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                             {fields.map((item, index) => (\r\n@@ -1963,9 +2058,9 @@\n                             })}\r\n                         /></Grid>\r\n                     </Grid>\r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n-                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n+                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Update\"} />\r\n                     </Box>\r\n                 </Box>\r\n             </Paper>\r\n         </div >\r\n"
                },
                {
                    "date": 1743288792385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n import dayjs from \"dayjs\";\r\n import { id } from \"date-fns/locale\";\r\n \r\n \r\n-const UpdateConsentForm = () => {\r\n+const SendForm = () => {\r\n     const { id } = useParams()\r\n     const navigate = useNavigate()\r\n     const [userData, setUserData] = useState(null)\r\n     const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n"
                },
                {
                    "date": 1743288838644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1140,925 +1140,10 @@\n                         /></Grid>\r\n \r\n \r\n                     </Grid>\r\n-                    <Divider sx={{ mt: 4 }} />\r\n-                    <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n-                        Next of Kin Details\r\n-                    </Typography>\r\n-                    <Grid container mt={4} spacing={2}>\r\n-\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Name :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Name\"}\r\n-                            error={errors?.name?.message}\r\n-                            register={register(\"name\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Email :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Email\"}\r\n-                            error={errors?.kinemail?.message}\r\n-                            register={register(\"kinemail\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Phone Number :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Phone Number\"}\r\n-                            error={errors?.kinphone?.message}\r\n-                            register={register(\"kinphone\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Address :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Address\"}\r\n-                            error={errors?.kinaddress?.message}\r\n-                            register={register(\"kinaddress\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-\r\n-\r\n-                    </Grid>\r\n-                    <Divider sx={{ mt: 4 }} />\r\n-                    <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n-                        General Practitioners(GP / Doctors)\r\n-                    </Typography>\r\n-                    <Grid container mt={4} spacing={2}>\r\n-\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Name :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Name\"}\r\n-                            error={errors?.genname?.message}\r\n-                            register={register(\"genname\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Email :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Email\"}\r\n-                            error={errors?.genemail?.message}\r\n-                            register={register(\"genemail\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Phone Number :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Phone Number\"}\r\n-                            error={errors?.genphone?.message}\r\n-                            register={register(\"genphone\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Address :\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Address\"}\r\n-                            error={errors?.genaddress?.message}\r\n-                            register={register(\"genaddress\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Grid container spacing={2} p={2}>\r\n-                            {/* Marketing Permission */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n-                                <FormControl component=\"fieldset\">\r\n-\r\n-                                    <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n-                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n-                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n-                                    </RadioGroup>\r\n-                                </FormControl>\r\n-                            </Grid>\r\n-\r\n-                            {/* Offers & Reminders Permission */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n-                                <FormControl component=\"fieldset\">\r\n-\r\n-                                    <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n-                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n-                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n-                                    </RadioGroup>\r\n-                                </FormControl>\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n-                            Treatment plan section\r\n-                        </Typography>\r\n-\r\n-                        <Grid container spacing={2} p={2}>\r\n-                            {/* Patient Concerns */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <InputField\r\n-                                    label=\"Patient concerns\"\r\n-                                    size=\"small\"\r\n-                                    placeholder=\"Patient concerns\"\r\n-                                    error={errors?.patientConcerns?.message}\r\n-                                    register={register(\"patientConcerns\", { required: false })}\r\n-                                    multiline\r\n-                                    rows={4}\r\n-                                />\r\n-                            </Grid>\r\n-\r\n-                            {/* Patient Goal */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <InputField\r\n-                                    label=\"Patient goal\"\r\n-                                    size=\"small\"\r\n-                                    placeholder=\"Patient goal\"\r\n-                                    error={errors?.patientGoal?.message}\r\n-                                    register={register(\"patientGoal\", { required: false })}\r\n-                                    multiline\r\n-                                    rows={4}\r\n-                                />\r\n-                            </Grid>\r\n-\r\n-                            {/* Advised Plan/Product */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <InputField\r\n-                                    label=\"Advised Plan/product\"\r\n-                                    size=\"small\"\r\n-                                    placeholder=\"Advised Plan/product\"\r\n-                                    error={errors?.advisedPlan?.message}\r\n-                                    register={register(\"advisedPlan\", { required: false })}\r\n-                                    multiline\r\n-                                    rows={4}\r\n-                                />\r\n-                            </Grid>\r\n-\r\n-                            {/* Expected Result */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <InputField\r\n-                                    label=\"Expected Result\"\r\n-                                    size=\"small\"\r\n-                                    placeholder=\"Expected Result\"\r\n-                                    error={errors?.expectedResult?.message}\r\n-                                    register={register(\"expectedResult\", { required: false })}\r\n-                                    multiline\r\n-                                    rows={4}\r\n-                                />\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                        <Typography variant=\"p\" fontWeight={500} mb={2} p={2}>\r\n-                            I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n-                        </Typography>\r\n-                        <Grid container spacing={5} p={2} alignItems=\"center\">\r\n-                            {/* Date Field */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                                    <Grid container spacing={2}>\r\n-                                        {/* Single Date Selection */}\r\n-                                        <Grid item xs={12}>\r\n-                                            <Box>\r\n-                                                <InputLabel sx={{\r\n-                                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                                    fontSize: \"14px\",\r\n-                                                    color: \"#333\",\r\n-                                                    marginBottom: 1.5,\r\n-                                                }}>\r\n-                                                    Patient Date :*\r\n-                                                </InputLabel>\r\n-                                                <Controller\r\n-                                                    name=\"patientDate\"\r\n-                                                    control={control}\r\n-                                                    rules={{ required: \"Please select a date\" }}\r\n-                                                    render={({ field }) => (\r\n-                                                        <DatePicker\r\n-                                                            {...field}\r\n-                                                            value={field.value || null}\r\n-                                                            onChange={(newValue) => field.onChange(newValue)}\r\n-                                                            slotProps={{\r\n-                                                                textField: {\r\n-                                                                    size: \"small\",\r\n-                                                                    fullWidth: true,\r\n-                                                                    sx: {\r\n-                                                                        \"& .MuiOutlinedInput-root\": {\r\n-                                                                            borderRadius: '12px',\r\n-                                                                            \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n-                                                                            \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n-                                                                            \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n-                                                                        },\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            }}\r\n-                                                        />\r\n-                                                    )}\r\n-                                                />\r\n-                                                {errors.patientDate && (\r\n-                                                    <Typography color=\"error\">{errors.patientDate.message}</Typography>\r\n-                                                )}\r\n-                                            </Box>\r\n-                                        </Grid>\r\n-\r\n-\r\n-\r\n-\r\n-                                    </Grid>\r\n-\r\n-\r\n-                                </LocalizationProvider>\r\n-                            </Grid>\r\n-\r\n-                            {/* Signature Canvas */}\r\n-                            <Grid item xs={6} mt={2}>\r\n-                                <Typography>Patient Signature:</Typography>\r\n-                                <SignatureCanvas\r\n-                                    ref={sigCanvas}\r\n-                                    penColor=\"black\"\r\n-                                    canvasProps={{\r\n-                                        width: 300,\r\n-                                        height: 150,\r\n-                                        className: \"sigCanvas\",\r\n-                                        style: { border: \"1px dashed black\" },\r\n-                                    }}\r\n-                                />\r\n-                                <Grid container spacing={1} mt={1}>\r\n-                                    <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n-                                            Clear Signature\r\n-                                        </Button>\r\n-                                    </Grid>\r\n-                                    <Grid item>\r\n-                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n-                                            Save Signature\r\n-                                        </Button>\r\n-                                    </Grid>\r\n-\r\n-                                </Grid>\r\n-\r\n-\r\n-                            </Grid>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n-\r\n-                        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                            {fields.map((item, index) => (\r\n-                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n-\r\n-                                    {/* Patient Date Selection */}\r\n-                                    <Grid item xs={3}>\r\n-                                        <Box>\r\n-                                            <InputLabel\r\n-                                                sx={{\r\n-                                                    textTransform: \"capitalize\",\r\n-                                                    textAlign: \"left\",\r\n-                                                    fontWeight: 700,\r\n-                                                    fontSize: \"14px\",\r\n-                                                    color: \"#333\",\r\n-                                                    marginBottom: 1.5,\r\n-                                                }}\r\n-                                            >\r\n-                                                Date :*\r\n-                                            </InputLabel>\r\n-\r\n-                                            <Controller\r\n-                                                name={`records.${index}.date`}\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: \"12px\",\r\n-                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n-                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.records?.[index]?.date && (\r\n-                                                <Typography color=\"error\">\r\n-                                                    {errors.records[index].date.message}\r\n-                                                </Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n-\r\n-                                    {/* Amount Field */}\r\n-                                    <Grid item xs={3} mt={2}>\r\n-                                        <InputField\r\n-                                            label=\"Amount\"\r\n-                                            placeholder=\"Order Amount\"\r\n-                                            size=\"small\"\r\n-                                            register={register(`records.${index}.amount`)}\r\n-                                        />\r\n-                                    </Grid>\r\n-\r\n-\r\n-\r\n-                                    {/* Description Field */}\r\n-                                    <Grid item xs={4}>\r\n-                                        <InputField\r\n-                                            label=\"Description\"\r\n-                                            multiline\r\n-                                            rows={3}\r\n-                                            placeholder=\"Description\"\r\n-                                            register={register(`records.${index}.description`)}\r\n-                                        />\r\n-                                    </Grid>\r\n-                                    {/* Remove Button (only for additional fields) */}\r\n-                                    <Grid item xs={1}>\r\n-                                        {index > 0 && (\r\n-                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n-                                                <DeleteIcon />\r\n-                                            </IconButton>\r\n-                                        )}\r\n-                                    </Grid>\r\n-                                </Grid>\r\n-                            ))}\r\n-                        </LocalizationProvider>\r\n-\r\n-\r\n-\r\n-                        <Grid container p={2}>\r\n-                            <Button\r\n-                                variant=\"contained\"\r\n-                                color=\"primary\"\r\n-                                onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n-                                sx={{ mt: 2, textTransform: 'capitalize' }}\r\n-                            >\r\n-                                Add More\r\n-                            </Button>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Grid item xs={12} sm={5}>\r\n-                            <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", mt: 2,\r\n-                                textAlign: \"left\",\r\n-                                fontWeight: 600,\r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n-                                Upload Batch Images :*\r\n-                            </InputLabel>\r\n-\r\n-                            <Controller\r\n-                                name=\"media\"\r\n-                                control={control}\r\n-                                rules={{\r\n-                                    required: \"At least one image file is required\",\r\n-                                    validate: (value) => {\r\n-                                        if (!value || value.length === 0) {\r\n-                                            return \"At least one image file is required\";\r\n-                                        }\r\n-                                        for (let i = 0; i < value.length; i++) {\r\n-                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n-                                                return \"Each file must be smaller than 10MB\";\r\n-                                            }\r\n-                                            if (!value[i].type.startsWith(\"image/\")) {\r\n-                                                return \"Only image files are allowed\";\r\n-                                            }\r\n-                                        }\r\n-                                        return true;\r\n-                                    },\r\n-                                }}\r\n-                                render={({ field: { onChange } }) => (\r\n-                                    <>\r\n-                                        <Box\r\n-                                            sx={{\r\n-                                                borderRadius: \"8px\",\r\n-                                                padding: \"20px\",\r\n-                                                textAlign: \"center\",\r\n-                                                cursor: \"pointer\",\r\n-                                                backgroundColor: \"#f9f9f9\",\r\n-                                                height: '135px',\r\n-                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n-                                            }}\r\n-                                            onClick={() => document.getElementById(\"upload-media\").click()}\r\n-                                        >\r\n-                                            {!imageLoader ? (\r\n-                                                <>\r\n-                                                    <input\r\n-                                                        type=\"file\"\r\n-                                                        accept=\"image/*\"\r\n-                                                        multiple\r\n-                                                        style={{ display: \"none\" }}\r\n-                                                        id=\"upload-media\"\r\n-                                                        onChange={(e) => {\r\n-                                                            const files = Array.from(e.target.files);\r\n-                                                            onChange(files); // Update react-hook-form\r\n-                                                            handleFileChange2(e); // Handle upload logic\r\n-                                                        }}\r\n-                                                    />\r\n-                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n-                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n-                                                        Drag & drop or click to upload images\r\n-                                                    </Typography>\r\n-                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n-                                                        Allowed: Images (Max 10MB per file)\r\n-                                                    </Typography>\r\n-                                                </>\r\n-                                            ) : (\r\n-                                                <CircularProgress size={90} />\r\n-                                            )}\r\n-                                        </Box>\r\n-\r\n-                                        {errors.media && (\r\n-                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n-                                                {errors.media.message}\r\n-                                            </Typography>\r\n-                                        )}\r\n-                                    </>\r\n-                                )}\r\n-                            />\r\n-                        </Grid>\r\n-\r\n-                        <Grid container p={2}>\r\n-                            {uploadedImages?.length > 0 && (\r\n-                                <Grid item xs={12}>\r\n-                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n-                                        Uploaded Batch Images :\r\n-                                    </InputLabel>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n-                                {uploadedImages?.length > 0 &&\r\n-                                    uploadedImages.map((file, index) => (\r\n-                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n-                                            <img\r\n-                                                src={file}\r\n-                                                alt=\"Uploaded Preview\"\r\n-                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n-                                            />\r\n-                                            <Typography\r\n-                                                variant=\"caption\"\r\n-                                                sx={{\r\n-                                                    display: \"block\",\r\n-                                                    mt: 1,\r\n-                                                    maxWidth: \"150px\",\r\n-                                                    whiteSpace: \"nowrap\",\r\n-                                                    overflow: \"hidden\",\r\n-                                                    textOverflow: \"ellipsis\",\r\n-                                                }}\r\n-                                            >\r\n-                                                {file.split(\"/\").pop()}\r\n-                                            </Typography>\r\n-                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n-                                                <IconButton\r\n-                                                    onClick={() => handleRemoveImage(index)}\r\n-                                                    sx={{\r\n-                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n-                                                        color: \"#fff\",\r\n-                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n-                                                        width: 20,\r\n-                                                        height: 20,\r\n-                                                        borderRadius: \"50%\",\r\n-                                                        p: 0.5,\r\n-                                                    }}\r\n-                                                >\r\n-                                                    <CloseIcon fontSize=\"small\" />\r\n-                                                </IconButton>\r\n-                                            </Box>\r\n-                                        </Box>\r\n-                                    ))}\r\n-                            </Box>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Grid item xs={12} sm={5}>\r\n-                            <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", mt: 2,\r\n-                                textAlign: \"left\",\r\n-                                fontWeight: 600,\r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n-                                Upload Before Images :*\r\n-                            </InputLabel>\r\n-\r\n-                            <Controller\r\n-                                name=\"media2\"\r\n-                                control={control}\r\n-                                rules={{\r\n-                                    required: \"At least one image file is required\",\r\n-                                    validate: (value) => {\r\n-                                        if (!value || value.length === 0) {\r\n-                                            return \"At least one image file is required\";\r\n-                                        }\r\n-                                        for (let i = 0; i < value.length; i++) {\r\n-                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n-                                                return \"Each file must be smaller than 10MB\";\r\n-                                            }\r\n-                                            if (!value[i].type.startsWith(\"image/\")) {\r\n-                                                return \"Only image files are allowed\";\r\n-                                            }\r\n-                                        }\r\n-                                        return true;\r\n-                                    },\r\n-                                }}\r\n-                                render={({ field: { onChange } }) => (\r\n-                                    <>\r\n-                                        <Box\r\n-                                            sx={{\r\n-                                                borderRadius: \"8px\",\r\n-                                                padding: \"20px\",\r\n-                                                textAlign: \"center\",\r\n-                                                cursor: \"pointer\",\r\n-                                                backgroundColor: \"#f9f9f9\",\r\n-                                                height: '135px',\r\n-                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n-                                            }}\r\n-                                            onClick={() => document.getElementById(\"upload-media2\").click()}\r\n-                                        >\r\n-                                            {!imageLoaderBefore ? (\r\n-                                                <>\r\n-                                                    <input\r\n-                                                        type=\"file\"\r\n-                                                        accept=\"image/*\"\r\n-                                                        multiple\r\n-                                                        style={{ display: \"none\" }}\r\n-                                                        id=\"upload-media2\"\r\n-                                                        onChange={(e) => {\r\n-                                                            const files = Array.from(e.target.files);\r\n-                                                            onChange(files); // Update react-hook-form\r\n-                                                            handleFileChange3(e); // Handle upload logic\r\n-                                                        }}\r\n-                                                    />\r\n-                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n-                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n-                                                        Drag & drop or click to upload images\r\n-                                                    </Typography>\r\n-                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n-                                                        Allowed: Images (Max 10MB per file)\r\n-                                                    </Typography>\r\n-                                                </>\r\n-                                            ) : (\r\n-                                                <CircularProgress size={90} />\r\n-                                            )}\r\n-                                        </Box>\r\n-\r\n-                                        {errors.media2 && (\r\n-                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n-                                                {errors.media2.message}\r\n-                                            </Typography>\r\n-                                        )}\r\n-                                    </>\r\n-                                )}\r\n-                            />\r\n-                        </Grid>\r\n-\r\n-                        <Grid container p={2}>\r\n-                            {beforeImages?.length > 0 && (\r\n-                                <Grid item xs={12}>\r\n-                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n-                                        Uploaded Before Images :\r\n-                                    </InputLabel>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n-                                {beforeImages?.length > 0 &&\r\n-                                    beforeImages.map((file, index) => (\r\n-                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n-                                            <img\r\n-                                                src={file}\r\n-                                                alt=\"Uploaded Preview\"\r\n-                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n-                                            />\r\n-                                            <Typography\r\n-                                                variant=\"caption\"\r\n-                                                sx={{\r\n-                                                    display: \"block\",\r\n-                                                    mt: 1,\r\n-                                                    maxWidth: \"150px\",\r\n-                                                    whiteSpace: \"nowrap\",\r\n-                                                    overflow: \"hidden\",\r\n-                                                    textOverflow: \"ellipsis\",\r\n-                                                }}\r\n-                                            >\r\n-                                                {file.split(\"/\").pop()}\r\n-                                            </Typography>\r\n-                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n-                                                <IconButton\r\n-                                                    onClick={() => handleRemoveImage2(index)}\r\n-                                                    sx={{\r\n-                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n-                                                        color: \"#fff\",\r\n-                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n-                                                        width: 20,\r\n-                                                        height: 20,\r\n-                                                        borderRadius: \"50%\",\r\n-                                                        p: 0.5,\r\n-                                                    }}\r\n-                                                >\r\n-                                                    <CloseIcon fontSize=\"small\" />\r\n-                                                </IconButton>\r\n-                                            </Box>\r\n-                                        </Box>\r\n-                                    ))}\r\n-                            </Box>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Grid item xs={12} sm={5}>\r\n-                            <InputLabel sx={{\r\n-                                textTransform: \"capitalize\", mt: 2,\r\n-                                textAlign: \"left\",\r\n-                                fontWeight: 600,\r\n-                                fontSize: \"14px\",\r\n-                                color: \"#333\",\r\n-                                marginBottom: \"4px\",\r\n-                            }}>\r\n-                                Upload After Images :*\r\n-                            </InputLabel>\r\n-\r\n-                            <Controller\r\n-                                name=\"media3\"\r\n-                                control={control}\r\n-                                rules={{\r\n-                                    required: \"At least one image file is required\",\r\n-                                    validate: (value) => {\r\n-                                        if (!value || value.length === 0) {\r\n-                                            return \"At least one image file is required\";\r\n-                                        }\r\n-                                        for (let i = 0; i < value.length; i++) {\r\n-                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n-                                                return \"Each file must be smaller than 10MB\";\r\n-                                            }\r\n-                                            if (!value[i].type.startsWith(\"image/\")) {\r\n-                                                return \"Only image files are allowed\";\r\n-                                            }\r\n-                                        }\r\n-                                        return true;\r\n-                                    },\r\n-                                }}\r\n-                                render={({ field: { onChange } }) => (\r\n-                                    <>\r\n-                                        <Box\r\n-                                            sx={{\r\n-                                                borderRadius: \"8px\",\r\n-                                                padding: \"20px\",\r\n-                                                textAlign: \"center\",\r\n-                                                cursor: \"pointer\",\r\n-                                                backgroundColor: \"#f9f9f9\",\r\n-                                                height: '135px',\r\n-                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n-                                            }}\r\n-                                            onClick={() => document.getElementById(\"upload-media3\").click()}\r\n-                                        >\r\n-                                            {!imageLoaderAfter ? (\r\n-                                                <>\r\n-                                                    <input\r\n-                                                        type=\"file\"\r\n-                                                        accept=\"image/*\"\r\n-                                                        multiple\r\n-                                                        style={{ display: \"none\" }}\r\n-                                                        id=\"upload-media3\"\r\n-                                                        onChange={(e) => {\r\n-                                                            const files = Array.from(e.target.files);\r\n-                                                            onChange(files); // Update react-hook-form\r\n-                                                            handleFileChange4(e); // Handle upload logic\r\n-                                                        }}\r\n-                                                    />\r\n-                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n-                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n-                                                        Drag & drop or click to upload images\r\n-                                                    </Typography>\r\n-                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n-                                                        Allowed: Images (Max 10MB per file)\r\n-                                                    </Typography>\r\n-                                                </>\r\n-                                            ) : (\r\n-                                                <CircularProgress size={90} />\r\n-                                            )}\r\n-                                        </Box>\r\n-\r\n-                                        {errors.media3 && (\r\n-                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n-                                                {errors.media3.message}\r\n-                                            </Typography>\r\n-                                        )}\r\n-                                    </>\r\n-                                )}\r\n-                            />\r\n-                        </Grid>\r\n-\r\n-                        <Grid container p={2}>\r\n-                            {afterImages?.length > 0 && (\r\n-                                <Grid item xs={12}>\r\n-                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n-                                        Uploaded After Images :\r\n-                                    </InputLabel>\r\n-                                </Grid>\r\n-                            )}\r\n-                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n-                                {afterImages?.length > 0 &&\r\n-                                    afterImages.map((file, index) => (\r\n-                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n-                                            <img\r\n-                                                src={file}\r\n-                                                alt=\"Uploaded Preview\"\r\n-                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n-                                            />\r\n-                                            <Typography\r\n-                                                variant=\"caption\"\r\n-                                                sx={{\r\n-                                                    display: \"block\",\r\n-                                                    mt: 1,\r\n-                                                    maxWidth: \"150px\",\r\n-                                                    whiteSpace: \"nowrap\",\r\n-                                                    overflow: \"hidden\",\r\n-                                                    textOverflow: \"ellipsis\",\r\n-                                                }}\r\n-                                            >\r\n-                                                {file.split(\"/\").pop()}\r\n-                                            </Typography>\r\n-                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n-                                                <IconButton\r\n-                                                    onClick={() => handleRemoveImage3(index)}\r\n-                                                    sx={{\r\n-                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n-                                                        color: \"#fff\",\r\n-                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n-                                                        width: 20,\r\n-                                                        height: 20,\r\n-                                                        borderRadius: \"50%\",\r\n-                                                        p: 0.5,\r\n-                                                    }}\r\n-                                                >\r\n-                                                    <CloseIcon fontSize=\"small\" />\r\n-                                                </IconButton>\r\n-                                            </Box>\r\n-                                        </Box>\r\n-                                    ))}\r\n-                            </Box>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Typography variant=\"h6\" p={2} sx={{ mt: 4, fontWeight: 'bold' }}>Further Records</Typography>\r\n-\r\n-                        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                            {furtherFields.map((item, index) => (\r\n-                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n-                                    {/* Date Selection */}\r\n-                                    <Grid item xs={5}>\r\n-                                        <Box>\r\n-                                            <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1.5 }}>\r\n-                                                Further Date :*\r\n-                                            </InputLabel>\r\n-                                            <Controller\r\n-                                                name={`furtherFields.${index}.date`}\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: \"12px\",\r\n-                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n-                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.furtherFields?.[index]?.date && (\r\n-                                                <Typography color=\"error\">\r\n-                                                    {errors.furtherFields[index].date.message}\r\n-                                                </Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                        <Typography mt={2}>\r\n-                                            I confirm there has not been any changes to my medical history or my health since completing this form , it is still true and up to date.\r\n-                                        </Typography>\r\n-                                    </Grid>\r\n-\r\n-                                    {/* Signature Field */}\r\n-                                    <Grid item xs={5}>\r\n-                                        <Box>\r\n-                                            <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1 }}>\r\n-                                                Signature :*\r\n-                                            </InputLabel>\r\n-                                            <SignatureCanvas\r\n-                                                ref={(el) => (signCanvasRefs.current[index] = el)}\r\n-                                                penColor=\"black\"\r\n-                                                canvasProps={{ width: 300, height: 150, style: { border: \"1px dashed black\" } }}\r\n-                                            />\r\n-\r\n-                                        </Box>\r\n-                                        <Grid container spacing={1} mt={1}>\r\n-                                            <Grid item>\r\n-                                                <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)}>\r\n-                                                    Clear Signature\r\n-                                                </Button>\r\n-                                            </Grid>\r\n-                                            <Grid item>\r\n-                                                <Button variant=\"contained\" color=\"primary\" onClick={() => updateSignature(index)}>\r\n-                                                    Save Signature\r\n-                                                </Button>\r\n-                                            </Grid>\r\n-\r\n-                                        </Grid>\r\n-                                    </Grid>\r\n-\r\n-                                    {/* Remove Button */}\r\n-                                    <Grid item xs={1} display=\"flex\" justifyContent=\"flex-end\">\r\n-                                        {furtherFields.length > 1 && (\r\n-                                            <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n-                                                <DeleteIcon />\r\n-                                            </IconButton>\r\n-                                        )}\r\n-                                    </Grid>\r\n-                                </Grid>\r\n-                            ))}\r\n-                        </LocalizationProvider>\r\n-\r\n-                        <Grid p={2}>\r\n-                            <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n-                                Add More Further Records\r\n-                            </Button>\r\n-                        </Grid>\r\n-                        <Grid container p={1}>\r\n-                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n-                        </Grid>\r\n-                        <Grid item xs={6} mt={2}><InputField\r\n-                            label={\"Notes :\"}\r\n-                            multiline\r\n-                            rows={3}\r\n-                            size={'small'}\r\n-                            placeholder={\"Notes\"}\r\n-                            error={errors?.extranotes?.message}\r\n-                            register={register(\"extranotes\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                    </Grid>\r\n+                    \r\n+                    \r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                         <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Update\"} />\r\n                     </Box>\r\n                 </Box>\r\n"
                },
                {
                    "date": 1743288914497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -782,118 +782,9 @@\n                                 })}\r\n                             />\r\n \r\n                         </Grid>\r\n-                        <Grid item xs={3} mt={2}>\r\n-                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                                <Grid container spacing={2}>\r\n-                                    {/* Single Date Selection */}\r\n-                                    <Grid item xs={12}>\r\n-                                        <Box>\r\n-                                            <InputLabel sx={{\r\n-                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                                fontSize: \"14px\",\r\n-                                                color: \"#333\",\r\n-                                                marginBottom: 1.5,\r\n-                                            }}>\r\n-                                                Treatment Date :*\r\n-                                            </InputLabel>\r\n-                                            <Controller\r\n-                                                name=\"treatmentDate\"\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: '12px',\r\n-                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n-                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.treatmentDate && (\r\n-                                                <Typography color=\"error\">{errors.treatmentDate.message}</Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n-\r\n-\r\n-\r\n-\r\n-                                </Grid>\r\n-\r\n-\r\n-                            </LocalizationProvider>\r\n-                        </Grid>\r\n-                        <Grid item xs={3} mt={2}>\r\n-                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                                <Grid container spacing={2}>\r\n-                                    {/* Single Date Selection */}\r\n-                                    <Grid item xs={12}>\r\n-                                        <Box>\r\n-                                            <InputLabel sx={{\r\n-                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n-\r\n-                                                fontSize: \"14px\",\r\n-                                                color: \"#333\",\r\n-                                                marginBottom: 1.5,\r\n-                                            }}>\r\n-                                                Consultation Date :*\r\n-                                            </InputLabel>\r\n-                                            <Controller\r\n-                                                name=\"consultationDate\"\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: '12px',\r\n-                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n-                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.consultationDate && (\r\n-                                                <Typography color=\"error\">{errors.consultationDate.message}</Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n-\r\n-\r\n-\r\n-\r\n-                                </Grid>\r\n-\r\n-\r\n-                            </LocalizationProvider>\r\n-                        </Grid>\r\n+                       \r\n                         <Grid container p={2} spacing={2} >\r\n \r\n                             <Grid item xs={3} mt={2}>\r\n                                 <InputLabel sx={{\r\n"
                },
                {
                    "date": 1743288930767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -753,8 +753,11 @@\n \r\n                     <Grid container mt={4} spacing={2}>\r\n \r\n \r\n+                       \r\n+                       \r\n+                        <Grid container p={2} spacing={2} >\r\n                         <Grid item xs={3} mt={2}>\r\n                             <InputLabel sx={{\r\n                                 textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n@@ -782,11 +785,8 @@\n                                 })}\r\n                             />\r\n \r\n                         </Grid>\r\n-                       \r\n-                        <Grid container p={2} spacing={2} >\r\n-\r\n                             <Grid item xs={3} mt={2}>\r\n                                 <InputLabel sx={{\r\n                                     textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n \r\n"
                },
                {
                    "date": 1743288969799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -927,111 +927,10 @@\n \r\n                             })}\r\n                         /></Grid>\r\n \r\n-                        <Grid item xs={3} mt={2}>\r\n-                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n-                                <Grid container spacing={2}>\r\n-                                    {/* Single Date Selection */}\r\n-                                    <Grid item xs={12}>\r\n-                                        <Box>\r\n-                                            <InputLabel sx={{\r\n-                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n+                        \r\n \r\n-                                                fontSize: \"14px\",\r\n-                                                color: \"#333\",\r\n-                                                marginBottom: 1.5,\r\n-                                            }}>\r\n-                                                DOB :*\r\n-                                            </InputLabel>\r\n-                                            <Controller\r\n-                                                name=\"selectedDate\"\r\n-                                                control={control}\r\n-                                                rules={{ required: \"Please select a date\" }}\r\n-                                                render={({ field }) => (\r\n-                                                    <DatePicker\r\n-                                                        {...field}\r\n-                                                        value={field.value || null}\r\n-                                                        onChange={(newValue) => field.onChange(newValue)}\r\n-                                                        slotProps={{\r\n-                                                            textField: {\r\n-                                                                size: \"small\",\r\n-                                                                fullWidth: true,\r\n-                                                                sx: {\r\n-                                                                    \"& .MuiOutlinedInput-root\": {\r\n-                                                                        borderRadius: '12px',\r\n-                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n-                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n-                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n-                                                                    },\r\n-                                                                },\r\n-                                                            },\r\n-                                                        }}\r\n-                                                    />\r\n-                                                )}\r\n-                                            />\r\n-                                            {errors.selectedDate && (\r\n-                                                <Typography color=\"error\">{errors.selectedDate.message}</Typography>\r\n-                                            )}\r\n-                                        </Box>\r\n-                                    </Grid>\r\n-\r\n-\r\n-\r\n-\r\n-                                </Grid>\r\n-\r\n-\r\n-                            </LocalizationProvider>\r\n-                        </Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Phone Number :*\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Phone Number\"}\r\n-                            error={errors?.phone?.message}\r\n-                            register={register(\"phone\", {\r\n-                                required:\r\n-                                    \"Please enter your phone.\"\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Post Code :*\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Post Code\"}\r\n-                            error={errors?.post?.message}\r\n-                            register={register(\"post\", {\r\n-                                required:\r\n-                                    \"Please enter your postcode.\"\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Address :*\"}\r\n-                            size={'small'}\r\n-                            placeholder={\"Address\"}\r\n-                            error={errors?.address?.message}\r\n-                            register={register(\"address\", {\r\n-                                required:\r\n-                                    \"Please enter your address.\"\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-                        <Grid item xs={3} mt={2}><InputField\r\n-                            label={\"Notes :\"}\r\n-                            multiline\r\n-                            rows={3}\r\n-                            size={'small'}\r\n-                            placeholder={\"Notes\"}\r\n-                            error={errors?.notes?.message}\r\n-                            register={register(\"notes\", {\r\n-                                required:\r\n-                                    false\r\n-\r\n-                            })}\r\n-                        /></Grid>\r\n-\r\n-\r\n                     </Grid>\r\n                     \r\n                     \r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n"
                },
                {
                    "date": 1743289000957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -894,8 +894,9 @@\n                                     /> </>}\r\n                             </Grid>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n+                        readOnly={true}\r\n                             label={\"Patient First Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Patient First Name\"}\r\n                             error={errors?.fname?.message}\r\n"
                },
                {
                    "date": 1743289013910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -894,9 +894,9 @@\n                                     /> </>}\r\n                             </Grid>\r\n                         </Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n-                        readOnly={true}\r\n+                        disabled={true}\r\n                             label={\"Patient First Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Patient First Name\"}\r\n                             error={errors?.fname?.message}\r\n"
                },
                {
                    "date": 1743289032714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -798,9 +798,9 @@\n                                     Existing or New Patient :\r\n                                 </InputLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n \r\n-                                    <RadioGroup row value={patientType} onChange={handleChange}>\r\n+                                    <RadioGroup row value={patientType}  onChange={handleChange}>\r\n                                         <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n                                         <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n@@ -877,8 +877,9 @@\n                                     Select Aftercare Document :\r\n                                 </InputLabel>\r\n                                     <SelectField\r\n                                         size={'small'}\r\n+                                        disabled={true}\r\n                                         newLabel={'Select Document'}\r\n                                         fullWidth={true}\r\n                                         options={documents}\r\n                                         selected={selectedDocument}\r\n"
                },
                {
                    "date": 1743289042103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -798,9 +798,9 @@\n                                     Existing or New Patient :\r\n                                 </InputLabel>\r\n                                 <FormControl component=\"fieldset\">\r\n \r\n-                                    <RadioGroup row value={patientType}  onChange={handleChange}>\r\n+                                    <RadioGroup row value={patientType}  >\r\n                                         <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n                                         <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n                                     </RadioGroup>\r\n                                 </FormControl>\r\n"
                },
                {
                    "date": 1743289047335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -770,8 +770,9 @@\n                             </InputLabel>\r\n                             <SelectField\r\n                                 size={'small'}\r\n                                 newLabel={'Select Form'}\r\n+                                disabled={true}\r\n                                 fullWidth={true}\r\n                                 options={[]}\r\n                                 selected={title}\r\n                                 onSelect={(value) => {\r\n"
                },
                {
                    "date": 1743289054625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -908,8 +908,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n+                          disabled={true}\r\n                             label={\"Patient Last Name :*\"}\r\n                             size={'small'}\r\n                             placeholder={\" Patient Last Name\"}\r\n                             error={errors?.lname?.message}\r\n"
                },
                {
                    "date": 1743289065637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -878,9 +878,9 @@\n                                     Select Aftercare Document :\r\n                                 </InputLabel>\r\n                                     <SelectField\r\n                                         size={'small'}\r\n-                                        disabled={true}\r\n+                                     \r\n                                         newLabel={'Select Document'}\r\n                                         fullWidth={true}\r\n                                         options={documents}\r\n                                         selected={selectedDocument}\r\n@@ -920,8 +920,9 @@\n \r\n                             })}\r\n                         /></Grid>\r\n                         <Grid item xs={3} mt={2}><InputField\r\n+                          disabled={true}\r\n                             label={\"Patient Email :*\"}\r\n                             size={'small'}\r\n                             placeholder={\"Patient Email\"}\r\n                             error={errors?.email?.message}\r\n"
                },
                {
                    "date": 1743289167773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -890,9 +890,9 @@\n \r\n                                         }}\r\n                                         error={errors?.document?.message}\r\n                                         register={register(\"document\", {\r\n-                                            required: false,\r\n+                                            required: 'required',\r\n                                         })}\r\n                                     /> </>}\r\n                             </Grid>\r\n                         </Grid>\r\n"
                },
                {
                    "date": 1743289178549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -890,9 +890,9 @@\n \r\n                                         }}\r\n                                         error={errors?.document?.message}\r\n                                         register={register(\"document\", {\r\n-                                            required: 'required',\r\n+                                            required: 'aftercare document is required',\r\n                                         })}\r\n                                     /> </>}\r\n                             </Grid>\r\n                         </Grid>\r\n"
                },
                {
                    "date": 1743289185038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -874,9 +874,9 @@\n                                     color: \"#333\",\r\n                                     marginBottom: \"4px\",\r\n                                 }}>\r\n \r\n-                                    Select Aftercare Document :\r\n+                                    Select Aftercare Document *:\r\n                                 </InputLabel>\r\n                                     <SelectField\r\n                                         size={'small'}\r\n                                      \r\n"
                },
                {
                    "date": 1743289201976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -938,9 +938,9 @@\n                     </Grid>\r\n                     \r\n                     \r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n-                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Update\"} />\r\n+                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"sEND\"} />\r\n                     </Box>\r\n                 </Box>\r\n             </Paper>\r\n         </div >\r\n"
                },
                {
                    "date": 1743289222123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -745,9 +745,9 @@\n             <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#eff6ff', borderRadius: '12px' }}>\r\n \r\n \r\n \r\n-                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(UpdateConsentForm)} >\r\n+                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(SendForm)} >\r\n                     <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n                         Medical History Form\r\n                     </Typography>\r\n \r\n@@ -938,9 +938,9 @@\n                     </Grid>\r\n                     \r\n                     \r\n                     <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n-                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"sEND\"} />\r\n+                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Send\"} />\r\n                     </Box>\r\n                 </Box>\r\n             </Paper>\r\n         </div >\r\n"
                },
                {
                    "date": 1743289229322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -247,9 +247,9 @@\n             console.log(error);\r\n \r\n         }\r\n     };\r\n-    const UpdateConsentForm = async (formData) => {\r\n+    const SendForm = async (formData) => {\r\n         console.log(formData);\r\n \r\n         setLoader(true);\r\n         try {\r\n"
                },
                {
                    "date": 1743289238558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,48 +256,9 @@\n             let obj = {\r\n                 _id: id,\r\n                 patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n                 form_id: null,\r\n-                aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n-                treatment_date: getValues('treatmentDate'),\r\n-                consultation_date: getValues('consultationDate'),\r\n-                first_name: getValues('fname'),\r\n-                last_name: getValues('lname'),\r\n-                dob: getValues('selectedDate'),\r\n-                address: getValues('address'),\r\n-                email: getValues('email'),\r\n-                post_code: getValues('post'),\r\n-                phone: getValues('phone'),\r\n-                notes: getValues('notes'),\r\n-                picture: imageURL,\r\n-                kin_details: {\r\n-                    name: getValues('name'),\r\n-                    address: getValues('kinaddress'),\r\n-                    email: getValues('kinemail'),\r\n-                    phone: getValues('kinphone'),\r\n-                },\r\n-                general_practitioner: {\r\n-                    name: getValues('genname'),\r\n-                    address: getValues('genaddress'),\r\n-                    email: getValues('genemail'),\r\n-                    phone: getValues('genphone'),\r\n-                },\r\n-                treatment_plan: {\r\n-                    patient_concerns: getValues('patientConcerns'),\r\n-                    patient_goals: getValues('patientGoal'),\r\n-                    advised_plan: getValues('advisedPlan'),\r\n-                    expected_result: getValues('expectedResult'),\r\n-                    date: getValues('patientDate'),\r\n-                    patient_sign: signature\r\n-                },\r\n-                batch_images: uploadedImages,\r\n-                before_images: beforeImages,\r\n-                after_images: afterImages,\r\n-                further_treatment: formData?.furtherFields,\r\n-                treatment_record: formData?.records,\r\n-                extra_notes: getValues('extranotes'),\r\n-                permission_marketing: permissions?.marketing,\r\n-                offers: permissions?.offers,\r\n+                \r\n \r\n \r\n             };\r\n             console.log(obj);\r\n"
                },
                {
                    "date": 1743289246246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,9 +256,10 @@\n             let obj = {\r\n                 _id: id,\r\n                 patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n                 form_id: null,\r\n-                \r\n+                aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n+               \r\n \r\n \r\n             };\r\n             console.log(obj);\r\n"
                },
                {
                    "date": 1743289293463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,10 +254,9 @@\n         setLoader(true);\r\n         try {\r\n             let obj = {\r\n                 _id: id,\r\n-                patient_id: patientType == 'existing' ? selectedPatient?.id : null,\r\n-                form_id: null,\r\n+               \r\n                 aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n                \r\n \r\n \r\n"
                },
                {
                    "date": 1743289305722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,8 +256,9 @@\n             let obj = {\r\n                 _id: id,\r\n                \r\n                 aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n+                first_name:getValues('fname')\r\n                \r\n \r\n \r\n             };\r\n"
                },
                {
                    "date": 1743289316528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,8 +256,10 @@\n             let obj = {\r\n                 _id: id,\r\n                \r\n                 aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n+                first_name:getValues('fname'),\r\n+                last_name:getValues('lname'),\r\n                 first_name:getValues('fname')\r\n                \r\n \r\n \r\n"
                },
                {
                    "date": 1743289322784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -258,9 +258,9 @@\n                \r\n                 aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n                 first_name:getValues('fname'),\r\n                 last_name:getValues('lname'),\r\n-                first_name:getValues('fname')\r\n+                email:getValues('email')\r\n                \r\n \r\n \r\n             };\r\n"
                },
                {
                    "date": 1743289346600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -265,9 +265,9 @@\n \r\n             };\r\n             console.log(obj);\r\n \r\n-            const promise = ApiServices.UpdateForm(obj);\r\n+            const promise = ApiServices.SendForm(obj);\r\n \r\n             // Handle the API response properly\r\n             const response = await promise;\r\n             console.log(response);\r\n"
                },
                {
                    "date": 1743361666434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -667,8 +667,9 @@\n     useEffect(() => {\r\n         let value = patients?.find(item => item?._id == formData?.patient_id)\r\n         setSelectedPatient(patients?.find(item => item?._id == formData?.patient_id))\r\n         setSelectedDocument(documents?.find(item => item?._id == formData?.aftercare_document))\r\n+        setValue('document',documents?.find(item => item?._id == formData?.aftercare_document))\r\n \r\n         setValue('fname', value?.first_name || \"\");\r\n         setValue('lname', value?.last_name || \"\");\r\n         setValue('email', value?.email || \"\");\r\n"
                }
            ],
            "date": 1743288558031,
            "name": "Commit-0",
            "content": "import { useEffect, useRef, useState } from \"react\";\r\nimport ApiServices from \"../../../services/Apis\";\r\nimport { PrimaryButton } from \"../../../components/buttons\";\r\nimport { Avatar, Box, Button, CircularProgress, Dialog, DialogContent, DialogTitle, Divider, FormControl, FormControlLabel, FormLabel, Grid, IconButton, InputAdornment, InputLabel, Paper, Radio, RadioGroup, TextField, Typography } from \"@mui/material\";\r\nimport InputField from \"../../../components/input\";\r\nimport { Controller, useFieldArray, useForm } from \"react-hook-form\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { showErrorToast, showPromiseToast, showSuccessToast } from \"../../../components/Toaster\";\r\nimport UploadIcon from \"@mui/icons-material/Upload\";\r\nimport OTPInput from \"react-otp-input\";\r\nimport VisibilityIcon from \"@mui/icons-material/Visibility\";\r\nimport VisibilityOffIcon from \"@mui/icons-material/VisibilityOff\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport { DatePicker, LocalizationProvider } from \"@mui/x-date-pickers\";\r\nimport { AdapterDayjs } from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport SelectField from \"../../../components/select\";\r\nimport SignatureCanvas from \"react-signature-canvas\";\r\nimport moment from \"moment\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport UploadFileIcon from '@mui/icons-material/UploadFile';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport dayjs from \"dayjs\";\r\n\r\n\r\nconst SendForm = () => {\r\n    const navigate = useNavigate()\r\n    const [userData, setUserData] = useState(null)\r\n    const { register, control, handleSubmit, setValue, getValues, formState: { errors }, reset, watch } = useForm({\r\n        defaultValues: {\r\n            records: [{ date: \"\", amount: \"\", description: \"\" }], // Initial field (cannot be removed)\r\n            furtherFields: [{ date: null, sign: \"\" }], // Additional dynamic section\r\n        },\r\n    });\r\n    const { fields: furtherFields, append: appendFurther, remove: removeFurther } = useFieldArray({\r\n        control,\r\n        name: \"furtherFields\",\r\n    });\r\n\r\n    const { fields, append, remove } = useFieldArray({\r\n        control,\r\n        name: \"records\",\r\n    });\r\n\r\n\r\n    const signCanvasRefs = useRef([]);\r\n\r\n    // Clear Signature Function\r\n    const clearSignature = (index) => {\r\n        if (signCanvasRefs.current[index]) {\r\n            signCanvasRefs.current[index].clear();\r\n            setValue(`furtherFields.${index}.sign`, \"\");\r\n        }\r\n    };\r\n    // Function to update signature in the form state\r\n    const updateSignature = async (index) => {\r\n        if (signCanvasRefs.current[index]) {\r\n            const signData = await signCanvasRefs.current[index].toDataURL();\r\n            setValue(`furtherFields.${index}.sign`, signData);\r\n            try {\r\n                const file = signData;\r\n                if (file) {\r\n                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n                }\r\n\r\n                let obj = {\r\n                    document: signData,\r\n                    filename: moment().unix() + \"_Sign.png\"\r\n                }\r\n\r\n                const response = await axios.post(\r\n                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n                    obj\r\n                );\r\n\r\n                console.log(response?.data?.data?.path);\r\n\r\n\r\n                setValue(`furtherFields.${index}.sign`, 'https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n\r\n            }\r\n        }\r\n    };\r\n    const [title, setTitle] = useState(null)\r\n\r\n    const [step, setStep] = useState(1); // 1: OTP, 2: Reset Password\r\n    const [otp, setOtp] = useState(\"\");\r\n    const [otpError, setOtpError] = useState(false);\r\n    const [timer, setTimer] = useState(30);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [open, setOpen] = useState(false)\r\n    const [password, setPassword] = useState(\"\");\r\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n\r\n    const [showPassword2, setShowPassword2] = useState(false);\r\n    const [otpToken, setOtpToken] = useState(null)\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n    const [patientType, setPatientType] = useState(\"existing\");\r\n    const [patients, setPatients] = useState([])\r\n    const [selectedPatient, setSelectedPatient] = useState(null)\r\n    const [documents, setDocuments] = useState([])\r\n    const [selectedDocument, setSelectedDocument] = useState(null)\r\n    const sigCanvas = useRef(null);\r\n    const [signature, setSignature] = useState(null);\r\n    const [uploadedImages, setUploadedImages] = useState([])\r\n    const [imageLoader, setImageLoader] = useState(false)\r\n    const [beforeImages, setBeforeImages] = useState([])\r\n    const [imageLoaderBefore, setImageLoaderBefore] = useState(false)\r\n    const [afterImages, setAfterImages] = useState([])\r\n    const [imageLoaderAfter, setImageLoaderAfter] = useState(false)\r\n\r\n    // Handle Save Signature\r\n    const handleSave = async () => {\r\n        if (sigCanvas.current) {\r\n            const dataURL = await sigCanvas.current.toDataURL();\r\n            setSignature(dataURL);\r\n            try {\r\n                const file = dataURL;\r\n                if (file) {\r\n                    setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n                }\r\n\r\n                let obj = {\r\n                    document: dataURL,\r\n                    filename: moment().unix() + \"_Sign.png\"\r\n                }\r\n\r\n                const response = await axios.post(\r\n                    'https://cosmetic.theappkit.com/api/system/uploadDoc',\r\n                    obj\r\n                );\r\n\r\n                console.log(response?.data?.data?.path);\r\n\r\n                setSignature('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n\r\n            }\r\n        }\r\n    };\r\n\r\n    // Handle Clear Signature\r\n    const handleClear = () => {\r\n        if (sigCanvas.current) {\r\n            sigCanvas.current.clear();\r\n            setSignature(null);\r\n        }\r\n    };\r\n    const [permissions, setPermissions] = useState({\r\n        marketing: \"\",\r\n        offers: \"\",\r\n    });\r\n\r\n    const handleChange2 = (event) => {\r\n        setPermissions({\r\n            ...permissions,\r\n            [event.target.name]: event.target.value,\r\n        });\r\n    };\r\n    const handleChange = (event) => {\r\n        setPatientType(event.target.value);\r\n    };\r\n    const {\r\n        register: register4,\r\n        handleSubmit: handleSubmit4,\r\n        setValue: setValue4,\r\n        getValues: getValues4,\r\n        reset: reset4,\r\n        formState: { errors: errors4 },\r\n    } = useForm();\r\n\r\n    // Simulate OTP Submission\r\n    const handleOtpSubmit = () => {\r\n        if (otp.length !== 4) {\r\n            setOtpError(true);\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n            SubmitOTP()\r\n            setStep(2); // Move to reset password step\r\n        }, 2000);\r\n    };\r\n\r\n    // Simulate Reset Password Submission\r\n    const handleResetSubmit = () => {\r\n        if (password !== confirmPassword) {\r\n            alert(\"Passwords do not match!\");\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n            // Close dialog after password reset\r\n        }, 2000);\r\n    };\r\n    const fileInputRef = useRef(null);\r\n\r\n    const [loader, setLoader] = useState(false)\r\n\r\n    const [imageURL, setImageURL] = useState()\r\n    const [hovered, setHovered] = useState(false);\r\n\r\n\r\n\r\n\r\n    const handleImageClick = () => {\r\n        fileInputRef.current.click();\r\n    };\r\n\r\n    const handleFileChange = async (e) => {\r\n        try {\r\n            const file = e.target.files[0];\r\n            if (file) {\r\n                setValue(\"image\", file, { shouldValidate: true }); // Set value and trigger validation\r\n            }\r\n            const formData = new FormData();\r\n            formData.append(\"document\", e.target.files[0]);\r\n\r\n            const response = await axios.post(\r\n                'https://cosmetic.theappkit.com/api/system/upload',\r\n                formData,\r\n                {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                }\r\n            );\r\n\r\n            console.log(response?.data?.data?.path);\r\n\r\n            setImageURL('https://cosmetic.theappkit.com' + response?.data?.data?.path);\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n\r\n        }\r\n    };\r\n    const SendForm = async () => {\r\n        setLoader(true);\r\n        try {\r\n            let obj = {\r\n                patient_id: patientType == 'existing' ?  selectedPatient?.id : null,\r\n                form_id: null,\r\n                aftercare_document: patientType == 'existing' ? selectedDocument?._id : null,\r\n                treatment_date: getValues('treatmentDate'),\r\n                consultation_date: getValues('consultationDate'),\r\n                first_name: getValues('fname'),\r\n                last_name: getValues('lname'),\r\n                dob: getValues('selectedDate'),\r\n                address: getValues('address'),\r\n                email: getValues('email'),\r\n                post_code: getValues('post'),\r\n                phone: getValues('phone'),\r\n                notes: getValues('notes'),\r\n                picture: imageURL,\r\n                kin_details: {\r\n                    name: getValues('name'),\r\n                    address: getValues('kinaddress'),\r\n                    email: getValues('kinemail'),\r\n                    phone: getValues('kinphone'),\r\n                },\r\n                general_practitioner: {\r\n                    name: getValues('genname'),\r\n                    address: getValues('genaddress'),\r\n                    email: getValues('genemail'),\r\n                    phone: getValues('genphone'),\r\n                },\r\n                treatment_plan: {\r\n                    patient_concerns: getValues('patientConcerns'),\r\n                    patient_goals: getValues('patientGoal'),\r\n                    advised_plan: getValues('advisedPlan'),\r\n                    expected_result: getValues('expectedResult'),\r\n                    date: getValues('patientDate'),\r\n                    patient_sign: signature\r\n                },\r\n                batch_images: uploadedImages,\r\n                before_images: beforeImages,\r\n                after_images: afterImages,\r\n                further_treatment: furtherFields,\r\n                treatment_record: fields,\r\n                extra_notes: getValues('extranotes'),\r\n                permission_marketing: permissions?.marketing,\r\n                offers: permissions?.offers,\r\n\r\n\r\n            };\r\n\r\n            const promise = ApiServices.CreateForm(obj);\r\n\r\n            // Handle the API response properly\r\n            const response = await promise;\r\n            console.log(response);\r\n\r\n            showPromiseToast(\r\n                promise,\r\n                \"Saving...\",\r\n                \"Added Successfully\",\r\n                \"Something Went Wrong\"\r\n            );\r\n\r\n            // Navigate if response is successful\r\n            if (response?.responseCode === 200) {\r\n                console.log(response);\r\n                setImageURL(null)\r\n                navigate('/consent-forms')\r\n\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            showErrorToast(error)\r\n        } finally {\r\n\r\n            setLoader(false);\r\n        }\r\n    };\r\n\r\n    const SendOtp = async (val) => {\r\n        if (val != 'resend') {\r\n            setIsLoading(true)\r\n        }\r\n\r\n\r\n        setTimer(60);\r\n        try {\r\n            let obj = {\r\n                email: userData?.email\r\n            };\r\n\r\n            const data = await ApiServices.SendOtp(obj);\r\n            console.log(data);\r\n            if (data.responseCode == 206) {\r\n                setOtp('')\r\n                showSuccessToast('Otp Sent Successfully')\r\n\r\n            }\r\n\r\n        } catch (error) {\r\n\r\n            console.log(error)\r\n        }\r\n        finally {\r\n            setIsLoading(false)\r\n            setStep(1)\r\n            setOpen(true)\r\n\r\n        }\r\n    }\r\n\r\n    const UpdatePassword = async (sendData, result) => {\r\n        setIsLoading(true)\r\n        console.log(otpToken, \"otpToken2\");\r\n        try {\r\n            let obj = {\r\n                otp_token: otpToken,\r\n                email: userData?.email,\r\n                password: getValues4('password'),\r\n                confirm_password: getValues4('confirmPassword'),\r\n            };\r\n\r\n            const data = await ApiServices.SendOtp(obj);\r\n            console.log(data);\r\n            if (data.responseCode == 200) {\r\n                setOtp('')\r\n\r\n                reset4()\r\n                setConfirmPassword(false)\r\n\r\n\r\n\r\n            }\r\n        } catch (error) {\r\n            setOtpError(true)\r\n        }\r\n        finally {\r\n            setIsLoading(false)\r\n            setOpen(false)\r\n            showSuccessToast('Password Reset Successfully')\r\n        }\r\n    };\r\n\r\n    const SubmitOTP = async (val) => {\r\n\r\n        setIsLoading(true)\r\n\r\n\r\n\r\n        try {\r\n            let obj = {\r\n                email: userData?.email,\r\n                otp: otp,\r\n            };\r\n\r\n            const data = await ApiServices.SendOtp(obj);\r\n            console.log(data?.data, 'tesetttt');\r\n            if (data.responseCode == 206) {\r\n                console.log(data);\r\n                setOtpToken(data?.data?.otp_token)\r\n\r\n\r\n            }\r\n        } catch (error) {\r\n            setOtpError(true)\r\n        }\r\n        finally {\r\n            setIsLoading(false)\r\n\r\n        }\r\n    };\r\n\r\n    const handleFileChange2 = async (e) => {\r\n        setUploadedImages([]);\r\n        setImageLoader(true);\r\n\r\n        try {\r\n            const files = e.target.files;\r\n            if (!files || files.length === 0) return; // Exit if no files are selected\r\n\r\n            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n\r\n            const uploadedNewBatchImages = [];\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                const formData = new FormData();\r\n                formData.append(\"document\", files[i]);\r\n\r\n                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n\r\n                const response = await axios.post(\r\n                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n                    formData,\r\n                    {\r\n                        headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                const imagePath = response?.data?.data?.path;\r\n                if (imagePath) {\r\n                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n                    uploadedNewBatchImages.push(fullImageUrl);\r\n                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                }\r\n            }\r\n\r\n            setUploadedImages(uploadedNewBatchImages); // Update state with uploaded image URLs\r\n            console.log(\"All Uploaded Images:\", uploadedNewBatchImages);\r\n        } catch (error) {\r\n            console.error(\"Error uploading files:\", error);\r\n        } finally {\r\n            setImageLoader(false);\r\n        }\r\n    };\r\n\r\n    const handleRemoveImage = (index) => {\r\n        setUploadedImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n    };\r\n\r\n    const handleFileChange3 = async (e) => {\r\n        setBeforeImages([]);\r\n        setImageLoaderBefore(true);\r\n\r\n        try {\r\n            const files = e.target.files;\r\n            if (!files || files.length === 0) return; // Exit if no files are selected\r\n\r\n            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n\r\n            const uploadedNewBeforeImages = [];\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                const formData = new FormData();\r\n                formData.append(\"document\", files[i]);\r\n\r\n                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n\r\n                const response = await axios.post(\r\n                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n                    formData,\r\n                    {\r\n                        headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                const imagePath = response?.data?.data?.path;\r\n                if (imagePath) {\r\n                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n                    uploadedNewBeforeImages.push(fullImageUrl);\r\n                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                }\r\n            }\r\n\r\n            setBeforeImages(uploadedNewBeforeImages); // Update state with uploaded image URLs\r\n            console.log(\"All Uploaded Images:\", uploadedNewBeforeImages);\r\n        } catch (error) {\r\n            console.error(\"Error uploading files:\", error);\r\n        } finally {\r\n            setImageLoaderBefore(false);\r\n        }\r\n    };\r\n\r\n    const handleRemoveImage2 = (index) => {\r\n        setBeforeImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n    };\r\n    const handleFileChange4 = async (e) => {\r\n        setAfterImages([]);\r\n        setImageLoaderAfter(true);\r\n\r\n        try {\r\n            const files = e.target.files;\r\n            if (!files || files.length === 0) return; // Exit if no files are selected\r\n\r\n            setValue(\"images\", Array.from(files), { shouldValidate: true }); // Ensure files are stored as an array\r\n\r\n            const uploadedNewAfterImages = [];\r\n\r\n            for (let i = 0; i < files.length; i++) {\r\n                const formData = new FormData();\r\n                formData.append(\"document\", files[i]);\r\n\r\n                console.log(\"Uploading file:\", files[i].name); // Debugging log\r\n\r\n                const response = await axios.post(\r\n                    \"https://cosmetic.theappkit.com/api/system/upload\",\r\n                    formData,\r\n                    {\r\n                        headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                const imagePath = response?.data?.data?.path;\r\n                if (imagePath) {\r\n                    const fullImageUrl = \"https://cosmetic.theappkit.com\" + imagePath;\r\n                    uploadedNewAfterImages.push(fullImageUrl);\r\n                    console.log(\"Uploaded Image URL:\", fullImageUrl);\r\n                }\r\n            }\r\n\r\n            setAfterImages(uploadedNewAfterImages); // Update state with uploaded image URLs\r\n            console.log(\"All Uploaded Images:\", uploadedNewAfterImages);\r\n        } catch (error) {\r\n            console.error(\"Error uploading files:\", error);\r\n        } finally {\r\n            setImageLoaderAfter(false);\r\n        }\r\n    };\r\n\r\n    const handleRemoveImage3 = (index) => {\r\n        setAfterImages(prevImages => prevImages.filter((_, i) => i !== index));\r\n    };\r\n    useEffect(() => {\r\n        let interval;\r\n        if (timer > 0) {\r\n            interval = setInterval(() => {\r\n                setTimer((prev) => prev - 1);\r\n            }, 1000);\r\n        } else {\r\n            clearInterval(interval);\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, [timer]);\r\n\r\n    const getDocuments = async () => {\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 999\r\n            };\r\n\r\n            const data = await ApiServices.getAfterCareDocuments(params);\r\n\r\n\r\n\r\n            setDocuments(\r\n                data?.data?.documents?.map((doc) => ({\r\n\r\n                    id: doc?._id, // Example transformation\r\n                    name: doc.title, // Another example\r\n                }))\r\n            );\r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    const getPatients = async () => {\r\n        try {\r\n            let params = {\r\n                page: 1,\r\n                limit: 999\r\n            };\r\n\r\n            const data = await ApiServices.getPatients(params);\r\n\r\n\r\n\r\n            setPatients(\r\n                data?.data?.patients?.map((doc) => ({\r\n                    ...doc,\r\n                    id: doc?._id, // Example transformation\r\n                    name: doc.title + \" \" + doc?.first_name + ' ' + doc?.last_name, // Another example\r\n                }))\r\n            );\r\n\r\n        } catch (error) {\r\n            console.error(\"Error fetching location:\", error);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        getPatients()\r\n        getDocuments()\r\n    }, [])\r\n    useEffect(() => {\r\n        // Disable drawing on the single canvas\r\n        if (sigCanvas.current) {\r\n            sigCanvas.current.off();\r\n        }\r\n\r\n        // Disable drawing on all multiple canvases\r\n        signCanvasRefs.current.forEach((canvas) => {\r\n            if (canvas) {\r\n                canvas.off();\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Paper sx={{ width: \"100%\", overflow: \"hidden\", boxShadow: 'none', backgroundColor: '#eff6ff', borderRadius: '12px' }}>\r\n\r\n\r\n\r\n                <Box component={'form'} p={3} sx={{ borderRadius: '12px' }} onSubmit={handleSubmit(SendForm)} >\r\n                    <Typography variant=\"h5\" sx={{ fontWeight: 700 }}>\r\n                    Medical History Form\r\n                    </Typography>\r\n\r\n                    <Grid container mt={4} spacing={2}>\r\n\r\n\r\n                        <Grid item xs={3} mt={2}>\r\n                            <InputLabel sx={{\r\n                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n\r\n                                fontSize: \"14px\",\r\n                                color: \"#333\",\r\n                                marginBottom: \"4px\",\r\n                            }}>\r\n\r\n                                Select Form :\r\n                            </InputLabel>\r\n                            <SelectField\r\n                                size={'small'}\r\n                                newLabel={'Select Form'}\r\n                                fullWidth={true}\r\n                                options={[]}\r\n                                selected={title}\r\n                                onSelect={(value) => {\r\n                                    setTitle(value)\r\n\r\n\r\n                                }}\r\n                                error={errors?.title?.message}\r\n                                register={register(\"title\", {\r\n                                    required: false,\r\n                                })}\r\n                            />\r\n\r\n                        </Grid>\r\n                        <Grid item xs={3} mt={2}>\r\n                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                <Grid container spacing={2}>\r\n                                    {/* Single Date Selection */}\r\n                                    <Grid item xs={12}>\r\n                                        <Box>\r\n                                            <InputLabel sx={{\r\n                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n\r\n                                                fontSize: \"14px\",\r\n                                                color: \"#333\",\r\n                                                marginBottom: 1.5,\r\n                                            }}>\r\n                                                Treatment Date :*\r\n                                            </InputLabel>\r\n                                            <Controller\r\n                                                name=\"treatmentDate\"\r\n                                                control={control}\r\n                                                rules={{ required: \"Please select a date\" }}\r\n                                                render={({ field }) => (\r\n                                                    <DatePicker\r\n                                                        {...field}\r\n                                                        value={field.value || null}\r\n                                                        onChange={(newValue) => field.onChange(newValue)}\r\n                                                        slotProps={{\r\n                                                            textField: {\r\n                                                                size: \"small\",\r\n                                                                fullWidth: true,\r\n                                                                sx: {\r\n                                                                    \"& .MuiOutlinedInput-root\": {\r\n                                                                        borderRadius: '12px',\r\n                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n                                                                    },\r\n                                                                },\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                            {errors.treatmentDate && (\r\n                                                <Typography color=\"error\">{errors.treatmentDate.message}</Typography>\r\n                                            )}\r\n                                        </Box>\r\n                                    </Grid>\r\n\r\n\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                        <Grid item xs={3} mt={2}>\r\n                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                <Grid container spacing={2}>\r\n                                    {/* Single Date Selection */}\r\n                                    <Grid item xs={12}>\r\n                                        <Box>\r\n                                            <InputLabel sx={{\r\n                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n\r\n                                                fontSize: \"14px\",\r\n                                                color: \"#333\",\r\n                                                marginBottom: 1.5,\r\n                                            }}>\r\n                                                Consultation Date :*\r\n                                            </InputLabel>\r\n                                            <Controller\r\n                                                name=\"consultationDate\"\r\n                                                control={control}\r\n                                                rules={{ required: \"Please select a date\" }}\r\n                                                render={({ field }) => (\r\n                                                    <DatePicker\r\n                                                        {...field}\r\n                                                        value={field.value || null}\r\n                                                        onChange={(newValue) => field.onChange(newValue)}\r\n                                                        slotProps={{\r\n                                                            textField: {\r\n                                                                size: \"small\",\r\n                                                                fullWidth: true,\r\n                                                                sx: {\r\n                                                                    \"& .MuiOutlinedInput-root\": {\r\n                                                                        borderRadius: '12px',\r\n                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n                                                                    },\r\n                                                                },\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                            {errors.consultationDate && (\r\n                                                <Typography color=\"error\">{errors.consultationDate.message}</Typography>\r\n                                            )}\r\n                                        </Box>\r\n                                    </Grid>\r\n\r\n\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                        <Grid container p={2} spacing={2} >\r\n\r\n                            <Grid item xs={3} mt={2}>\r\n                                <InputLabel sx={{\r\n                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n\r\n                                    fontSize: \"14px\",\r\n                                    color: \"#333\",\r\n                                    marginBottom: \"4px\",\r\n                                }}>\r\n\r\n                                    Existing or New Patient :\r\n                                </InputLabel>\r\n                                <FormControl component=\"fieldset\">\r\n\r\n                                    <RadioGroup row value={patientType} onChange={handleChange}>\r\n                                        <FormControlLabel value=\"existing\" control={<Radio />} label=\"Existing\" />\r\n                                        <FormControlLabel value=\"new\" control={<Radio />} label=\"New\" />\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={3} mt={2}>\r\n                                {patientType == 'existing' && <> <InputLabel sx={{\r\n                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n\r\n                                    fontSize: \"14px\",\r\n                                    color: \"#333\",\r\n                                    marginBottom: \"4px\",\r\n                                }}>\r\n\r\n                                    Select Patient :\r\n                                </InputLabel>\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        newLabel={'Select Patient'}\r\n                                        fullWidth={true}\r\n                                        options={patients}\r\n                                        selected={selectedPatient}\r\n                                        onSelect={(value) => {\r\n                                            setSelectedPatient(value);\r\n                                            console.log(\"Selected Patient:\", value);\r\n                                    \r\n                                            setValue('fname', value?.first_name || \"\");\r\n                                            setValue('lname', value?.last_name || \"\");\r\n                                            setValue('email', value?.email || \"\");\r\n                                            setValue('post', value?.post_code || \"\");\r\n                                            setValue('phone', value?.phone || \"\");\r\n                                            setValue('address', value?.address || \"\");\r\n                                            setValue('notes', value?.notes || \"\");\r\n                                            setValue('name', value?.kin_details?.name || \"\");\r\n                                            setValue('kinemail', value?.kin_details?.email || \"\");\r\n                                            setValue('kinphone', value?.kin_details?.phone || \"\");\r\n                                            setValue('kinaddress', value?.kin_details?.address || \"\");\r\n                                            setValue('genname', value?.general_practitioner?.name || \"\");\r\n                                            setValue('genemail', value?.general_practitioner?.email || \"\");\r\n                                            setValue('genphone', value?.general_practitioner?.phone || \"\");\r\n                                            setValue('genaddress', value?.general_practitioner?.address || \"\");\r\n                                            console.log(\"Raw DOB:\", value?.dob);\r\n                                    \r\n                                            if (value?.dob) {\r\n                                                // Convert to Dayjs format\r\n                                                const parsedDate = dayjs(value.dob);\r\n                                    \r\n                                                // Check if the conversion is valid\r\n                                                if (!parsedDate.isValid()) {\r\n                                                    console.error(\"Invalid DOB Format:\", value.dob);\r\n                                                    return;\r\n                                                }\r\n                                    \r\n                                                console.log(\"Parsed Date:\", parsedDate);\r\n                                                setValue(\"selectedDate\", parsedDate);\r\n                                            }\r\n                                        }}\r\n                                        error={errors?.patient?.message}\r\n                                        register={register(\"patient\", {\r\n                                            required: false,\r\n                                        })}\r\n                                    />\r\n                                </>}\r\n                            </Grid>\r\n                            <Grid item xs={3} mt={2}>\r\n                                {patientType == 'existing' && <><InputLabel sx={{\r\n                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n\r\n                                    fontSize: \"14px\",\r\n                                    color: \"#333\",\r\n                                    marginBottom: \"4px\",\r\n                                }}>\r\n\r\n                                    Select Aftercare Document :\r\n                                </InputLabel>\r\n                                    <SelectField\r\n                                        size={'small'}\r\n                                        newLabel={'Select Document'}\r\n                                        fullWidth={true}\r\n                                        options={documents}\r\n                                        selected={selectedDocument}\r\n                                        onSelect={(value) => {\r\n                                            setSelectedDocument(value)\r\n\r\n\r\n                                        }}\r\n                                        error={errors?.document?.message}\r\n                                        register={register(\"document\", {\r\n                                            required: false,\r\n                                        })}\r\n                                    /> </>}\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Patient First Name :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Patient First Name\"}\r\n                            error={errors?.fname?.message}\r\n                            register={register(\"fname\", {\r\n                                required:\r\n                                    \"Please enter your fname.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Patient Last Name :*\"}\r\n                            size={'small'}\r\n                            placeholder={\" Patient Last Name\"}\r\n                            error={errors?.lname?.message}\r\n                            register={register(\"lname\", {\r\n                                required:\r\n                                    \"Please enter your lname.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Patient Email :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Patient Email\"}\r\n                            error={errors?.email?.message}\r\n                            register={register(\"email\", {\r\n                                required:\r\n                                    \"Please enter your email.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={3} mt={2}>\r\n                            <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                <Grid container spacing={2}>\r\n                                    {/* Single Date Selection */}\r\n                                    <Grid item xs={12}>\r\n                                        <Box>\r\n                                            <InputLabel sx={{\r\n                                                textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n\r\n                                                fontSize: \"14px\",\r\n                                                color: \"#333\",\r\n                                                marginBottom: 1.5,\r\n                                            }}>\r\n                                                DOB :*\r\n                                            </InputLabel>\r\n                                            <Controller\r\n                                                name=\"selectedDate\"\r\n                                                control={control}\r\n                                                rules={{ required: \"Please select a date\" }}\r\n                                                render={({ field }) => (\r\n                                                    <DatePicker\r\n                                                        {...field}\r\n                                                        value={field.value || null}\r\n                                                        onChange={(newValue) => field.onChange(newValue)}\r\n                                                        slotProps={{\r\n                                                            textField: {\r\n                                                                size: \"small\",\r\n                                                                fullWidth: true,\r\n                                                                sx: {\r\n                                                                    \"& .MuiOutlinedInput-root\": {\r\n                                                                        borderRadius: '12px',\r\n                                                                        \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n                                                                        \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n                                                                        \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n                                                                    },\r\n                                                                },\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                            {errors.selectedDate && (\r\n                                                <Typography color=\"error\">{errors.selectedDate.message}</Typography>\r\n                                            )}\r\n                                        </Box>\r\n                                    </Grid>\r\n\r\n\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Phone Number :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Phone Number\"}\r\n                            error={errors?.phone?.message}\r\n                            register={register(\"phone\", {\r\n                                required:\r\n                                    \"Please enter your phone.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Post Code :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Post Code\"}\r\n                            error={errors?.post?.message}\r\n                            register={register(\"post\", {\r\n                                required:\r\n                                    \"Please enter your postcode.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Address :*\"}\r\n                            size={'small'}\r\n                            placeholder={\"Address\"}\r\n                            error={errors?.address?.message}\r\n                            register={register(\"address\", {\r\n                                required:\r\n                                    \"Please enter your address.\"\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Notes :\"}\r\n                            multiline\r\n                            rows={3}\r\n                            size={'small'}\r\n                            placeholder={\"Notes\"}\r\n                            error={errors?.notes?.message}\r\n                            register={register(\"notes\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n\r\n                    </Grid>\r\n                    <Divider sx={{ mt: 4 }} />\r\n                    <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n                        Next of Kin Details\r\n                    </Typography>\r\n                    <Grid container mt={4} spacing={2}>\r\n\r\n\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Name :\"}\r\n                            size={'small'}\r\n                            placeholder={\"Name\"}\r\n                            error={errors?.name?.message}\r\n                            register={register(\"name\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Email :\"}\r\n                            size={'small'}\r\n                            placeholder={\"Email\"}\r\n                            error={errors?.kinemail?.message}\r\n                            register={register(\"kinemail\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Phone Number :\"}\r\n                            size={'small'}\r\n                            placeholder={\"Phone Number\"}\r\n                            error={errors?.kinphone?.message}\r\n                            register={register(\"kinphone\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Address :\"}\r\n                            size={'small'}\r\n                            placeholder={\"Address\"}\r\n                            error={errors?.kinaddress?.message}\r\n                            register={register(\"kinaddress\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n\r\n\r\n                    </Grid>\r\n                    <Divider sx={{ mt: 4 }} />\r\n                    <Typography variant=\"h5\" sx={{ fontWeight: 700, mt: 4 }}>\r\n                        General Practitioners(GP / Doctors)\r\n                    </Typography>\r\n                    <Grid container mt={4} spacing={2}>\r\n\r\n\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Name :\"}\r\n                            size={'small'}\r\n                            placeholder={\"Name\"}\r\n                            error={errors?.genname?.message}\r\n                            register={register(\"genname\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Email :\"}\r\n                            size={'small'}\r\n                            placeholder={\"Email\"}\r\n                            error={errors?.genemail?.message}\r\n                            register={register(\"genemail\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Phone Number :\"}\r\n                            size={'small'}\r\n                            placeholder={\"Phone Number\"}\r\n                            error={errors?.genphone?.message}\r\n                            register={register(\"genphone\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n\r\n                        <Grid item xs={3} mt={2}><InputField\r\n                            label={\"Address :\"}\r\n                            size={'small'}\r\n                            placeholder={\"Address\"}\r\n                            error={errors?.genaddress?.message}\r\n                            register={register(\"genaddress\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n                        <Grid container p={1}>\r\n                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n                        </Grid>\r\n                        <Grid container spacing={2} p={2}>\r\n                            {/* Marketing Permission */}\r\n                            <Grid item xs={6} mt={2}>\r\n                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we have permission to use your images for marketing?</FormLabel>\r\n                                <FormControl component=\"fieldset\">\r\n\r\n                                    <RadioGroup row name=\"marketing\" value={permissions.marketing} onChange={handleChange2}>\r\n                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                            {/* Offers & Reminders Permission */}\r\n                            <Grid item xs={6} mt={2}>\r\n                                <FormLabel component=\"legend\" sx={{ color: 'black' }}>Can we send you offers & reminders by text email & WhatsApp?</FormLabel>\r\n                                <FormControl component=\"fieldset\">\r\n\r\n                                    <RadioGroup row name=\"offers\" value={permissions.offers} onChange={handleChange2}>\r\n                                        <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\r\n                                        <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\r\n                                    </RadioGroup>\r\n                                </FormControl>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container p={1}>\r\n                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n                        </Grid>\r\n                        <Typography variant=\"h5\" fontWeight=\"bold\" mb={2} p={2}>\r\n                            Treatment plan section\r\n                        </Typography>\r\n\r\n                        <Grid container spacing={2} p={2}>\r\n                            {/* Patient Concerns */}\r\n                            <Grid item xs={6} mt={2}>\r\n                                <InputField\r\n                                    label=\"Patient concerns\"\r\n                                    size=\"small\"\r\n                                    placeholder=\"Patient concerns\"\r\n                                    error={errors?.patientConcerns?.message}\r\n                                    register={register(\"patientConcerns\", { required: false })}\r\n                                    multiline\r\n                                    rows={4}\r\n                                />\r\n                            </Grid>\r\n\r\n                            {/* Patient Goal */}\r\n                            <Grid item xs={6} mt={2}>\r\n                                <InputField\r\n                                    label=\"Patient goal\"\r\n                                    size=\"small\"\r\n                                    placeholder=\"Patient goal\"\r\n                                    error={errors?.patientGoal?.message}\r\n                                    register={register(\"patientGoal\", { required: false })}\r\n                                    multiline\r\n                                    rows={4}\r\n                                />\r\n                            </Grid>\r\n\r\n                            {/* Advised Plan/Product */}\r\n                            <Grid item xs={6} mt={2}>\r\n                                <InputField\r\n                                    label=\"Advised Plan/product\"\r\n                                    size=\"small\"\r\n                                    placeholder=\"Advised Plan/product\"\r\n                                    error={errors?.advisedPlan?.message}\r\n                                    register={register(\"advisedPlan\", { required: false })}\r\n                                    multiline\r\n                                    rows={4}\r\n                                />\r\n                            </Grid>\r\n\r\n                            {/* Expected Result */}\r\n                            <Grid item xs={6} mt={2}>\r\n                                <InputField\r\n                                    label=\"Expected Result\"\r\n                                    size=\"small\"\r\n                                    placeholder=\"Expected Result\"\r\n                                    error={errors?.expectedResult?.message}\r\n                                    register={register(\"expectedResult\", { required: false })}\r\n                                    multiline\r\n                                    rows={4}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Typography variant=\"p\" fontWeight={500} mb={2} p={2}>\r\n                            I confirm my medical history to be true and correct. I agree I have read and understood all the contents of this document. I have read and understood all the content of this document and agree with the treatment plan. I give my consent to treatment and understand the possible complications and side effects. I confirm I have received an aftercare sheet\r\n                        </Typography>\r\n                        <Grid container spacing={5} p={2} alignItems=\"center\">\r\n                            {/* Date Field */}\r\n                            <Grid item xs={6} mt={2}>\r\n                                <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                                    <Grid container spacing={2}>\r\n                                        {/* Single Date Selection */}\r\n                                        <Grid item xs={12}>\r\n                                            <Box>\r\n                                                <InputLabel sx={{\r\n                                                    textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block',\r\n\r\n                                                    fontSize: \"14px\",\r\n                                                    color: \"#333\",\r\n                                                    marginBottom: 1.5,\r\n                                                }}>\r\n                                                    Patient Date :*\r\n                                                </InputLabel>\r\n                                                <Controller\r\n                                                    name=\"patientDate\"\r\n                                                    control={control}\r\n                                                    rules={{ required: \"Please select a date\" }}\r\n                                                    render={({ field }) => (\r\n                                                        <DatePicker\r\n                                                            {...field}\r\n                                                            value={field.value || null}\r\n                                                            onChange={(newValue) => field.onChange(newValue)}\r\n                                                            slotProps={{\r\n                                                                textField: {\r\n                                                                    size: \"small\",\r\n                                                                    fullWidth: true,\r\n                                                                    sx: {\r\n                                                                        \"& .MuiOutlinedInput-root\": {\r\n                                                                            borderRadius: '12px',\r\n                                                                            \"& fieldset\": { border: \"1 solid #e0e0e0\" }, // Default border\r\n                                                                            \"&:hover fieldset\": { border: \"1 solid #0076bf\" }, // On hover\r\n                                                                            \"&.Mui-focused fieldset\": { border: \"1 solid #0076bf !important\" } // On focus\r\n                                                                        },\r\n                                                                    },\r\n                                                                },\r\n                                                            }}\r\n                                                        />\r\n                                                    )}\r\n                                                />\r\n                                                {errors.patientDate && (\r\n                                                    <Typography color=\"error\">{errors.patientDate.message}</Typography>\r\n                                                )}\r\n                                            </Box>\r\n                                        </Grid>\r\n\r\n\r\n\r\n\r\n                                    </Grid>\r\n\r\n\r\n                                </LocalizationProvider>\r\n                            </Grid>\r\n\r\n                            {/* Signature Canvas */}\r\n                            <Grid item xs={6} mt={2}>\r\n                                <Typography>Patient Signature:</Typography>\r\n                                <SignatureCanvas\r\n                                    ref={sigCanvas}\r\n                                    penColor=\"black\"\r\n                                    canvasProps={{\r\n                                        width: 300,\r\n                                        height: 150,\r\n                                        className: \"sigCanvas\",\r\n                                        style: { border: \"1px dashed black\" },\r\n                                    }}\r\n                                />\r\n                                <Grid container spacing={1} mt={1}>\r\n                                    <Grid item>\r\n                                        <Button variant=\"contained\" color=\"secondary\" onClick={handleClear}>\r\n                                            Clear Signature\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item>\r\n                                        <Button variant=\"contained\" color=\"primary\" onClick={handleSave}>\r\n                                            Save Signature\r\n                                        </Button>\r\n                                    </Grid>\r\n\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid container p={1}>\r\n                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n                        </Grid>\r\n                        {console.log(watch('records'))\r\n                        }\r\n                        <Typography variant=\"h5\" p={2} fontWeight={'bold'}>Treatment Record Section</Typography>\r\n\r\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                            {fields.map((item, index) => (\r\n                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n\r\n                                    {/* Patient Date Selection */}\r\n                                    <Grid item xs={3}>\r\n                                        <Box>\r\n                                            <InputLabel\r\n                                                sx={{\r\n                                                    textTransform: \"capitalize\",\r\n                                                    textAlign: \"left\",\r\n                                                    fontWeight: 700,\r\n                                                    fontSize: \"14px\",\r\n                                                    color: \"#333\",\r\n                                                    marginBottom: 1.5,\r\n                                                }}\r\n                                            >\r\n                                                Date :*\r\n                                            </InputLabel>\r\n\r\n                                            <Controller\r\n                                                name={`records.${index}.date`}\r\n                                                control={control}\r\n                                                rules={{ required: \"Please select a date\" }}\r\n                                                render={({ field }) => (\r\n                                                    <DatePicker\r\n                                                        {...field}\r\n                                                        value={field.value || null}\r\n                                                        onChange={(newValue) => field.onChange(newValue)}\r\n                                                        slotProps={{\r\n                                                            textField: {\r\n                                                                size: \"small\",\r\n                                                                fullWidth: true,\r\n                                                                sx: {\r\n                                                                    \"& .MuiOutlinedInput-root\": {\r\n                                                                        borderRadius: \"12px\",\r\n                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n                                                                    },\r\n                                                                },\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                            {errors.records?.[index]?.date && (\r\n                                                <Typography color=\"error\">\r\n                                                    {errors.records[index].date.message}\r\n                                                </Typography>\r\n                                            )}\r\n                                        </Box>\r\n                                    </Grid>\r\n\r\n                                    {/* Amount Field */}\r\n                                    <Grid item xs={3} mt={2}>\r\n                                        <InputField\r\n                                            label=\"Amount\"\r\n                                            placeholder=\"Order Amount\"\r\n                                            size=\"small\"\r\n                                            register={register(`records.${index}.amount`)}\r\n                                        />\r\n                                    </Grid>\r\n\r\n\r\n\r\n                                    {/* Description Field */}\r\n                                    <Grid item xs={4}>\r\n                                        <InputField\r\n                                            label=\"Description\"\r\n                                            multiline\r\n                                            rows={3}\r\n                                            placeholder=\"Description\"\r\n                                            register={register(`records.${index}.description`)}\r\n                                        />\r\n                                    </Grid>\r\n                                    {/* Remove Button (only for additional fields) */}\r\n                                    <Grid item xs={1}>\r\n                                        {index > 0 && (\r\n                                            <IconButton color=\"error\" onClick={() => remove(index)}>\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        )}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            ))}\r\n                        </LocalizationProvider>\r\n\r\n\r\n\r\n                        <Grid container p={2}>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => append({ date: \"\", amount: \"\", description: \"\" })}\r\n                                sx={{ mt: 2, textTransform: 'capitalize' }}\r\n                            >\r\n                                Add More\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid container p={1}>\r\n                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={5}>\r\n                            <InputLabel sx={{\r\n                                textTransform: \"capitalize\", mt: 2,\r\n                                textAlign: \"left\",\r\n                                fontWeight: 600,\r\n                                fontSize: \"14px\",\r\n                                color: \"#333\",\r\n                                marginBottom: \"4px\",\r\n                            }}>\r\n                                Upload Batch Images :*\r\n                            </InputLabel>\r\n\r\n                            <Controller\r\n                                name=\"media\"\r\n                                control={control}\r\n                                rules={{\r\n                                    required: \"At least one image file is required\",\r\n                                    validate: (value) => {\r\n                                        if (!value || value.length === 0) {\r\n                                            return \"At least one image file is required\";\r\n                                        }\r\n                                        for (let i = 0; i < value.length; i++) {\r\n                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n                                                return \"Each file must be smaller than 10MB\";\r\n                                            }\r\n                                            if (!value[i].type.startsWith(\"image/\")) {\r\n                                                return \"Only image files are allowed\";\r\n                                            }\r\n                                        }\r\n                                        return true;\r\n                                    },\r\n                                }}\r\n                                render={({ field: { onChange } }) => (\r\n                                    <>\r\n                                        <Box\r\n                                            sx={{\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                textAlign: \"center\",\r\n                                                cursor: \"pointer\",\r\n                                                backgroundColor: \"#f9f9f9\",\r\n                                                height: '135px',\r\n                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                            }}\r\n                                            onClick={() => document.getElementById(\"upload-media\").click()}\r\n                                        >\r\n                                            {!imageLoader ? (\r\n                                                <>\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        accept=\"image/*\"\r\n                                                        multiple\r\n                                                        style={{ display: \"none\" }}\r\n                                                        id=\"upload-media\"\r\n                                                        onChange={(e) => {\r\n                                                            const files = Array.from(e.target.files);\r\n                                                            onChange(files); // Update react-hook-form\r\n                                                            handleFileChange2(e); // Handle upload logic\r\n                                                        }}\r\n                                                    />\r\n                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n                                                        Drag & drop or click to upload images\r\n                                                    </Typography>\r\n                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n                                                        Allowed: Images (Max 10MB per file)\r\n                                                    </Typography>\r\n                                                </>\r\n                                            ) : (\r\n                                                <CircularProgress size={90} />\r\n                                            )}\r\n                                        </Box>\r\n\r\n                                        {errors.media && (\r\n                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n                                                {errors.media.message}\r\n                                            </Typography>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container p={2}>\r\n                            {uploadedImages?.length > 0 && (\r\n                                <Grid item xs={12}>\r\n                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n                                        Uploaded Batch Images :\r\n                                    </InputLabel>\r\n                                </Grid>\r\n                            )}\r\n                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n                                {uploadedImages?.length > 0 &&\r\n                                    uploadedImages.map((file, index) => (\r\n                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                            <img\r\n                                                src={file}\r\n                                                alt=\"Uploaded Preview\"\r\n                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                            />\r\n                                            <Typography\r\n                                                variant=\"caption\"\r\n                                                sx={{\r\n                                                    display: \"block\",\r\n                                                    mt: 1,\r\n                                                    maxWidth: \"150px\",\r\n                                                    whiteSpace: \"nowrap\",\r\n                                                    overflow: \"hidden\",\r\n                                                    textOverflow: \"ellipsis\",\r\n                                                }}\r\n                                            >\r\n                                                {file.split(\"/\").pop()}\r\n                                            </Typography>\r\n                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n                                                <IconButton\r\n                                                    onClick={() => handleRemoveImage(index)}\r\n                                                    sx={{\r\n                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n                                                        color: \"#fff\",\r\n                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n                                                        width: 20,\r\n                                                        height: 20,\r\n                                                        borderRadius: \"50%\",\r\n                                                        p: 0.5,\r\n                                                    }}\r\n                                                >\r\n                                                    <CloseIcon fontSize=\"small\" />\r\n                                                </IconButton>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    ))}\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid container p={1}>\r\n                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={5}>\r\n                            <InputLabel sx={{\r\n                                textTransform: \"capitalize\", mt: 2,\r\n                                textAlign: \"left\",\r\n                                fontWeight: 600,\r\n                                fontSize: \"14px\",\r\n                                color: \"#333\",\r\n                                marginBottom: \"4px\",\r\n                            }}>\r\n                                Upload Before Images :*\r\n                            </InputLabel>\r\n\r\n                            <Controller\r\n                                name=\"media2\"\r\n                                control={control}\r\n                                rules={{\r\n                                    required: \"At least one image file is required\",\r\n                                    validate: (value) => {\r\n                                        if (!value || value.length === 0) {\r\n                                            return \"At least one image file is required\";\r\n                                        }\r\n                                        for (let i = 0; i < value.length; i++) {\r\n                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n                                                return \"Each file must be smaller than 10MB\";\r\n                                            }\r\n                                            if (!value[i].type.startsWith(\"image/\")) {\r\n                                                return \"Only image files are allowed\";\r\n                                            }\r\n                                        }\r\n                                        return true;\r\n                                    },\r\n                                }}\r\n                                render={({ field: { onChange } }) => (\r\n                                    <>\r\n                                        <Box\r\n                                            sx={{\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                textAlign: \"center\",\r\n                                                cursor: \"pointer\",\r\n                                                backgroundColor: \"#f9f9f9\",\r\n                                                height: '135px',\r\n                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                            }}\r\n                                            onClick={() => document.getElementById(\"upload-media2\").click()}\r\n                                        >\r\n                                            {!imageLoaderBefore ? (\r\n                                                <>\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        accept=\"image/*\"\r\n                                                        multiple\r\n                                                        style={{ display: \"none\" }}\r\n                                                        id=\"upload-media2\"\r\n                                                        onChange={(e) => {\r\n                                                            const files = Array.from(e.target.files);\r\n                                                            onChange(files); // Update react-hook-form\r\n                                                            handleFileChange3(e); // Handle upload logic\r\n                                                        }}\r\n                                                    />\r\n                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n                                                        Drag & drop or click to upload images\r\n                                                    </Typography>\r\n                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n                                                        Allowed: Images (Max 10MB per file)\r\n                                                    </Typography>\r\n                                                </>\r\n                                            ) : (\r\n                                                <CircularProgress size={90} />\r\n                                            )}\r\n                                        </Box>\r\n\r\n                                        {errors.media2 && (\r\n                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n                                                {errors.media2.message}\r\n                                            </Typography>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container p={2}>\r\n                            {beforeImages?.length > 0 && (\r\n                                <Grid item xs={12}>\r\n                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n                                        Uploaded Before Images :\r\n                                    </InputLabel>\r\n                                </Grid>\r\n                            )}\r\n                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n                                {beforeImages?.length > 0 &&\r\n                                    beforeImages.map((file, index) => (\r\n                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                            <img\r\n                                                src={file}\r\n                                                alt=\"Uploaded Preview\"\r\n                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                            />\r\n                                            <Typography\r\n                                                variant=\"caption\"\r\n                                                sx={{\r\n                                                    display: \"block\",\r\n                                                    mt: 1,\r\n                                                    maxWidth: \"150px\",\r\n                                                    whiteSpace: \"nowrap\",\r\n                                                    overflow: \"hidden\",\r\n                                                    textOverflow: \"ellipsis\",\r\n                                                }}\r\n                                            >\r\n                                                {file.split(\"/\").pop()}\r\n                                            </Typography>\r\n                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n                                                <IconButton\r\n                                                    onClick={() => handleRemoveImage2(index)}\r\n                                                    sx={{\r\n                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n                                                        color: \"#fff\",\r\n                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n                                                        width: 20,\r\n                                                        height: 20,\r\n                                                        borderRadius: \"50%\",\r\n                                                        p: 0.5,\r\n                                                    }}\r\n                                                >\r\n                                                    <CloseIcon fontSize=\"small\" />\r\n                                                </IconButton>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    ))}\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid container p={1}>\r\n                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={5}>\r\n                            <InputLabel sx={{\r\n                                textTransform: \"capitalize\", mt: 2,\r\n                                textAlign: \"left\",\r\n                                fontWeight: 600,\r\n                                fontSize: \"14px\",\r\n                                color: \"#333\",\r\n                                marginBottom: \"4px\",\r\n                            }}>\r\n                                Upload After Images :*\r\n                            </InputLabel>\r\n\r\n                            <Controller\r\n                                name=\"media3\"\r\n                                control={control}\r\n                                rules={{\r\n                                    required: \"At least one image file is required\",\r\n                                    validate: (value) => {\r\n                                        if (!value || value.length === 0) {\r\n                                            return \"At least one image file is required\";\r\n                                        }\r\n                                        for (let i = 0; i < value.length; i++) {\r\n                                            if (value[i].size > 10 * 1024 * 1024) { // 10MB limit\r\n                                                return \"Each file must be smaller than 10MB\";\r\n                                            }\r\n                                            if (!value[i].type.startsWith(\"image/\")) {\r\n                                                return \"Only image files are allowed\";\r\n                                            }\r\n                                        }\r\n                                        return true;\r\n                                    },\r\n                                }}\r\n                                render={({ field: { onChange } }) => (\r\n                                    <>\r\n                                        <Box\r\n                                            sx={{\r\n                                                borderRadius: \"8px\",\r\n                                                padding: \"20px\",\r\n                                                textAlign: \"center\",\r\n                                                cursor: \"pointer\",\r\n                                                backgroundColor: \"#f9f9f9\",\r\n                                                height: '135px',\r\n                                                \"&:hover\": { backgroundColor: \"#eef7ff\" },\r\n                                            }}\r\n                                            onClick={() => document.getElementById(\"upload-media3\").click()}\r\n                                        >\r\n                                            {!imageLoaderAfter ? (\r\n                                                <>\r\n                                                    <input\r\n                                                        type=\"file\"\r\n                                                        accept=\"image/*\"\r\n                                                        multiple\r\n                                                        style={{ display: \"none\" }}\r\n                                                        id=\"upload-media3\"\r\n                                                        onChange={(e) => {\r\n                                                            const files = Array.from(e.target.files);\r\n                                                            onChange(files); // Update react-hook-form\r\n                                                            handleFileChange4(e); // Handle upload logic\r\n                                                        }}\r\n                                                    />\r\n                                                    <UploadFileIcon sx={{ fontSize: 40, color: \"#0EA5EA\" }} />\r\n                                                    <Typography variant=\"body1\" sx={{ color: \"#333\", mt: 1 }}>\r\n                                                        Drag & drop or click to upload images\r\n                                                    </Typography>\r\n                                                    <Typography variant=\"caption\" sx={{ color: \"#666\" }}>\r\n                                                        Allowed: Images (Max 10MB per file)\r\n                                                    </Typography>\r\n                                                </>\r\n                                            ) : (\r\n                                                <CircularProgress size={90} />\r\n                                            )}\r\n                                        </Box>\r\n\r\n                                        {errors.media3 && (\r\n                                            <Typography color=\"error\" variant=\"body2\" sx={{ mt: 1 }}>\r\n                                                {errors.media3.message}\r\n                                            </Typography>\r\n                                        )}\r\n                                    </>\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid container p={2}>\r\n                            {afterImages?.length > 0 && (\r\n                                <Grid item xs={12}>\r\n                                    <InputLabel sx={{ textTransform: \"capitalize\", textAlign: 'left', fontWeight: 700, display: 'block', mb: 3, mt: 3 }}>\r\n                                        Uploaded After Images :\r\n                                    </InputLabel>\r\n                                </Grid>\r\n                            )}\r\n                            <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\" }}>\r\n                                {afterImages?.length > 0 &&\r\n                                    afterImages.map((file, index) => (\r\n                                        <Box key={index} sx={{ position: \"relative\", textAlign: \"center\" }}>\r\n                                            <img\r\n                                                src={file}\r\n                                                alt=\"Uploaded Preview\"\r\n                                                style={{ width: \"100px\", height: \"100px\", borderRadius: \"8px\", objectFit: \"cover\" }}\r\n                                            />\r\n                                            <Typography\r\n                                                variant=\"caption\"\r\n                                                sx={{\r\n                                                    display: \"block\",\r\n                                                    mt: 1,\r\n                                                    maxWidth: \"150px\",\r\n                                                    whiteSpace: \"nowrap\",\r\n                                                    overflow: \"hidden\",\r\n                                                    textOverflow: \"ellipsis\",\r\n                                                }}\r\n                                            >\r\n                                                {file.split(\"/\").pop()}\r\n                                            </Typography>\r\n                                            <Box sx={{ position: \"absolute\", top: 0, right: 0 }}>\r\n                                                <IconButton\r\n                                                    onClick={() => handleRemoveImage3(index)}\r\n                                                    sx={{\r\n                                                        backgroundColor: \"rgba(0,0,0,0.6)\",\r\n                                                        color: \"#fff\",\r\n                                                        \"&:hover\": { backgroundColor: \"red\" },\r\n                                                        width: 20,\r\n                                                        height: 20,\r\n                                                        borderRadius: \"50%\",\r\n                                                        p: 0.5,\r\n                                                    }}\r\n                                                >\r\n                                                    <CloseIcon fontSize=\"small\" />\r\n                                                </IconButton>\r\n                                            </Box>\r\n                                        </Box>\r\n                                    ))}\r\n                            </Box>\r\n                        </Grid>\r\n                        <Grid container p={1}>\r\n                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n                        </Grid>\r\n                        <Typography variant=\"h6\" p={2} sx={{ mt: 4, fontWeight: 'bold' }}>Further Records</Typography>\r\n\r\n                        <LocalizationProvider dateAdapter={AdapterDayjs}>\r\n                            {furtherFields.map((item, index) => (\r\n                                <Grid container spacing={2} p={2} alignItems=\"center\" key={item.id} mt={2}>\r\n                                    {/* Date Selection */}\r\n                                    <Grid item xs={5}>\r\n                                        <Box>\r\n                                            <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1.5 }}>\r\n                                                Further Date :*\r\n                                            </InputLabel>\r\n                                            <Controller\r\n                                                name={`furtherFields.${index}.date`}\r\n                                                control={control}\r\n                                                rules={{ required: \"Please select a date\" }}\r\n                                                render={({ field }) => (\r\n                                                    <DatePicker\r\n                                                        {...field}\r\n                                                        value={field.value || null}\r\n                                                        onChange={(newValue) => field.onChange(newValue)}\r\n                                                        slotProps={{\r\n                                                            textField: {\r\n                                                                size: \"small\",\r\n                                                                fullWidth: true,\r\n                                                                sx: {\r\n                                                                    \"& .MuiOutlinedInput-root\": {\r\n                                                                        borderRadius: \"12px\",\r\n                                                                        \"& fieldset\": { border: \"1px solid #e0e0e0\" },\r\n                                                                        \"&:hover fieldset\": { border: \"1px solid #0076bf\" },\r\n                                                                        \"&.Mui-focused fieldset\": { border: \"1px solid #0076bf !important\" },\r\n                                                                    },\r\n                                                                },\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                )}\r\n                                            />\r\n                                            {errors.furtherFields?.[index]?.date && (\r\n                                                <Typography color=\"error\">\r\n                                                    {errors.furtherFields[index].date.message}\r\n                                                </Typography>\r\n                                            )}\r\n                                        </Box>\r\n                                        <Typography mt={2}>\r\n                                            I confirm there has not been any changes to my medical history or my health since completing this form , it is still true and up to date.\r\n                                        </Typography>\r\n                                    </Grid>\r\n\r\n                                    {/* Signature Field */}\r\n                                    <Grid item xs={5}>\r\n                                        <Box>\r\n                                            <InputLabel sx={{ fontWeight: 700, fontSize: \"14px\", marginBottom: 1 }}>\r\n                                                Signature :*\r\n                                            </InputLabel>\r\n                                            <SignatureCanvas\r\n                                                ref={(el) => (signCanvasRefs.current[index] = el)}\r\n                                                penColor=\"black\"\r\n                                                canvasProps={{ width: 300, height: 150, style: { border: \"1px dashed black\" } }}\r\n                                            />\r\n\r\n                                        </Box>\r\n                                        <Grid container spacing={1} mt={1}>\r\n                                            <Grid item>\r\n                                                <Button variant=\"contained\" color=\"secondary\" onClick={() => clearSignature(index)}>\r\n                                                    Clear Signature\r\n                                                </Button>\r\n                                            </Grid>\r\n                                            <Grid item>\r\n                                                <Button variant=\"contained\" color=\"primary\" onClick={() => updateSignature(index)}>\r\n                                                    Save Signature\r\n                                                </Button>\r\n                                            </Grid>\r\n\r\n                                        </Grid>\r\n                                    </Grid>\r\n\r\n                                    {/* Remove Button */}\r\n                                    <Grid item xs={1} display=\"flex\" justifyContent=\"flex-end\">\r\n                                        {furtherFields.length > 1 && (\r\n                                            <IconButton color=\"error\" onClick={() => removeFurther(index)}>\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        )}\r\n                                    </Grid>\r\n                                </Grid>\r\n                            ))}\r\n                        </LocalizationProvider>\r\n\r\n                        <Grid p={2}>\r\n                            <Button variant=\"contained\" color=\"secondary\" onClick={() => appendFurther({ date: null, sign: \"\" })} sx={{ mt: 2 }}>\r\n                                Add More Further Records\r\n                            </Button>\r\n                        </Grid>\r\n                        <Grid container p={1}>\r\n                            <Divider sx={{ mt: 4, width: '100%' }} />\r\n                        </Grid>\r\n                        <Grid item xs={6} mt={2}><InputField\r\n                            label={\"Notes :\"}\r\n                            multiline\r\n                            rows={3}\r\n                            size={'small'}\r\n                            placeholder={\"Notes\"}\r\n                            error={errors?.extranotes?.message}\r\n                            register={register(\"extranotes\", {\r\n                                required:\r\n                                    false\r\n\r\n                            })}\r\n                        /></Grid>\r\n                    </Grid>\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', width: '100%', mt: 2 }}>\r\n                        <PrimaryButton loader={loader} disabled={loader} type={'submit'} title={\"Create\"} />\r\n                    </Box>\r\n                </Box>\r\n            </Paper>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default SendForm\r\n"
        }
    ]
}